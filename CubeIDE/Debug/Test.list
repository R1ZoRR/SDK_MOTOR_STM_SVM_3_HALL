
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800a4b0  0800a4b0  0001a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b8  0800a6b8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c0  0800a6c0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000098  0800a760  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800a760  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ec  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002829  00000000  00000000  00034aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200b3  00000000  00000000  00039750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015712  00000000  00000000  00059803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacf8  00000000  00000000  0006ef15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  00139c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a494 	.word	0x0800a494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800a494 	.word	0x0800a494

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fmul>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d06f      	beq.n	8000ee4 <__aeabi_fmul+0xf8>
 8000e04:	441a      	add	r2, r3
 8000e06:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0a:	0240      	lsls	r0, r0, #9
 8000e0c:	bf18      	it	ne
 8000e0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e12:	d01e      	beq.n	8000e52 <__aeabi_fmul+0x66>
 8000e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e20:	fba0 3101 	umull	r3, r1, r0, r1
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e2c:	bf3e      	ittt	cc
 8000e2e:	0049      	lslcc	r1, r1, #1
 8000e30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e34:	005b      	lslcc	r3, r3, #1
 8000e36:	ea40 0001 	orr.w	r0, r0, r1
 8000e3a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e3e:	2afd      	cmp	r2, #253	; 0xfd
 8000e40:	d81d      	bhi.n	8000e7e <__aeabi_fmul+0x92>
 8000e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4a:	bf08      	it	eq
 8000e4c:	f020 0001 	biceq.w	r0, r0, #1
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	0249      	lsleq	r1, r1, #9
 8000e5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e66:	3a7f      	subs	r2, #127	; 0x7f
 8000e68:	bfc2      	ittt	gt
 8000e6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e72:	4770      	bxgt	lr
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	dc5d      	bgt.n	8000f3c <__aeabi_fmul+0x150>
 8000e80:	f112 0f19 	cmn.w	r2, #25
 8000e84:	bfdc      	itt	le
 8000e86:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e8a:	4770      	bxle	lr
 8000e8c:	f1c2 0200 	rsb	r2, r2, #0
 8000e90:	0041      	lsls	r1, r0, #1
 8000e92:	fa21 f102 	lsr.w	r1, r1, r2
 8000e96:	f1c2 0220 	rsb	r2, r2, #32
 8000e9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ea2:	f140 0000 	adc.w	r0, r0, #0
 8000ea6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eaa:	bf08      	it	eq
 8000eac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb0:	4770      	bx	lr
 8000eb2:	f092 0f00 	teq	r2, #0
 8000eb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0040      	lsleq	r0, r0, #1
 8000ebe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec2:	3a01      	subeq	r2, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fmul+0xce>
 8000ec6:	ea40 000c 	orr.w	r0, r0, ip
 8000eca:	f093 0f00 	teq	r3, #0
 8000ece:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0049      	lsleq	r1, r1, #1
 8000ed6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eda:	3b01      	subeq	r3, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xe6>
 8000ede:	ea41 010c 	orr.w	r1, r1, ip
 8000ee2:	e78f      	b.n	8000e04 <__aeabi_fmul+0x18>
 8000ee4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	bf18      	it	ne
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d00a      	beq.n	8000f0a <__aeabi_fmul+0x11e>
 8000ef4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef8:	bf18      	it	ne
 8000efa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efe:	d1d8      	bne.n	8000eb2 <__aeabi_fmul+0xc6>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	4770      	bx	lr
 8000f0a:	f090 0f00 	teq	r0, #0
 8000f0e:	bf17      	itett	ne
 8000f10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f14:	4608      	moveq	r0, r1
 8000f16:	f091 0f00 	teqne	r1, #0
 8000f1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f1e:	d014      	beq.n	8000f4a <__aeabi_fmul+0x15e>
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d101      	bne.n	8000f2a <__aeabi_fmul+0x13e>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d10f      	bne.n	8000f4a <__aeabi_fmul+0x15e>
 8000f2a:	ea93 0f0c 	teq	r3, ip
 8000f2e:	d103      	bne.n	8000f38 <__aeabi_fmul+0x14c>
 8000f30:	024b      	lsls	r3, r1, #9
 8000f32:	bf18      	it	ne
 8000f34:	4608      	movne	r0, r1
 8000f36:	d108      	bne.n	8000f4a <__aeabi_fmul+0x15e>
 8000f38:	ea80 0001 	eor.w	r0, r0, r1
 8000f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f48:	4770      	bx	lr
 8000f4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f52:	4770      	bx	lr

08000f54 <__aeabi_fdiv>:
 8000f54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f5c:	bf1e      	ittt	ne
 8000f5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f62:	ea92 0f0c 	teqne	r2, ip
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d069      	beq.n	8001040 <__aeabi_fdiv+0xec>
 8000f6c:	eba2 0203 	sub.w	r2, r2, r3
 8000f70:	ea80 0c01 	eor.w	ip, r0, r1
 8000f74:	0249      	lsls	r1, r1, #9
 8000f76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f7a:	d037      	beq.n	8000fec <__aeabi_fdiv+0x98>
 8000f7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	bf38      	it	cc
 8000f90:	005b      	lslcc	r3, r3, #1
 8000f92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	bf24      	itt	cs
 8000f9e:	1a5b      	subcs	r3, r3, r1
 8000fa0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb6:	bf24      	itt	cs
 8000fb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc4:	bf24      	itt	cs
 8000fc6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	bf18      	it	ne
 8000fd2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd6:	d1e0      	bne.n	8000f9a <__aeabi_fdiv+0x46>
 8000fd8:	2afd      	cmp	r2, #253	; 0xfd
 8000fda:	f63f af50 	bhi.w	8000e7e <__aeabi_fmul+0x92>
 8000fde:	428b      	cmp	r3, r1
 8000fe0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe4:	bf08      	it	eq
 8000fe6:	f020 0001 	biceq.w	r0, r0, #1
 8000fea:	4770      	bx	lr
 8000fec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ff0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff4:	327f      	adds	r2, #127	; 0x7f
 8000ff6:	bfc2      	ittt	gt
 8000ff8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ffc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001000:	4770      	bxgt	lr
 8001002:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	3a01      	subs	r2, #1
 800100c:	e737      	b.n	8000e7e <__aeabi_fmul+0x92>
 800100e:	f092 0f00 	teq	r2, #0
 8001012:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001016:	bf02      	ittt	eq
 8001018:	0040      	lsleq	r0, r0, #1
 800101a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800101e:	3a01      	subeq	r2, #1
 8001020:	d0f9      	beq.n	8001016 <__aeabi_fdiv+0xc2>
 8001022:	ea40 000c 	orr.w	r0, r0, ip
 8001026:	f093 0f00 	teq	r3, #0
 800102a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0049      	lsleq	r1, r1, #1
 8001032:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001036:	3b01      	subeq	r3, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xda>
 800103a:	ea41 010c 	orr.w	r1, r1, ip
 800103e:	e795      	b.n	8000f6c <__aeabi_fdiv+0x18>
 8001040:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001044:	ea92 0f0c 	teq	r2, ip
 8001048:	d108      	bne.n	800105c <__aeabi_fdiv+0x108>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	f47f af7d 	bne.w	8000f4a <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	f47f af70 	bne.w	8000f38 <__aeabi_fmul+0x14c>
 8001058:	4608      	mov	r0, r1
 800105a:	e776      	b.n	8000f4a <__aeabi_fmul+0x15e>
 800105c:	ea93 0f0c 	teq	r3, ip
 8001060:	d104      	bne.n	800106c <__aeabi_fdiv+0x118>
 8001062:	024b      	lsls	r3, r1, #9
 8001064:	f43f af4c 	beq.w	8000f00 <__aeabi_fmul+0x114>
 8001068:	4608      	mov	r0, r1
 800106a:	e76e      	b.n	8000f4a <__aeabi_fmul+0x15e>
 800106c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001070:	bf18      	it	ne
 8001072:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001076:	d1ca      	bne.n	800100e <__aeabi_fdiv+0xba>
 8001078:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800107c:	f47f af5c 	bne.w	8000f38 <__aeabi_fmul+0x14c>
 8001080:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001084:	f47f af3c 	bne.w	8000f00 <__aeabi_fmul+0x114>
 8001088:	e75f      	b.n	8000f4a <__aeabi_fmul+0x15e>
 800108a:	bf00      	nop

0800108c <__gesf2>:
 800108c:	f04f 3cff 	mov.w	ip, #4294967295
 8001090:	e006      	b.n	80010a0 <__cmpsf2+0x4>
 8001092:	bf00      	nop

08001094 <__lesf2>:
 8001094:	f04f 0c01 	mov.w	ip, #1
 8001098:	e002      	b.n	80010a0 <__cmpsf2+0x4>
 800109a:	bf00      	nop

0800109c <__cmpsf2>:
 800109c:	f04f 0c01 	mov.w	ip, #1
 80010a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	bf18      	it	ne
 80010b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010b6:	d011      	beq.n	80010dc <__cmpsf2+0x40>
 80010b8:	b001      	add	sp, #4
 80010ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010be:	bf18      	it	ne
 80010c0:	ea90 0f01 	teqne	r0, r1
 80010c4:	bf58      	it	pl
 80010c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ca:	bf88      	it	hi
 80010cc:	17c8      	asrhi	r0, r1, #31
 80010ce:	bf38      	it	cc
 80010d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010d4:	bf18      	it	ne
 80010d6:	f040 0001 	orrne.w	r0, r0, #1
 80010da:	4770      	bx	lr
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	d102      	bne.n	80010e8 <__cmpsf2+0x4c>
 80010e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e6:	d105      	bne.n	80010f4 <__cmpsf2+0x58>
 80010e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ec:	d1e4      	bne.n	80010b8 <__cmpsf2+0x1c>
 80010ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f2:	d0e1      	beq.n	80010b8 <__cmpsf2+0x1c>
 80010f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_cfrcmple>:
 80010fc:	4684      	mov	ip, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4661      	mov	r1, ip
 8001102:	e7ff      	b.n	8001104 <__aeabi_cfcmpeq>

08001104 <__aeabi_cfcmpeq>:
 8001104:	b50f      	push	{r0, r1, r2, r3, lr}
 8001106:	f7ff ffc9 	bl	800109c <__cmpsf2>
 800110a:	2800      	cmp	r0, #0
 800110c:	bf48      	it	mi
 800110e:	f110 0f00 	cmnmi.w	r0, #0
 8001112:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001114 <__aeabi_fcmpeq>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff fff4 	bl	8001104 <__aeabi_cfcmpeq>
 800111c:	bf0c      	ite	eq
 800111e:	2001      	moveq	r0, #1
 8001120:	2000      	movne	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmplt>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffea 	bl	8001104 <__aeabi_cfcmpeq>
 8001130:	bf34      	ite	cc
 8001132:	2001      	movcc	r0, #1
 8001134:	2000      	movcs	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmple>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffe0 	bl	8001104 <__aeabi_cfcmpeq>
 8001144:	bf94      	ite	ls
 8001146:	2001      	movls	r0, #1
 8001148:	2000      	movhi	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmpge>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffd2 	bl	80010fc <__aeabi_cfrcmple>
 8001158:	bf94      	ite	ls
 800115a:	2001      	movls	r0, #1
 800115c:	2000      	movhi	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmpgt>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffc8 	bl	80010fc <__aeabi_cfrcmple>
 800116c:	bf34      	ite	cc
 800116e:	2001      	movcc	r0, #1
 8001170:	2000      	movcs	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_f2uiz>:
 8001178:	0042      	lsls	r2, r0, #1
 800117a:	d20e      	bcs.n	800119a <__aeabi_f2uiz+0x22>
 800117c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001180:	d30b      	bcc.n	800119a <__aeabi_f2uiz+0x22>
 8001182:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001186:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118a:	d409      	bmi.n	80011a0 <__aeabi_f2uiz+0x28>
 800118c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2uiz+0x32>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d102      	bne.n	80011b0 <__aeabi_f2uiz+0x38>
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	4770      	bx	lr
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <__aeabi_uldivmod>:
 80011b8:	b953      	cbnz	r3, 80011d0 <__aeabi_uldivmod+0x18>
 80011ba:	b94a      	cbnz	r2, 80011d0 <__aeabi_uldivmod+0x18>
 80011bc:	2900      	cmp	r1, #0
 80011be:	bf08      	it	eq
 80011c0:	2800      	cmpeq	r0, #0
 80011c2:	bf1c      	itt	ne
 80011c4:	f04f 31ff 	movne.w	r1, #4294967295
 80011c8:	f04f 30ff 	movne.w	r0, #4294967295
 80011cc:	f000 b976 	b.w	80014bc <__aeabi_idiv0>
 80011d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011d8:	f000 f806 	bl	80011e8 <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr

080011e8 <__udivmoddi4>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	9e08      	ldr	r6, [sp, #32]
 80011ee:	460d      	mov	r5, r1
 80011f0:	4604      	mov	r4, r0
 80011f2:	4688      	mov	r8, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d14d      	bne.n	8001294 <__udivmoddi4+0xac>
 80011f8:	428a      	cmp	r2, r1
 80011fa:	4694      	mov	ip, r2
 80011fc:	d968      	bls.n	80012d0 <__udivmoddi4+0xe8>
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	b152      	cbz	r2, 800121a <__udivmoddi4+0x32>
 8001204:	fa01 f302 	lsl.w	r3, r1, r2
 8001208:	f1c2 0120 	rsb	r1, r2, #32
 800120c:	fa20 f101 	lsr.w	r1, r0, r1
 8001210:	fa0c fc02 	lsl.w	ip, ip, r2
 8001214:	ea41 0803 	orr.w	r8, r1, r3
 8001218:	4094      	lsls	r4, r2
 800121a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800121e:	fbb8 f7f1 	udiv	r7, r8, r1
 8001222:	fa1f fe8c 	uxth.w	lr, ip
 8001226:	fb01 8817 	mls	r8, r1, r7, r8
 800122a:	fb07 f00e 	mul.w	r0, r7, lr
 800122e:	0c23      	lsrs	r3, r4, #16
 8001230:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001234:	4298      	cmp	r0, r3
 8001236:	d90a      	bls.n	800124e <__udivmoddi4+0x66>
 8001238:	eb1c 0303 	adds.w	r3, ip, r3
 800123c:	f107 35ff 	add.w	r5, r7, #4294967295
 8001240:	f080 811e 	bcs.w	8001480 <__udivmoddi4+0x298>
 8001244:	4298      	cmp	r0, r3
 8001246:	f240 811b 	bls.w	8001480 <__udivmoddi4+0x298>
 800124a:	3f02      	subs	r7, #2
 800124c:	4463      	add	r3, ip
 800124e:	1a1b      	subs	r3, r3, r0
 8001250:	fbb3 f0f1 	udiv	r0, r3, r1
 8001254:	fb01 3310 	mls	r3, r1, r0, r3
 8001258:	fb00 fe0e 	mul.w	lr, r0, lr
 800125c:	b2a4      	uxth	r4, r4
 800125e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001262:	45a6      	cmp	lr, r4
 8001264:	d90a      	bls.n	800127c <__udivmoddi4+0x94>
 8001266:	eb1c 0404 	adds.w	r4, ip, r4
 800126a:	f100 33ff 	add.w	r3, r0, #4294967295
 800126e:	f080 8109 	bcs.w	8001484 <__udivmoddi4+0x29c>
 8001272:	45a6      	cmp	lr, r4
 8001274:	f240 8106 	bls.w	8001484 <__udivmoddi4+0x29c>
 8001278:	4464      	add	r4, ip
 800127a:	3802      	subs	r0, #2
 800127c:	2100      	movs	r1, #0
 800127e:	eba4 040e 	sub.w	r4, r4, lr
 8001282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001286:	b11e      	cbz	r6, 8001290 <__udivmoddi4+0xa8>
 8001288:	2300      	movs	r3, #0
 800128a:	40d4      	lsrs	r4, r2
 800128c:	e9c6 4300 	strd	r4, r3, [r6]
 8001290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0xc2>
 8001298:	2e00      	cmp	r6, #0
 800129a:	f000 80ee 	beq.w	800147a <__udivmoddi4+0x292>
 800129e:	2100      	movs	r1, #0
 80012a0:	e9c6 0500 	strd	r0, r5, [r6]
 80012a4:	4608      	mov	r0, r1
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	fab3 f183 	clz	r1, r3
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d14a      	bne.n	8001348 <__udivmoddi4+0x160>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d302      	bcc.n	80012bc <__udivmoddi4+0xd4>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	f200 80fc 	bhi.w	80014b4 <__udivmoddi4+0x2cc>
 80012bc:	1a84      	subs	r4, r0, r2
 80012be:	eb65 0303 	sbc.w	r3, r5, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	4698      	mov	r8, r3
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d0e2      	beq.n	8001290 <__udivmoddi4+0xa8>
 80012ca:	e9c6 4800 	strd	r4, r8, [r6]
 80012ce:	e7df      	b.n	8001290 <__udivmoddi4+0xa8>
 80012d0:	b902      	cbnz	r2, 80012d4 <__udivmoddi4+0xec>
 80012d2:	deff      	udf	#255	; 0xff
 80012d4:	fab2 f282 	clz	r2, r2
 80012d8:	2a00      	cmp	r2, #0
 80012da:	f040 8091 	bne.w	8001400 <__udivmoddi4+0x218>
 80012de:	eba1 000c 	sub.w	r0, r1, ip
 80012e2:	2101      	movs	r1, #1
 80012e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012e8:	fa1f fe8c 	uxth.w	lr, ip
 80012ec:	fbb0 f3f7 	udiv	r3, r0, r7
 80012f0:	fb07 0013 	mls	r0, r7, r3, r0
 80012f4:	0c25      	lsrs	r5, r4, #16
 80012f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012fa:	fb0e f003 	mul.w	r0, lr, r3
 80012fe:	42a8      	cmp	r0, r5
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x12c>
 8001302:	eb1c 0505 	adds.w	r5, ip, r5
 8001306:	f103 38ff 	add.w	r8, r3, #4294967295
 800130a:	d202      	bcs.n	8001312 <__udivmoddi4+0x12a>
 800130c:	42a8      	cmp	r0, r5
 800130e:	f200 80ce 	bhi.w	80014ae <__udivmoddi4+0x2c6>
 8001312:	4643      	mov	r3, r8
 8001314:	1a2d      	subs	r5, r5, r0
 8001316:	fbb5 f0f7 	udiv	r0, r5, r7
 800131a:	fb07 5510 	mls	r5, r7, r0, r5
 800131e:	fb0e fe00 	mul.w	lr, lr, r0
 8001322:	b2a4      	uxth	r4, r4
 8001324:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001328:	45a6      	cmp	lr, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x156>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f100 35ff 	add.w	r5, r0, #4294967295
 8001334:	d202      	bcs.n	800133c <__udivmoddi4+0x154>
 8001336:	45a6      	cmp	lr, r4
 8001338:	f200 80b6 	bhi.w	80014a8 <__udivmoddi4+0x2c0>
 800133c:	4628      	mov	r0, r5
 800133e:	eba4 040e 	sub.w	r4, r4, lr
 8001342:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001346:	e79e      	b.n	8001286 <__udivmoddi4+0x9e>
 8001348:	f1c1 0720 	rsb	r7, r1, #32
 800134c:	408b      	lsls	r3, r1
 800134e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001352:	ea4c 0c03 	orr.w	ip, ip, r3
 8001356:	fa25 fa07 	lsr.w	sl, r5, r7
 800135a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800135e:	fbba f8f9 	udiv	r8, sl, r9
 8001362:	fa20 f307 	lsr.w	r3, r0, r7
 8001366:	fb09 aa18 	mls	sl, r9, r8, sl
 800136a:	408d      	lsls	r5, r1
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	431d      	orrs	r5, r3
 8001372:	fa00 f301 	lsl.w	r3, r0, r1
 8001376:	fb08 f00e 	mul.w	r0, r8, lr
 800137a:	0c2c      	lsrs	r4, r5, #16
 800137c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001380:	42a0      	cmp	r0, r4
 8001382:	fa02 f201 	lsl.w	r2, r2, r1
 8001386:	d90b      	bls.n	80013a0 <__udivmoddi4+0x1b8>
 8001388:	eb1c 0404 	adds.w	r4, ip, r4
 800138c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001390:	f080 8088 	bcs.w	80014a4 <__udivmoddi4+0x2bc>
 8001394:	42a0      	cmp	r0, r4
 8001396:	f240 8085 	bls.w	80014a4 <__udivmoddi4+0x2bc>
 800139a:	f1a8 0802 	sub.w	r8, r8, #2
 800139e:	4464      	add	r4, ip
 80013a0:	1a24      	subs	r4, r4, r0
 80013a2:	fbb4 f0f9 	udiv	r0, r4, r9
 80013a6:	fb09 4410 	mls	r4, r9, r0, r4
 80013aa:	fb00 fe0e 	mul.w	lr, r0, lr
 80013ae:	b2ad      	uxth	r5, r5
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	45a6      	cmp	lr, r4
 80013b6:	d908      	bls.n	80013ca <__udivmoddi4+0x1e2>
 80013b8:	eb1c 0404 	adds.w	r4, ip, r4
 80013bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c0:	d26c      	bcs.n	800149c <__udivmoddi4+0x2b4>
 80013c2:	45a6      	cmp	lr, r4
 80013c4:	d96a      	bls.n	800149c <__udivmoddi4+0x2b4>
 80013c6:	3802      	subs	r0, #2
 80013c8:	4464      	add	r4, ip
 80013ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013ce:	fba0 9502 	umull	r9, r5, r0, r2
 80013d2:	eba4 040e 	sub.w	r4, r4, lr
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	46c8      	mov	r8, r9
 80013da:	46ae      	mov	lr, r5
 80013dc:	d356      	bcc.n	800148c <__udivmoddi4+0x2a4>
 80013de:	d053      	beq.n	8001488 <__udivmoddi4+0x2a0>
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d069      	beq.n	80014b8 <__udivmoddi4+0x2d0>
 80013e4:	ebb3 0208 	subs.w	r2, r3, r8
 80013e8:	eb64 040e 	sbc.w	r4, r4, lr
 80013ec:	fa22 f301 	lsr.w	r3, r2, r1
 80013f0:	fa04 f707 	lsl.w	r7, r4, r7
 80013f4:	431f      	orrs	r7, r3
 80013f6:	40cc      	lsrs	r4, r1
 80013f8:	e9c6 7400 	strd	r7, r4, [r6]
 80013fc:	2100      	movs	r1, #0
 80013fe:	e747      	b.n	8001290 <__udivmoddi4+0xa8>
 8001400:	fa0c fc02 	lsl.w	ip, ip, r2
 8001404:	f1c2 0120 	rsb	r1, r2, #32
 8001408:	fa25 f301 	lsr.w	r3, r5, r1
 800140c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001410:	fa20 f101 	lsr.w	r1, r0, r1
 8001414:	4095      	lsls	r5, r2
 8001416:	430d      	orrs	r5, r1
 8001418:	fbb3 f1f7 	udiv	r1, r3, r7
 800141c:	fb07 3311 	mls	r3, r7, r1, r3
 8001420:	fa1f fe8c 	uxth.w	lr, ip
 8001424:	0c28      	lsrs	r0, r5, #16
 8001426:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800142a:	fb01 f30e 	mul.w	r3, r1, lr
 800142e:	4283      	cmp	r3, r0
 8001430:	fa04 f402 	lsl.w	r4, r4, r2
 8001434:	d908      	bls.n	8001448 <__udivmoddi4+0x260>
 8001436:	eb1c 0000 	adds.w	r0, ip, r0
 800143a:	f101 38ff 	add.w	r8, r1, #4294967295
 800143e:	d22f      	bcs.n	80014a0 <__udivmoddi4+0x2b8>
 8001440:	4283      	cmp	r3, r0
 8001442:	d92d      	bls.n	80014a0 <__udivmoddi4+0x2b8>
 8001444:	3902      	subs	r1, #2
 8001446:	4460      	add	r0, ip
 8001448:	1ac0      	subs	r0, r0, r3
 800144a:	fbb0 f3f7 	udiv	r3, r0, r7
 800144e:	fb07 0013 	mls	r0, r7, r3, r0
 8001452:	b2ad      	uxth	r5, r5
 8001454:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001458:	fb03 f00e 	mul.w	r0, r3, lr
 800145c:	42a8      	cmp	r0, r5
 800145e:	d908      	bls.n	8001472 <__udivmoddi4+0x28a>
 8001460:	eb1c 0505 	adds.w	r5, ip, r5
 8001464:	f103 38ff 	add.w	r8, r3, #4294967295
 8001468:	d216      	bcs.n	8001498 <__udivmoddi4+0x2b0>
 800146a:	42a8      	cmp	r0, r5
 800146c:	d914      	bls.n	8001498 <__udivmoddi4+0x2b0>
 800146e:	3b02      	subs	r3, #2
 8001470:	4465      	add	r5, ip
 8001472:	1a28      	subs	r0, r5, r0
 8001474:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001478:	e738      	b.n	80012ec <__udivmoddi4+0x104>
 800147a:	4631      	mov	r1, r6
 800147c:	4630      	mov	r0, r6
 800147e:	e707      	b.n	8001290 <__udivmoddi4+0xa8>
 8001480:	462f      	mov	r7, r5
 8001482:	e6e4      	b.n	800124e <__udivmoddi4+0x66>
 8001484:	4618      	mov	r0, r3
 8001486:	e6f9      	b.n	800127c <__udivmoddi4+0x94>
 8001488:	454b      	cmp	r3, r9
 800148a:	d2a9      	bcs.n	80013e0 <__udivmoddi4+0x1f8>
 800148c:	ebb9 0802 	subs.w	r8, r9, r2
 8001490:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001494:	3801      	subs	r0, #1
 8001496:	e7a3      	b.n	80013e0 <__udivmoddi4+0x1f8>
 8001498:	4643      	mov	r3, r8
 800149a:	e7ea      	b.n	8001472 <__udivmoddi4+0x28a>
 800149c:	4628      	mov	r0, r5
 800149e:	e794      	b.n	80013ca <__udivmoddi4+0x1e2>
 80014a0:	4641      	mov	r1, r8
 80014a2:	e7d1      	b.n	8001448 <__udivmoddi4+0x260>
 80014a4:	46d0      	mov	r8, sl
 80014a6:	e77b      	b.n	80013a0 <__udivmoddi4+0x1b8>
 80014a8:	4464      	add	r4, ip
 80014aa:	3802      	subs	r0, #2
 80014ac:	e747      	b.n	800133e <__udivmoddi4+0x156>
 80014ae:	3b02      	subs	r3, #2
 80014b0:	4465      	add	r5, ip
 80014b2:	e72f      	b.n	8001314 <__udivmoddi4+0x12c>
 80014b4:	4608      	mov	r0, r1
 80014b6:	e706      	b.n	80012c6 <__udivmoddi4+0xde>
 80014b8:	4631      	mov	r1, r6
 80014ba:	e6e9      	b.n	8001290 <__udivmoddi4+0xa8>

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <HAL_ADC_ConvCpltCallback>:

char *buffer = "tes";

// Срабатывает, по завершению считывания данных с датчиков тока
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint8_t DMA_Flag = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <change_mode>:

void change_mode(int set_mode) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	switch (set_mode){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d120      	bne.n	8001528 <change_mode+0x50>
	case 0:
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // ШИМ TIM1_CH1N
 80014e6:	2100      	movs	r1, #0
 80014e8:	4815      	ldr	r0, [pc, #84]	; (8001540 <change_mode+0x68>)
 80014ea:	f006 fee7 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);    // ШИМ TIM1_CH1
 80014ee:	2100      	movs	r1, #0
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <change_mode+0x68>)
 80014f2:	f005 ffa3 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // ШИМ TIM1_CH2N
 80014f6:	2104      	movs	r1, #4
 80014f8:	4811      	ldr	r0, [pc, #68]	; (8001540 <change_mode+0x68>)
 80014fa:	f006 fedf 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    // ШИМ TIM1_CH2
 80014fe:	2104      	movs	r1, #4
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <change_mode+0x68>)
 8001502:	f005 ff9b 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1); // ШИМ TIM8_CH1N
 8001506:	2100      	movs	r1, #0
 8001508:	480e      	ldr	r0, [pc, #56]	; (8001544 <change_mode+0x6c>)
 800150a:	f006 fed7 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);    // ШИМ TIM8_CH1
 800150e:	2100      	movs	r1, #0
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <change_mode+0x6c>)
 8001512:	f005 ff93 	bl	800743c <HAL_TIM_PWM_Stop>
		// +Добавить оставшиеся таймеры

		//установка шима в 0
		TIM1->CCR1 = 0;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <change_mode+0x70>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <change_mode+0x70>)
 800151e:	2200      	movs	r2, #0
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR1 = 0;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <change_mode+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
	default:
		offset = 15;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <change_mode+0x78>)
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <change_mode+0x7c>)
 800152c:	601a      	str	r2, [r3, #0]
		break;
 800152e:	bf00      	nop
	}
	mode = set_mode;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <change_mode+0x80>)
 8001536:	801a      	strh	r2, [r3, #0]
};
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000210 	.word	0x20000210
 8001544:	200002a0 	.word	0x200002a0
 8001548:	40010000 	.word	0x40010000
 800154c:	40010400 	.word	0x40010400
 8001550:	20000008 	.word	0x20000008
 8001554:	41700000 	.word	0x41700000
 8001558:	20000430 	.word	0x20000430

0800155c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart3);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <USART2_IRQHandler+0x10>)
 8001562:	f007 f85b 	bl	800861c <HAL_UART_IRQHandler>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200003c0 	.word	0x200003c0

08001570 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <set_RPM>:

    // Return char array
    return (char*)arr;
}

void set_RPM(float rotations) {
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	// Расчитываем необходимую скорость движения
	// Требуемуе кол-во градусов в секунду делим на кол-во прирываний таймера 14 в секунду и получаем необходимый инкремент
	increment = rotations * dimensional_factor * 360 / (60000000 / ((TIM14->ARR + 1) * (TIM14->PSC+1)));
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <set_RPM+0x60>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc2a 	bl	8000dec <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	4913      	ldr	r1, [pc, #76]	; (80015e8 <set_RPM+0x64>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc25 	bl	8000dec <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461c      	mov	r4, r3
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <set_RPM+0x68>)
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <set_RPM+0x68>)
 80015ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015b0:	3201      	adds	r2, #1
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <set_RPM+0x6c>)
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fbbd 	bl	8000d3c <__aeabi_ui2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff fcc4 	bl	8000f54 <__aeabi_fdiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <set_RPM+0x70>)
 80015d2:	601a      	str	r2, [r3, #0]
	rotor_speed = rotations;
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <set_RPM+0x74>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000004 	.word	0x20000004
 80015e8:	43b40000 	.word	0x43b40000
 80015ec:	40002000 	.word	0x40002000
 80015f0:	03938700 	.word	0x03938700
 80015f4:	20000424 	.word	0x20000424
 80015f8:	20000428 	.word	0x20000428
 80015fc:	00000000 	.word	0x00000000

08001600 <move_rotor>:

void move_rotor(float to_angle) {
 8001600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	if (increment >= 0) to_angle += offset;
 800160a:	4bb7      	ldr	r3, [pc, #732]	; (80018e8 <move_rotor+0x2e8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd9c 	bl	8001150 <__aeabi_fcmpge>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <move_rotor+0x30>
 800161e:	4bb3      	ldr	r3, [pc, #716]	; (80018ec <move_rotor+0x2ec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fad9 	bl	8000bdc <__addsf3>
 800162a:	4603      	mov	r3, r0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e007      	b.n	8001640 <move_rotor+0x40>
	else to_angle -= offset;
 8001630:	4bae      	ldr	r3, [pc, #696]	; (80018ec <move_rotor+0x2ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff face 	bl	8000bd8 <__aeabi_fsub>
 800163c:	4603      	mov	r3, r0
 800163e:	607b      	str	r3, [r7, #4]

	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = k1*(sin((to_angle)     * M_PI/180) + sin((to_angle)     * M_PI/60)/4);
 8001640:	4bab      	ldr	r3, [pc, #684]	; (80018f0 <move_rotor+0x2f0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff23 	bl	8000490 <__aeabi_f2d>
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff1e 	bl	8000490 <__aeabi_f2d>
 8001654:	a3a2      	add	r3, pc, #648	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ff71 	bl	8000540 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4ba2      	ldr	r3, [pc, #648]	; (80018f4 <move_rotor+0x2f4>)
 800166c:	f7ff f892 	bl	8000794 <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f007 fd36 	bl	80090e8 <sin>
 800167c:	4680      	mov	r8, r0
 800167e:	4689      	mov	r9, r1
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7fe ff05 	bl	8000490 <__aeabi_f2d>
 8001686:	a396      	add	r3, pc, #600	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff58 	bl	8000540 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <move_rotor+0x2f8>)
 800169e:	f7ff f879 	bl	8000794 <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f007 fd1d 	bl	80090e8 <sin>
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b92      	ldr	r3, [pc, #584]	; (80018fc <move_rotor+0x2fc>)
 80016b4:	f7ff f86e 	bl	8000794 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4640      	mov	r0, r8
 80016be:	4649      	mov	r1, r9
 80016c0:	f7fe fd88 	bl	80001d4 <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4620      	mov	r0, r4
 80016ca:	4629      	mov	r1, r5
 80016cc:	f7fe ff38 	bl	8000540 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fa2a 	bl	8000b30 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a88      	ldr	r2, [pc, #544]	; (8001900 <move_rotor+0x300>)
 80016e0:	6013      	str	r3, [r2, #0]
	V_PWM = k1*(sin((to_angle+120) * M_PI/180) + sin((to_angle+120) * M_PI/60)/4);
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <move_rotor+0x2f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fed2 	bl	8000490 <__aeabi_f2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	4984      	ldr	r1, [pc, #528]	; (8001904 <move_rotor+0x304>)
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fa72 	bl	8000bdc <__addsf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fec8 	bl	8000490 <__aeabi_f2d>
 8001700:	a377      	add	r3, pc, #476	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff1b 	bl	8000540 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b77      	ldr	r3, [pc, #476]	; (80018f4 <move_rotor+0x2f4>)
 8001718:	f7ff f83c 	bl	8000794 <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f007 fce0 	bl	80090e8 <sin>
 8001728:	4680      	mov	r8, r0
 800172a:	4689      	mov	r9, r1
 800172c:	4975      	ldr	r1, [pc, #468]	; (8001904 <move_rotor+0x304>)
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fa54 	bl	8000bdc <__addsf3>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe feaa 	bl	8000490 <__aeabi_f2d>
 800173c:	a368      	add	r3, pc, #416	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe fefd 	bl	8000540 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <move_rotor+0x2f8>)
 8001754:	f7ff f81e 	bl	8000794 <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f007 fcc2 	bl	80090e8 <sin>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <move_rotor+0x2fc>)
 800176a:	f7ff f813 	bl	8000794 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4640      	mov	r0, r8
 8001774:	4649      	mov	r1, r9
 8001776:	f7fe fd2d 	bl	80001d4 <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fedd 	bl	8000540 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9cf 	bl	8000b30 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	4a5c      	ldr	r2, [pc, #368]	; (8001908 <move_rotor+0x308>)
 8001796:	6013      	str	r3, [r2, #0]
	W_PWM = k1*(sin((to_angle+240) * M_PI/180) + sin((to_angle+240) * M_PI/60)/4);
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <move_rotor+0x2f0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe77 	bl	8000490 <__aeabi_f2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	4959      	ldr	r1, [pc, #356]	; (800190c <move_rotor+0x30c>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fa17 	bl	8000bdc <__addsf3>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe6d 	bl	8000490 <__aeabi_f2d>
 80017b6:	a34a      	add	r3, pc, #296	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fec0 	bl	8000540 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <move_rotor+0x2f4>)
 80017ce:	f7fe ffe1 	bl	8000794 <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f007 fc85 	bl	80090e8 <sin>
 80017de:	4680      	mov	r8, r0
 80017e0:	4689      	mov	r9, r1
 80017e2:	494a      	ldr	r1, [pc, #296]	; (800190c <move_rotor+0x30c>)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff f9f9 	bl	8000bdc <__addsf3>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe4f 	bl	8000490 <__aeabi_f2d>
 80017f2:	a33b      	add	r3, pc, #236	; (adr r3, 80018e0 <move_rotor+0x2e0>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fea2 	bl	8000540 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <move_rotor+0x2f8>)
 800180a:	f7fe ffc3 	bl	8000794 <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f007 fc67 	bl	80090e8 <sin>
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <move_rotor+0x2fc>)
 8001820:	f7fe ffb8 	bl	8000794 <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fcd2 	bl	80001d4 <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fe82 	bl	8000540 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f974 	bl	8000b30 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	4a31      	ldr	r2, [pc, #196]	; (8001910 <move_rotor+0x310>)
 800184c:	6013      	str	r3, [r2, #0]

	// Перенастройка шима на фазах
	if(U_PWM >= 0) {
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <move_rotor+0x300>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fc7a 	bl	8001150 <__aeabi_fcmpge>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d010      	beq.n	8001884 <move_rotor+0x284>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001862:	2100      	movs	r1, #0
 8001864:	482b      	ldr	r0, [pc, #172]	; (8001914 <move_rotor+0x314>)
 8001866:	f006 fd29 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = U_PWM;
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <move_rotor+0x300>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4c2a      	ldr	r4, [pc, #168]	; (8001918 <move_rotor+0x318>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc81 	bl	8001178 <__aeabi_f2uiz>
 8001876:	4603      	mov	r3, r0
 8001878:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800187a:	2100      	movs	r1, #0
 800187c:	4825      	ldr	r0, [pc, #148]	; (8001914 <move_rotor+0x314>)
 800187e:	f005 fd15 	bl	80072ac <HAL_TIM_PWM_Start>
 8001882:	e011      	b.n	80018a8 <move_rotor+0x2a8>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001884:	2100      	movs	r1, #0
 8001886:	4823      	ldr	r0, [pc, #140]	; (8001914 <move_rotor+0x314>)
 8001888:	f005 fdd8 	bl	800743c <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = -U_PWM;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <move_rotor+0x300>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001894:	4c20      	ldr	r4, [pc, #128]	; (8001918 <move_rotor+0x318>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc6e 	bl	8001178 <__aeabi_f2uiz>
 800189c:	4603      	mov	r3, r0
 800189e:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	481c      	ldr	r0, [pc, #112]	; (8001914 <move_rotor+0x314>)
 80018a4:	f006 fc50 	bl	8008148 <HAL_TIMEx_PWMN_Start>
	}

	if(V_PWM >= 0) {
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <move_rotor+0x308>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc4d 	bl	8001150 <__aeabi_fcmpge>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02f      	beq.n	800191c <move_rotor+0x31c>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80018bc:	2104      	movs	r1, #4
 80018be:	4815      	ldr	r0, [pc, #84]	; (8001914 <move_rotor+0x314>)
 80018c0:	f006 fcfc 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = V_PWM;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <move_rotor+0x308>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4c13      	ldr	r4, [pc, #76]	; (8001918 <move_rotor+0x318>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc54 	bl	8001178 <__aeabi_f2uiz>
 80018d0:	4603      	mov	r3, r0
 80018d2:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	480f      	ldr	r0, [pc, #60]	; (8001914 <move_rotor+0x314>)
 80018d8:	f005 fce8 	bl	80072ac <HAL_TIM_PWM_Start>
 80018dc:	e030      	b.n	8001940 <move_rotor+0x340>
 80018de:	bf00      	nop
 80018e0:	54442d18 	.word	0x54442d18
 80018e4:	400921fb 	.word	0x400921fb
 80018e8:	20000424 	.word	0x20000424
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000000 	.word	0x20000000
 80018f4:	40668000 	.word	0x40668000
 80018f8:	404e0000 	.word	0x404e0000
 80018fc:	40100000 	.word	0x40100000
 8001900:	2000040c 	.word	0x2000040c
 8001904:	42f00000 	.word	0x42f00000
 8001908:	20000410 	.word	0x20000410
 800190c:	43700000 	.word	0x43700000
 8001910:	20000414 	.word	0x20000414
 8001914:	20000210 	.word	0x20000210
 8001918:	40010000 	.word	0x40010000
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800191c:	2104      	movs	r1, #4
 800191e:	4824      	ldr	r0, [pc, #144]	; (80019b0 <move_rotor+0x3b0>)
 8001920:	f005 fd8c 	bl	800743c <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = -V_PWM;
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <move_rotor+0x3b4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800192c:	4c22      	ldr	r4, [pc, #136]	; (80019b8 <move_rotor+0x3b8>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc22 	bl	8001178 <__aeabi_f2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001938:	2104      	movs	r1, #4
 800193a:	481d      	ldr	r0, [pc, #116]	; (80019b0 <move_rotor+0x3b0>)
 800193c:	f006 fc04 	bl	8008148 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <move_rotor+0x3bc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fc01 	bl	8001150 <__aeabi_fcmpge>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <move_rotor+0x376>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001954:	2100      	movs	r1, #0
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <move_rotor+0x3c0>)
 8001958:	f006 fcb0 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = W_PWM;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <move_rotor+0x3bc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4c18      	ldr	r4, [pc, #96]	; (80019c4 <move_rotor+0x3c4>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fc08 	bl	8001178 <__aeabi_f2uiz>
 8001968:	4603      	mov	r3, r0
 800196a:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <move_rotor+0x3c0>)
 8001970:	f005 fc9c 	bl	80072ac <HAL_TIM_PWM_Start>
 8001974:	e011      	b.n	800199a <move_rotor+0x39a>
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001976:	2100      	movs	r1, #0
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <move_rotor+0x3c0>)
 800197a:	f005 fd5f 	bl	800743c <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = -W_PWM;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <move_rotor+0x3bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001986:	4c0f      	ldr	r4, [pc, #60]	; (80019c4 <move_rotor+0x3c4>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fbf5 	bl	8001178 <__aeabi_f2uiz>
 800198e:	4603      	mov	r3, r0
 8001990:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001992:	2100      	movs	r1, #0
 8001994:	480a      	ldr	r0, [pc, #40]	; (80019c0 <move_rotor+0x3c0>)
 8001996:	f006 fbd7 	bl	8008148 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <move_rotor+0x3b8>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <move_rotor+0x3c4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 80019a6:	bf00      	nop
}
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b0:	20000210 	.word	0x20000210
 80019b4:	20000410 	.word	0x20000410
 80019b8:	40010000 	.word	0x40010000
 80019bc:	20000414 	.word	0x20000414
 80019c0:	200002a0 	.word	0x200002a0
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_TIM_PeriodElapsedCallback>:

// Отвечает за работу таймеров и переключение обмоток
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	// Прерывание отвечающего за движежние таймера
	if (htim == &htim14) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	f040 8096 	bne.w	8001b06 <HAL_TIM_PeriodElapsedCallback+0x13e>
		 * 2 - Поворот на угол
		 * 3 - поддержание скорости
		 * 4 - бесконечный разгон
		 * 5 - динамическое торможение
		 * 6 - Калибровка*/
		switch (mode) {
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	f200 8092 	bhi.w	8001b0a <HAL_TIM_PeriodElapsedCallback+0x142>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001ab3 	.word	0x08001ab3
 80019f4:	08001ab3 	.word	0x08001ab3
 80019f8:	08001ab3 	.word	0x08001ab3
 80019fc:	08001af3 	.word	0x08001af3
 8001a00:	08001ab3 	.word	0x08001ab3
		case 1:
			if (remaining_angle>increment) current_angle += increment;
 8001a04:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fba8 	bl	8001164 <__aeabi_fcmpgt>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f8d9 	bl	8000bdc <__addsf3>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e025      	b.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0xb8>
			else if (remaining_angle!=0) {
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fb69 	bl	8001114 <__aeabi_fcmpeq>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11b      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0xb8>
				current_angle += increment-remaining_angle;
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4a      	ldr	r2, [pc, #296]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8c0 	bl	8000bd8 <__aeabi_fsub>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff f8ba 	bl	8000bdc <__addsf3>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a6e:	601a      	str	r2, [r3, #0]
				remaining_angle = 0;
 8001a70:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
				offset = 0;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
			}
			current_angle = remainder(current_angle, 360);
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd03 	bl	8000490 <__aeabi_f2d>
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a90:	f007 fb70 	bl	8009174 <remainder>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f848 	bl	8000b30 <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a37      	ldr	r2, [pc, #220]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001aa4:	6013      	str	r3, [r2, #0]
			move_rotor(current_angle);
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fda8 	bl	8001600 <move_rotor>
			break;
 8001ab0:	e02c      	b.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x144>
		case 2:
		case 3:
		case 4:
		case 6:
			current_angle = remainder((current_angle + increment), 360); // Получаем новый угол тяги
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f88d 	bl	8000bdc <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fce3 	bl	8000490 <__aeabi_f2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001ad0:	f007 fb50 	bl	8009174 <remainder>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f828 	bl	8000b30 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001ae4:	6013      	str	r3, [r2, #0]
			move_rotor(current_angle); // Изменяем угол тяги на новый
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd88 	bl	8001600 <move_rotor>
			break;
 8001af0:	e00c      	b.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x144>
		case 5:
			// Установка максимального ШИМ
			k1 = 2;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
			move_rotor(current_angle);
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fd7e 	bl	8001600 <move_rotor>
			break;
 8001b04:	e002      	b.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x144>
		default:
			break;
		}
	}
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x144>
			break;
 8001b0a:	bf00      	nop

	if (htim == 0)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d129      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x19e>
	{
		//HAL_TIM_Base_Stop_IT(&htim14); //остановка таймера 14

		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); // ШИМ TIM1_CH1N
 8001b12:	2100      	movs	r1, #0
 8001b14:	481e      	ldr	r0, [pc, #120]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b16:	f006 fbd1 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);    // ШИМ TIM1_CH1
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	481c      	ldr	r0, [pc, #112]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b1e:	f005 fc8d 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); // ШИМ TIM1_CH2N
 8001b22:	2104      	movs	r1, #4
 8001b24:	481a      	ldr	r0, [pc, #104]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b26:	f006 fbc9 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    // ШИМ TIM1_CH2
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	4818      	ldr	r0, [pc, #96]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b2e:	f005 fc85 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1); // ШИМ TIM8_CH1N
 8001b32:	2100      	movs	r1, #0
 8001b34:	4817      	ldr	r0, [pc, #92]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001b36:	f006 fbc1 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);    // ШИМ TIM8_CH1
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4815      	ldr	r0, [pc, #84]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001b3e:	f005 fc7d 	bl	800743c <HAL_TIM_PWM_Stop>

		//установка шима в 0
		TIM1->CCR1 = 0;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR1 = 0;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34

		//обнуление счётчиков таймеров для синхронизации
		TIM1->CNT = 0;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8->CNT = 0;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM14->CNT = 0;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000378 	.word	0x20000378
 8001b74:	20000430 	.word	0x20000430
 8001b78:	20000420 	.word	0x20000420
 8001b7c:	20000424 	.word	0x20000424
 8001b80:	2000041c 	.word	0x2000041c
 8001b84:	20000008 	.word	0x20000008
 8001b88:	40768000 	.word	0x40768000
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000210 	.word	0x20000210
 8001b94:	200002a0 	.word	0x200002a0
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40010400 	.word	0x40010400
 8001ba0:	40002000 	.word	0x40002000

08001ba4 <check_sync>:
        }
        gu8_State = IDLE;
    }
}

void check_sync() {
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	delta = 0;
 8001ba8:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <check_sync+0x1d4>)
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4872      	ldr	r0, [pc, #456]	; (8001d7c <check_sync+0x1d8>)
 8001bb4:	f003 f884 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <check_sync+0x1dc>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	486e      	ldr	r0, [pc, #440]	; (8001d7c <check_sync+0x1d8>)
 8001bc4:	f003 f87c 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <check_sync+0x1e0>)
 8001bce:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	486a      	ldr	r0, [pc, #424]	; (8001d7c <check_sync+0x1d8>)
 8001bd4:	f003 f874 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <check_sync+0x1e4>)
 8001bde:	701a      	strb	r2, [r3, #0]

	// СОСТОЯНИЕ 1
	if((hal_U == GPIO_PIN_SET)&&(hal_V == GPIO_PIN_RESET)&&(hal_W == GPIO_PIN_SET)) {
 8001be0:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <check_sync+0x1dc>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d178      	bne.n	8001cda <check_sync+0x136>
 8001be8:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <check_sync+0x1e0>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d174      	bne.n	8001cda <check_sync+0x136>
 8001bf0:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <check_sync+0x1e4>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d170      	bne.n	8001cda <check_sync+0x136>
		stator_state = 1;
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <check_sync+0x1e8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 8001bfe:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <check_sync+0x1ec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff faa2 	bl	8001150 <__aeabi_fcmpge>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d031      	beq.n	8001c76 <check_sync+0xd2>
			delta = mode_arr[1] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <check_sync+0x1f0>)
 8001c14:	685c      	ldr	r4, [r3, #4]
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <check_sync+0x1f4>)
 8001c18:	681d      	ldr	r5, [r3, #0]
 8001c1a:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <check_sync+0x1f8>)
 8001c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <check_sync+0x1f8>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f889 	bl	8000d3c <__aeabi_ui2f>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <check_sync+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f7ff f8da 	bl	8000dec <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461e      	mov	r6, r3
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <check_sync+0x1f8>)
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f87b 	bl	8000d3c <__aeabi_ui2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f7ff f982 	bl	8000f54 <__aeabi_fdiv>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4628      	mov	r0, r5
 8001c56:	f7fe ffbf 	bl	8000bd8 <__aeabi_fsub>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe ffba 	bl	8000bd8 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <check_sync+0x1d4>)
 8001c6a:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[2]; // Следующеее прерывание будет в этом угле
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <check_sync+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <check_sync+0x1fc>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e031      	b.n	8001cda <check_sync+0x136>

		}
		else {
			target_angle = mode_arr[1];
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <check_sync+0x1f0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <check_sync+0x1fc>)
 8001c7c:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[2];
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <check_sync+0x1f4>)
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <check_sync+0x1f8>)
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <check_sync+0x1f8>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f855 	bl	8000d3c <__aeabi_ui2f>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <check_sync+0x1ec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f7ff f8a6 	bl	8000dec <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <check_sync+0x1f8>)
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f847 	bl	8000d3c <__aeabi_ui2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff f94e 	bl	8000f54 <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7fe ff8b 	bl	8000bd8 <__aeabi_fsub>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <check_sync+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7fe ff83 	bl	8000bd8 <__aeabi_fsub>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <check_sync+0x1d4>)
 8001cd8:	601a      	str	r2, [r3, #0]
		}

		// sum_angle = 75;
	}
	// СОСТОЯНИЕ 2
	if((hal_U == GPIO_PIN_SET)&&(hal_V == GPIO_PIN_RESET)&&(hal_W == GPIO_PIN_RESET)) {
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <check_sync+0x1dc>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	f040 8092 	bne.w	8001e08 <check_sync+0x264>
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <check_sync+0x1e0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 808d 	bne.w	8001e08 <check_sync+0x264>
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <check_sync+0x1e4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8088 	bne.w	8001e08 <check_sync+0x264>
		stator_state = 2;
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <check_sync+0x1e8>)
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <check_sync+0x1ec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fa22 	bl	8001150 <__aeabi_fcmpge>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d048      	beq.n	8001da4 <check_sync+0x200>
			delta = mode_arr[2] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <check_sync+0x1f0>)
 8001d14:	689c      	ldr	r4, [r3, #8]
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <check_sync+0x1f4>)
 8001d18:	681d      	ldr	r5, [r3, #0]
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <check_sync+0x1f8>)
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <check_sync+0x1f8>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f809 	bl	8000d3c <__aeabi_ui2f>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <check_sync+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7ff f85a 	bl	8000dec <__aeabi_fmul>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461e      	mov	r6, r3
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <check_sync+0x1f8>)
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fffb 	bl	8000d3c <__aeabi_ui2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7ff f902 	bl	8000f54 <__aeabi_fdiv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4628      	mov	r0, r5
 8001d56:	f7fe ff3f 	bl	8000bd8 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7fe ff3a 	bl	8000bd8 <__aeabi_fsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <check_sync+0x1d4>)
 8001d6a:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[3]; // Следующеее прерывание будет в этом угле
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <check_sync+0x1f0>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <check_sync+0x1fc>)
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e048      	b.n	8001e08 <check_sync+0x264>
 8001d76:	bf00      	nop
 8001d78:	20000408 	.word	0x20000408
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	2000042c 	.word	0x2000042c
 8001d84:	2000042d 	.word	0x2000042d
 8001d88:	2000042e 	.word	0x2000042e
 8001d8c:	20000432 	.word	0x20000432
 8001d90:	20000424 	.word	0x20000424
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	2000041c 	.word	0x2000041c
 8001d9c:	40002000 	.word	0x40002000
 8001da0:	20000418 	.word	0x20000418

		}
		else {
			target_angle = mode_arr[2];
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <check_sync+0x3fc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <check_sync+0x400>)
 8001daa:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[3];
 8001dac:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <check_sync+0x404>)
 8001dae:	681c      	ldr	r4, [r3, #0]
 8001db0:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <check_sync+0x408>)
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	4b7d      	ldr	r3, [pc, #500]	; (8001fac <check_sync+0x408>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffbe 	bl	8000d3c <__aeabi_ui2f>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <check_sync+0x40c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f7ff f80f 	bl	8000dec <__aeabi_fmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <check_sync+0x408>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ffb0 	bl	8000d3c <__aeabi_ui2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4619      	mov	r1, r3
 8001de0:	4628      	mov	r0, r5
 8001de2:	f7ff f8b7 	bl	8000f54 <__aeabi_fdiv>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7fe fef4 	bl	8000bd8 <__aeabi_fsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <check_sync+0x3fc>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f7fe feec 	bl	8000bd8 <__aeabi_fsub>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <check_sync+0x410>)
 8001e06:	601a      	str	r2, [r3, #0]
		}
		// sum_angle = 135;
	}

	// СОСТОЯНИЕ 3
	if((hal_U == GPIO_PIN_SET)&&(hal_V == GPIO_PIN_SET)&&(hal_W == GPIO_PIN_RESET)) {
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <check_sync+0x414>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d178      	bne.n	8001f02 <check_sync+0x35e>
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <check_sync+0x418>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d174      	bne.n	8001f02 <check_sync+0x35e>
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <check_sync+0x41c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d170      	bne.n	8001f02 <check_sync+0x35e>
		stator_state = 3;
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <check_sync+0x420>)
 8001e22:	2203      	movs	r2, #3
 8001e24:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 8001e26:	4b62      	ldr	r3, [pc, #392]	; (8001fb0 <check_sync+0x40c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f98e 	bl	8001150 <__aeabi_fcmpge>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d031      	beq.n	8001e9e <check_sync+0x2fa>
			delta = mode_arr[3] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 8001e3a:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <check_sync+0x3fc>)
 8001e3c:	68dc      	ldr	r4, [r3, #12]
 8001e3e:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <check_sync+0x404>)
 8001e40:	681d      	ldr	r5, [r3, #0]
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <check_sync+0x408>)
 8001e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <check_sync+0x408>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff75 	bl	8000d3c <__aeabi_ui2f>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <check_sync+0x40c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7fe ffc6 	bl	8000dec <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461e      	mov	r6, r3
 8001e64:	4b51      	ldr	r3, [pc, #324]	; (8001fac <check_sync+0x408>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff67 	bl	8000d3c <__aeabi_ui2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4619      	mov	r1, r3
 8001e72:	4630      	mov	r0, r6
 8001e74:	f7ff f86e 	bl	8000f54 <__aeabi_fdiv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7fe feab 	bl	8000bd8 <__aeabi_fsub>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7fe fea6 	bl	8000bd8 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <check_sync+0x410>)
 8001e92:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[4]; // Следующеее прерывание будет в этом угле
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <check_sync+0x3fc>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <check_sync+0x400>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e031      	b.n	8001f02 <check_sync+0x35e>

		}
		else {
			target_angle = mode_arr[3];
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <check_sync+0x3fc>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <check_sync+0x400>)
 8001ea4:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[4];
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <check_sync+0x404>)
 8001ea8:	681c      	ldr	r4, [r3, #0]
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <check_sync+0x408>)
 8001eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <check_sync+0x408>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff41 	bl	8000d3c <__aeabi_ui2f>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <check_sync+0x40c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f7fe ff92 	bl	8000dec <__aeabi_fmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <check_sync+0x408>)
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff33 	bl	8000d3c <__aeabi_ui2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4628      	mov	r0, r5
 8001edc:	f7ff f83a 	bl	8000f54 <__aeabi_fdiv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7fe fe77 	bl	8000bd8 <__aeabi_fsub>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <check_sync+0x3fc>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f7fe fe6f 	bl	8000bd8 <__aeabi_fsub>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <check_sync+0x410>)
 8001f00:	601a      	str	r2, [r3, #0]
		}
		// sum_angle = 195;
	}
	// СОСТОЯНИЕ 4
	if((hal_U == GPIO_PIN_RESET)&&(hal_V == GPIO_PIN_SET)&&(hal_W == GPIO_PIN_RESET)) {
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <check_sync+0x414>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 8090 	bne.w	800202c <check_sync+0x488>
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <check_sync+0x418>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 808b 	bne.w	800202c <check_sync+0x488>
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <check_sync+0x41c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8086 	bne.w	800202c <check_sync+0x488>
		stator_state = 4;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <check_sync+0x420>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <check_sync+0x40c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f90e 	bl	8001150 <__aeabi_fcmpge>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d046      	beq.n	8001fc8 <check_sync+0x424>
			delta = mode_arr[4] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <check_sync+0x3fc>)
 8001f3c:	691c      	ldr	r4, [r3, #16]
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <check_sync+0x404>)
 8001f40:	681d      	ldr	r5, [r3, #0]
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <check_sync+0x408>)
 8001f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <check_sync+0x408>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fef5 	bl	8000d3c <__aeabi_ui2f>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <check_sync+0x40c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f7fe ff46 	bl	8000dec <__aeabi_fmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461e      	mov	r6, r3
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <check_sync+0x408>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fee7 	bl	8000d3c <__aeabi_ui2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	4630      	mov	r0, r6
 8001f74:	f7fe ffee 	bl	8000f54 <__aeabi_fdiv>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f7fe fe2b 	bl	8000bd8 <__aeabi_fsub>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7fe fe26 	bl	8000bd8 <__aeabi_fsub>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <check_sync+0x410>)
 8001f92:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[5]; // Следующеее прерывание будет в этом угле
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <check_sync+0x3fc>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4a02      	ldr	r2, [pc, #8]	; (8001fa4 <check_sync+0x400>)
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e046      	b.n	800202c <check_sync+0x488>
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	20000418 	.word	0x20000418
 8001fa8:	2000041c 	.word	0x2000041c
 8001fac:	40002000 	.word	0x40002000
 8001fb0:	20000424 	.word	0x20000424
 8001fb4:	20000408 	.word	0x20000408
 8001fb8:	2000042c 	.word	0x2000042c
 8001fbc:	2000042d 	.word	0x2000042d
 8001fc0:	2000042e 	.word	0x2000042e
 8001fc4:	20000432 	.word	0x20000432

		}
		else {
			target_angle = mode_arr[4];
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <check_sync+0x620>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a7e      	ldr	r2, [pc, #504]	; (80021c8 <check_sync+0x624>)
 8001fce:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[5];
 8001fd0:	4b7e      	ldr	r3, [pc, #504]	; (80021cc <check_sync+0x628>)
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <check_sync+0x62c>)
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <check_sync+0x62c>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe feac 	bl	8000d3c <__aeabi_ui2f>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <check_sync+0x630>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4610      	mov	r0, r2
 8001fee:	f7fe fefd 	bl	8000dec <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <check_sync+0x62c>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe9e 	bl	8000d3c <__aeabi_ui2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	f7fe ffa5 	bl	8000f54 <__aeabi_fdiv>
 800200a:	4603      	mov	r3, r0
 800200c:	4619      	mov	r1, r3
 800200e:	4620      	mov	r0, r4
 8002010:	f7fe fde2 	bl	8000bd8 <__aeabi_fsub>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <check_sync+0x620>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7fe fdda 	bl	8000bd8 <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <check_sync+0x634>)
 800202a:	601a      	str	r2, [r3, #0]
		}
		// sum_angle = 255;
	}
	// СОСТОЯНИЕ 5
	if((hal_U == GPIO_PIN_RESET)&&(hal_V == GPIO_PIN_SET)&&(hal_W == GPIO_PIN_SET)) {
 800202c:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <check_sync+0x638>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d178      	bne.n	8002126 <check_sync+0x582>
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <check_sync+0x63c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d174      	bne.n	8002126 <check_sync+0x582>
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <check_sync+0x640>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d170      	bne.n	8002126 <check_sync+0x582>
		stator_state = 5;
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <check_sync+0x644>)
 8002046:	2205      	movs	r2, #5
 8002048:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <check_sync+0x630>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f87c 	bl	8001150 <__aeabi_fcmpge>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d031      	beq.n	80020c2 <check_sync+0x51e>
			delta = mode_arr[5] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 800205e:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <check_sync+0x620>)
 8002060:	695c      	ldr	r4, [r3, #20]
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <check_sync+0x628>)
 8002064:	681d      	ldr	r5, [r3, #0]
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <check_sync+0x62c>)
 8002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <check_sync+0x62c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe63 	bl	8000d3c <__aeabi_ui2f>
 8002076:	4602      	mov	r2, r0
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <check_sync+0x630>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f7fe feb4 	bl	8000dec <__aeabi_fmul>
 8002084:	4603      	mov	r3, r0
 8002086:	461e      	mov	r6, r3
 8002088:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <check_sync+0x62c>)
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fe55 	bl	8000d3c <__aeabi_ui2f>
 8002092:	4603      	mov	r3, r0
 8002094:	4619      	mov	r1, r3
 8002096:	4630      	mov	r0, r6
 8002098:	f7fe ff5c 	bl	8000f54 <__aeabi_fdiv>
 800209c:	4603      	mov	r3, r0
 800209e:	4619      	mov	r1, r3
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7fe fd99 	bl	8000bd8 <__aeabi_fsub>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7fe fd94 	bl	8000bd8 <__aeabi_fsub>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <check_sync+0x634>)
 80020b6:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[6]; // Следующеее прерывание будет в этом угле
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <check_sync+0x620>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <check_sync+0x624>)
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e031      	b.n	8002126 <check_sync+0x582>

		}
		else {
			target_angle = mode_arr[5];
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <check_sync+0x620>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <check_sync+0x624>)
 80020c8:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[6];
 80020ca:	4b40      	ldr	r3, [pc, #256]	; (80021cc <check_sync+0x628>)
 80020cc:	681c      	ldr	r4, [r3, #0]
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <check_sync+0x62c>)
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <check_sync+0x62c>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fe2f 	bl	8000d3c <__aeabi_ui2f>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <check_sync+0x630>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7fe fe80 	bl	8000dec <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461d      	mov	r5, r3
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <check_sync+0x62c>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fe21 	bl	8000d3c <__aeabi_ui2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4628      	mov	r0, r5
 8002100:	f7fe ff28 	bl	8000f54 <__aeabi_fdiv>
 8002104:	4603      	mov	r3, r0
 8002106:	4619      	mov	r1, r3
 8002108:	4620      	mov	r0, r4
 800210a:	f7fe fd65 	bl	8000bd8 <__aeabi_fsub>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <check_sync+0x620>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f7fe fd5d 	bl	8000bd8 <__aeabi_fsub>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <check_sync+0x634>)
 8002124:	601a      	str	r2, [r3, #0]
		}
		// sum_angle = 315;
	}
	// СОСТОЯНИЕ 6
	if((hal_U == GPIO_PIN_RESET)&&(hal_V == GPIO_PIN_RESET)&&(hal_W == GPIO_PIN_SET)) {
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <check_sync+0x638>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8090 	bne.w	8002250 <check_sync+0x6ac>
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <check_sync+0x63c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 808b 	bne.w	8002250 <check_sync+0x6ac>
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <check_sync+0x640>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 8086 	bne.w	8002250 <check_sync+0x6ac>
		stator_state = 6;
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <check_sync+0x644>)
 8002146:	2206      	movs	r2, #6
 8002148:	801a      	strh	r2, [r3, #0]
		if (increment>=0) {
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <check_sync+0x630>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fffc 	bl	8001150 <__aeabi_fcmpge>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d046      	beq.n	80021ec <check_sync+0x648>
			delta = mode_arr[6] - (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR); // Вычисляем дельту между
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <check_sync+0x620>)
 8002160:	699c      	ldr	r4, [r3, #24]
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <check_sync+0x628>)
 8002164:	681d      	ldr	r5, [r3, #0]
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <check_sync+0x62c>)
 8002168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <check_sync+0x62c>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fde3 	bl	8000d3c <__aeabi_ui2f>
 8002176:	4602      	mov	r2, r0
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <check_sync+0x630>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7fe fe34 	bl	8000dec <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	461e      	mov	r6, r3
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <check_sync+0x62c>)
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fdd5 	bl	8000d3c <__aeabi_ui2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	4630      	mov	r0, r6
 8002198:	f7fe fedc 	bl	8000f54 <__aeabi_fdiv>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7fe fd19 	bl	8000bd8 <__aeabi_fsub>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7fe fd14 	bl	8000bd8 <__aeabi_fsub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <check_sync+0x634>)
 80021b6:	601a      	str	r2, [r3, #0]
			target_angle = mode_arr[1]; // Следующеее прерывание будет в этом угле
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <check_sync+0x620>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a02      	ldr	r2, [pc, #8]	; (80021c8 <check_sync+0x624>)
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e046      	b.n	8002250 <check_sync+0x6ac>
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	20000418 	.word	0x20000418
 80021cc:	2000041c 	.word	0x2000041c
 80021d0:	40002000 	.word	0x40002000
 80021d4:	20000424 	.word	0x20000424
 80021d8:	20000408 	.word	0x20000408
 80021dc:	2000042c 	.word	0x2000042c
 80021e0:	2000042d 	.word	0x2000042d
 80021e4:	2000042e 	.word	0x2000042e
 80021e8:	20000432 	.word	0x20000432

		}
		else {
			target_angle = mode_arr[6];
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <check_sync+0x70c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <check_sync+0x710>)
 80021f2:	6013      	str	r3, [r2, #0]
			delta = (current_angle - increment*(TIM14->ARR - TIM14->CNT)/TIM14->ARR) - mode_arr[1];
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <check_sync+0x714>)
 80021f6:	681c      	ldr	r4, [r3, #0]
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <check_sync+0x718>)
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <check_sync+0x718>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fd9a 	bl	8000d3c <__aeabi_ui2f>
 8002208:	4602      	mov	r2, r0
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <check_sync+0x71c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7fe fdeb 	bl	8000dec <__aeabi_fmul>
 8002216:	4603      	mov	r3, r0
 8002218:	461d      	mov	r5, r3
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <check_sync+0x718>)
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd8c 	bl	8000d3c <__aeabi_ui2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4619      	mov	r1, r3
 8002228:	4628      	mov	r0, r5
 800222a:	f7fe fe93 	bl	8000f54 <__aeabi_fdiv>
 800222e:	4603      	mov	r3, r0
 8002230:	4619      	mov	r1, r3
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe fcd0 	bl	8000bd8 <__aeabi_fsub>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <check_sync+0x70c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe fcc8 	bl	8000bd8 <__aeabi_fsub>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <check_sync+0x720>)
 800224e:	601a      	str	r2, [r3, #0]
		}
		// sum_angle = 15;
	}
	// Обработчики для аварийных состояний датчика холла
	// АВАРИЙНОЕ СОСТОЯНИЕ 7
	if((hal_U == GPIO_PIN_SET)&&(hal_V == GPIO_PIN_SET)&&(hal_W == GPIO_PIN_SET)) {
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <check_sync+0x724>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d110      	bne.n	800227a <check_sync+0x6d6>
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <check_sync+0x728>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10c      	bne.n	800227a <check_sync+0x6d6>
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <check_sync+0x72c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d108      	bne.n	800227a <check_sync+0x6d6>
		stator_state = 7;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <check_sync+0x730>)
 800226a:	2207      	movs	r2, #7
 800226c:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PeriodElapsedCallback(0);
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff fbaa 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
		change_mode(0);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff f92f 	bl	80014d8 <change_mode>
	}
	// АВАРИЙНОЕ СОСТОЯНИЕ 8
	if((hal_U == GPIO_PIN_RESET)&&(hal_V == GPIO_PIN_RESET)&&(hal_W == GPIO_PIN_RESET)) {
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <check_sync+0x724>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d110      	bne.n	80022a4 <check_sync+0x700>
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <check_sync+0x728>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <check_sync+0x700>
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <check_sync+0x72c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <check_sync+0x700>
		stator_state = 8;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <check_sync+0x730>)
 8002294:	2208      	movs	r2, #8
 8002296:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PeriodElapsedCallback(0);
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff fb95 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
		change_mode(0);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff f91a 	bl	80014d8 <change_mode>
	}

	HAL_TIM_PeriodElapsedCallback(0);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fb8f 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
}
 80022aa:	bf00      	nop
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	20000418 	.word	0x20000418
 80022b8:	2000041c 	.word	0x2000041c
 80022bc:	40002000 	.word	0x40002000
 80022c0:	20000424 	.word	0x20000424
 80022c4:	20000408 	.word	0x20000408
 80022c8:	2000042c 	.word	0x2000042c
 80022cc:	2000042d 	.word	0x2000042d
 80022d0:	2000042e 	.word	0x2000042e
 80022d4:	20000432 	.word	0x20000432

080022d8 <HAL_GPIO_EXTI_Callback>:

// Обработчик прерываний GPIO. Например для прерываний от датчиков холла.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
	the HAL_GPIO_EXTI_Callback could be implemented in the user file
	*/

	switch(GPIO_Pin) {
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	dc02      	bgt.n	80022ee <HAL_GPIO_EXTI_Callback+0x16>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	dc02      	bgt.n	80022f2 <HAL_GPIO_EXTI_Callback+0x1a>
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_EXTI_Callback+0x20>
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_EXTI_Callback+0x20>

	// Обработчик прерываний с датчиков холла
	case GPIO_PIN_5:
	case GPIO_PIN_0:
	case GPIO_PIN_1:
		check_sync();
 80022f2:	f7ff fc57 	bl	8001ba4 <check_sync>
		break;
 80022f6:	bf00      	nop
	}

	// Проверка состояния кнопки?
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)==GPIO_PIN_SET) {
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	4812      	ldr	r0, [pc, #72]	; (8002344 <HAL_GPIO_EXTI_Callback+0x6c>)
 80022fc:	f002 fce0 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d11a      	bne.n	800233c <HAL_GPIO_EXTI_Callback+0x64>
		HAL_TIM_Base_Stop_IT(&htim14);
 8002306:	4810      	ldr	r0, [pc, #64]	; (8002348 <HAL_GPIO_EXTI_Callback+0x70>)
 8002308:	f004 fefb 	bl	8007102 <HAL_TIM_Base_Stop_IT>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800230c:	2100      	movs	r1, #0
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_GPIO_EXTI_Callback+0x74>)
 8002310:	f005 ffd4 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002314:	2100      	movs	r1, #0
 8002316:	480d      	ldr	r0, [pc, #52]	; (800234c <HAL_GPIO_EXTI_Callback+0x74>)
 8002318:	f005 f890 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800231c:	2104      	movs	r1, #4
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <HAL_GPIO_EXTI_Callback+0x74>)
 8002320:	f005 ffcc 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002324:	2104      	movs	r1, #4
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_GPIO_EXTI_Callback+0x74>)
 8002328:	f005 f888 	bl	800743c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	4808      	ldr	r0, [pc, #32]	; (8002350 <HAL_GPIO_EXTI_Callback+0x78>)
 8002330:	f005 ffc4 	bl	80082bc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002334:	2100      	movs	r1, #0
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_GPIO_EXTI_Callback+0x78>)
 8002338:	f005 f880 	bl	800743c <HAL_TIM_PWM_Stop>
	}
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40020000 	.word	0x40020000
 8002348:	20000378 	.word	0x20000378
 800234c:	20000210 	.word	0x20000210
 8002350:	200002a0 	.word	0x200002a0
 8002354:	00000000 	.word	0x00000000

08002358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235c:	f001 f88c 	bl	8003478 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002360:	f000 f904 	bl	800256c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002364:	f000 fbda 	bl	8002b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8002368:	f000 fba2 	bl	8002ab0 <MX_DMA_Init>
  MX_TIM1_Init();
 800236c:	f000 f9e0 	bl	8002730 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002370:	f000 fa8a 	bl	8002888 <MX_TIM8_Init>
  MX_TIM14_Init();
 8002374:	f000 fb28 	bl	80029c8 <MX_TIM14_Init>
  MX_ADC1_Init();
 8002378:	f000 f93e 	bl	80025f8 <MX_ADC1_Init>
  MX_I2C3_Init();
 800237c:	f000 f9aa 	bl	80026d4 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8002380:	f000 fb6c 	bl	8002a5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint16_t *) aRaw, 3); // инициализация записи значений в буфер с помощью DMA
 8002384:	2203      	movs	r2, #3
 8002386:	496e      	ldr	r1, [pc, #440]	; (8002540 <main+0x1e8>)
 8002388:	486e      	ldr	r0, [pc, #440]	; (8002544 <main+0x1ec>)
 800238a:	f001 fa37 	bl	80037fc <HAL_ADC_Start_DMA>

  	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF); // очищаем флаг, но зачем?
 800238e:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <main+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0201 	mvn.w	r2, #1
 8002396:	611a      	str	r2, [r3, #16]

	// Запускаем двигатель
	change_mode(3); // 3 - поддержание скорости
 8002398:	2003      	movs	r0, #3
 800239a:	f7ff f89d 	bl	80014d8 <change_mode>
	set_RPM(40);
 800239e:	486b      	ldr	r0, [pc, #428]	; (800254c <main+0x1f4>)
 80023a0:	f7ff f8f0 	bl	8001584 <set_RPM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (DMA_Flag) { // Когда преобразование закончено
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <main+0x1f8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0fb      	beq.n	80023a4 <main+0x4c>
			// Получаем данные с датчиков тока
			H_I = aRaw[1] * Sensitivity_I * 3.3 * (6.8+10)/10 / 4096;
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <main+0x1e8>)
 80023ae:	885b      	ldrh	r3, [r3, #2]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fcc7 	bl	8000d44 <__aeabi_i2f>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <main+0x1fc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7fe fd14 	bl	8000dec <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f862 	bl	8000490 <__aeabi_f2d>
 80023cc:	a358      	add	r3, pc, #352	; (adr r3, 8002530 <main+0x1d8>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f8b5 	bl	8000540 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	a356      	add	r3, pc, #344	; (adr r3, 8002538 <main+0x1e0>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f8ac 	bl	8000540 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <main+0x200>)
 80023f6:	f7fe f9cd 	bl	8000794 <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b55      	ldr	r3, [pc, #340]	; (800255c <main+0x204>)
 8002408:	f7fe f9c4 	bl	8000794 <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fb6c 	bl	8000af0 <__aeabi_d2uiz>
 8002418:	4603      	mov	r3, r0
 800241a:	b29a      	uxth	r2, r3
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <main+0x208>)
 800241e:	801a      	strh	r2, [r3, #0]
			N_I = aRaw[0] * Sensitivity_I * 3.3 * (6.8+10)/10 / 4096;
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <main+0x1e8>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fc8d 	bl	8000d44 <__aeabi_i2f>
 800242a:	4602      	mov	r2, r0
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <main+0x1fc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7fe fcda 	bl	8000dec <__aeabi_fmul>
 8002438:	4603      	mov	r3, r0
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f828 	bl	8000490 <__aeabi_f2d>
 8002440:	a33b      	add	r3, pc, #236	; (adr r3, 8002530 <main+0x1d8>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f87b 	bl	8000540 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	a339      	add	r3, pc, #228	; (adr r3, 8002538 <main+0x1e0>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f872 	bl	8000540 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <main+0x200>)
 800246a:	f7fe f993 	bl	8000794 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <main+0x204>)
 800247c:	f7fe f98a 	bl	8000794 <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb32 	bl	8000af0 <__aeabi_d2uiz>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <main+0x20c>)
 8002492:	801a      	strh	r2, [r3, #0]
			V_I = aRaw[2] * Sensitivity_I * 3.3 * (6.8+10)/10 / 4096;
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <main+0x1e8>)
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fc53 	bl	8000d44 <__aeabi_i2f>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <main+0x1fc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f7fe fca0 	bl	8000dec <__aeabi_fmul>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffee 	bl	8000490 <__aeabi_f2d>
 80024b4:	a31e      	add	r3, pc, #120	; (adr r3, 8002530 <main+0x1d8>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f841 	bl	8000540 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	a31c      	add	r3, pc, #112	; (adr r3, 8002538 <main+0x1e0>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f838 	bl	8000540 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <main+0x200>)
 80024de:	f7fe f959 	bl	8000794 <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <main+0x204>)
 80024f0:	f7fe f950 	bl	8000794 <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe faf8 	bl	8000af0 <__aeabi_d2uiz>
 8002500:	4603      	mov	r3, r0
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <main+0x210>)
 8002506:	801a      	strh	r2, [r3, #0]

			if ((H_I + N_I + V_I)>800){ // Если сумма токов больше 800 мА
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <main+0x208>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <main+0x20c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <main+0x210>)
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800251e:	dd02      	ble.n	8002526 <main+0x1ce>
				change_mode(0);         // - Останавливаем двигатель
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe ffd9 	bl	80014d8 <change_mode>
			}
			DMA_Flag = 0;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <main+0x1f8>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
		if (DMA_Flag) { // Когда преобразование закончено
 800252c:	e73a      	b.n	80023a4 <main+0x4c>
 800252e:	bf00      	nop
 8002530:	66666666 	.word	0x66666666
 8002534:	400a6666 	.word	0x400a6666
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	4030cccc 	.word	0x4030cccc
 8002540:	20000434 	.word	0x20000434
 8002544:	200000b4 	.word	0x200000b4
 8002548:	20000210 	.word	0x20000210
 800254c:	42200000 	.word	0x42200000
 8002550:	20000440 	.word	0x20000440
 8002554:	20000024 	.word	0x20000024
 8002558:	40240000 	.word	0x40240000
 800255c:	40b00000 	.word	0x40b00000
 8002560:	2000043a 	.word	0x2000043a
 8002564:	2000043c 	.word	0x2000043c
 8002568:	2000043e 	.word	0x2000043e

0800256c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b092      	sub	sp, #72	; 0x48
 8002570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002572:	f107 0318 	add.w	r3, r7, #24
 8002576:	2230      	movs	r2, #48	; 0x30
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f006 fdac 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800258e:	2301      	movs	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002592:	2301      	movs	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002596:	2302      	movs	r3, #2
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025a0:	2308      	movs	r3, #8
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 80025a4:	23f0      	movs	r3, #240	; 0xf0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025ac:	2304      	movs	r3, #4
 80025ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 f8bb 	bl	8006730 <HAL_RCC_OscConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80025c0:	f000 fb48 	bl	8002c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c4:	230f      	movs	r3, #15
 80025c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c8:	2302      	movs	r3, #2
 80025ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2103      	movs	r1, #3
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 faf9 	bl	8006bd8 <HAL_RCC_ClockConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80025ec:	f000 fb32 	bl	8002c54 <Error_Handler>
  }
}
 80025f0:	bf00      	nop
 80025f2:	3748      	adds	r7, #72	; 0x48
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <MX_ADC1_Init+0xd0>)
 800260c:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <MX_ADC1_Init+0xd4>)
 800260e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800261c:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <MX_ADC1_Init+0xd0>)
 800261e:	2201      	movs	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002624:	2201      	movs	r2, #1
 8002626:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <MX_ADC1_Init+0xd0>)
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002632:	2200      	movs	r2, #0
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002638:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <MX_ADC1_Init+0xd8>)
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <MX_ADC1_Init+0xd0>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002644:	2203      	movs	r2, #3
 8002646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <MX_ADC1_Init+0xd0>)
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002656:	481c      	ldr	r0, [pc, #112]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002658:	f000 ff7c 	bl	8003554 <HAL_ADC_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002662:	f000 faf7 	bl	8002c54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002666:	2304      	movs	r3, #4
 8002668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800266e:	2307      	movs	r3, #7
 8002670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002672:	463b      	mov	r3, r7
 8002674:	4619      	mov	r1, r3
 8002676:	4814      	ldr	r0, [pc, #80]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002678:	f001 f9ba 	bl	80039f0 <HAL_ADC_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002682:	f000 fae7 	bl	8002c54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002686:	230d      	movs	r3, #13
 8002688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800268a:	2302      	movs	r3, #2
 800268c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268e:	463b      	mov	r3, r7
 8002690:	4619      	mov	r1, r3
 8002692:	480d      	ldr	r0, [pc, #52]	; (80026c8 <MX_ADC1_Init+0xd0>)
 8002694:	f001 f9ac 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800269e:	f000 fad9 	bl	8002c54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80026a2:	230f      	movs	r3, #15
 80026a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80026a6:	2303      	movs	r3, #3
 80026a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026aa:	463b      	mov	r3, r7
 80026ac:	4619      	mov	r1, r3
 80026ae:	4806      	ldr	r0, [pc, #24]	; (80026c8 <MX_ADC1_Init+0xd0>)
 80026b0:	f001 f99e 	bl	80039f0 <HAL_ADC_ConfigChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80026ba:	f000 facb 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200000b4 	.word	0x200000b4
 80026cc:	40012000 	.word	0x40012000
 80026d0:	0f000001 	.word	0x0f000001

080026d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_I2C3_Init+0x50>)
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <MX_I2C3_Init+0x54>)
 80026dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_I2C3_Init+0x50>)
 80026e0:	4a12      	ldr	r2, [pc, #72]	; (800272c <MX_I2C3_Init+0x58>)
 80026e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_I2C3_Init+0x50>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_I2C3_Init+0x50>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_I2C3_Init+0x50>)
 80026f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_I2C3_Init+0x50>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_I2C3_Init+0x50>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <MX_I2C3_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_I2C3_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <MX_I2C3_Init+0x50>)
 8002712:	f002 fb05 	bl	8004d20 <HAL_I2C_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800271c:	f000 fa9a 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000015c 	.word	0x2000015c
 8002728:	40005c00 	.word	0x40005c00
 800272c:	000186a0 	.word	0x000186a0

08002730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b096      	sub	sp, #88	; 0x58
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	615a      	str	r2, [r3, #20]
 8002760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2220      	movs	r2, #32
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f006 fcb5 	bl	80090d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <MX_TIM1_Init+0x150>)
 8002770:	4a44      	ldr	r2, [pc, #272]	; (8002884 <MX_TIM1_Init+0x154>)
 8002772:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <MX_TIM1_Init+0x150>)
 8002776:	2277      	movs	r2, #119	; 0x77
 8002778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <MX_TIM1_Init+0x150>)
 800277c:	2220      	movs	r2, #32
 800277e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <MX_TIM1_Init+0x150>)
 8002782:	2231      	movs	r2, #49	; 0x31
 8002784:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <MX_TIM1_Init+0x150>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <MX_TIM1_Init+0x150>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <MX_TIM1_Init+0x150>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002798:	4839      	ldr	r0, [pc, #228]	; (8002880 <MX_TIM1_Init+0x150>)
 800279a:	f004 fc63 	bl	8007064 <HAL_TIM_Base_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80027a4:	f000 fa56 	bl	8002c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027b2:	4619      	mov	r1, r3
 80027b4:	4832      	ldr	r0, [pc, #200]	; (8002880 <MX_TIM1_Init+0x150>)
 80027b6:	f005 f8d7 	bl	8007968 <HAL_TIM_ConfigClockSource>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80027c0:	f000 fa48 	bl	8002c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027c4:	482e      	ldr	r0, [pc, #184]	; (8002880 <MX_TIM1_Init+0x150>)
 80027c6:	f004 fd19 	bl	80071fc <HAL_TIM_PWM_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80027d0:	f000 fa40 	bl	8002c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027e0:	4619      	mov	r1, r3
 80027e2:	4827      	ldr	r0, [pc, #156]	; (8002880 <MX_TIM1_Init+0x150>)
 80027e4:	f005 fdc8 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80027ee:	f000 fa31 	bl	8002c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f2:	2360      	movs	r3, #96	; 0x60
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027fe:	2300      	movs	r3, #0
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	481a      	ldr	r0, [pc, #104]	; (8002880 <MX_TIM1_Init+0x150>)
 8002818:	f004 ffe4 	bl	80077e4 <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002822:	f000 fa17 	bl	8002c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282a:	2204      	movs	r2, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4814      	ldr	r0, [pc, #80]	; (8002880 <MX_TIM1_Init+0x150>)
 8002830:	f004 ffd8 	bl	80077e4 <HAL_TIM_PWM_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800283a:	f000 fa0b 	bl	8002c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002856:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4807      	ldr	r0, [pc, #28]	; (8002880 <MX_TIM1_Init+0x150>)
 8002862:	f005 fe03 	bl	800846c <HAL_TIMEx_ConfigBreakDeadTime>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800286c:	f000 f9f2 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <MX_TIM1_Init+0x150>)
 8002872:	f000 fc39 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 8002876:	bf00      	nop
 8002878:	3758      	adds	r7, #88	; 0x58
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000210 	.word	0x20000210
 8002884:	40010000 	.word	0x40010000

08002888 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b096      	sub	sp, #88	; 0x58
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	615a      	str	r2, [r3, #20]
 80028b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2220      	movs	r2, #32
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f006 fc09 	bl	80090d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028c8:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <MX_TIM8_Init+0x13c>)
 80028ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 119;
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028ce:	2277      	movs	r2, #119	; 0x77
 80028d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028d4:	2220      	movs	r2, #32
 80028d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 80028d8:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028da:	2231      	movs	r2, #49	; 0x31
 80028dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ea:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80028f0:	4833      	ldr	r0, [pc, #204]	; (80029c0 <MX_TIM8_Init+0x138>)
 80028f2:	f004 fbb7 	bl	8007064 <HAL_TIM_Base_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80028fc:	f000 f9aa 	bl	8002c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002904:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800290a:	4619      	mov	r1, r3
 800290c:	482c      	ldr	r0, [pc, #176]	; (80029c0 <MX_TIM8_Init+0x138>)
 800290e:	f005 f82b 	bl	8007968 <HAL_TIM_ConfigClockSource>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002918:	f000 f99c 	bl	8002c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800291c:	4828      	ldr	r0, [pc, #160]	; (80029c0 <MX_TIM8_Init+0x138>)
 800291e:	f004 fc6d 	bl	80071fc <HAL_TIM_PWM_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002928:	f000 f994 	bl	8002c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002938:	4619      	mov	r1, r3
 800293a:	4821      	ldr	r0, [pc, #132]	; (80029c0 <MX_TIM8_Init+0x138>)
 800293c:	f005 fd1c 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002946:	f000 f985 	bl	8002c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294a:	2360      	movs	r3, #96	; 0x60
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_TIM8_Init+0x138>)
 8002970:	f004 ff38 	bl	80077e4 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800297a:	f000 f96b 	bl	8002c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <MX_TIM8_Init+0x138>)
 80029a2:	f005 fd63 	bl	800846c <HAL_TIMEx_ConfigBreakDeadTime>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80029ac:	f000 f952 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <MX_TIM8_Init+0x138>)
 80029b2:	f000 fb99 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3758      	adds	r7, #88	; 0x58
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200002a0 	.word	0x200002a0
 80029c4:	40010400 	.word	0x40010400

080029c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]
 80029de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <MX_TIM14_Init+0x8c>)
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <MX_TIM14_Init+0x90>)
 80029e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <MX_TIM14_Init+0x8c>)
 80029e8:	223b      	movs	r2, #59	; 0x3b
 80029ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <MX_TIM14_Init+0x8c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <MX_TIM14_Init+0x8c>)
 80029f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80029f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <MX_TIM14_Init+0x8c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <MX_TIM14_Init+0x8c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a06:	4813      	ldr	r0, [pc, #76]	; (8002a54 <MX_TIM14_Init+0x8c>)
 8002a08:	f004 fb2c 	bl	8007064 <HAL_TIM_Base_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002a12:	f000 f91f 	bl	8002c54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8002a16:	480f      	ldr	r0, [pc, #60]	; (8002a54 <MX_TIM14_Init+0x8c>)
 8002a18:	f004 fba1 	bl	800715e <HAL_TIM_OC_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002a22:	f000 f917 	bl	8002c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_TIM14_Init+0x8c>)
 8002a3e:	f004 fe75 	bl	800772c <HAL_TIM_OC_ConfigChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002a48:	f000 f904 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000378 	.word	0x20000378
 8002a58:	40002000 	.word	0x40002000

08002a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <MX_USART3_UART_Init+0x50>)
 8002a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a82:	220c      	movs	r2, #12
 8002a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a94:	f005 fd71 	bl	800857a <HAL_UART_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a9e:	f000 f8d9 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200003c0 	.word	0x200003c0
 8002aac:	40004800 	.word	0x40004800

08002ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <MX_DMA_Init+0x68>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <MX_DMA_Init+0x68>)
 8002ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_DMA_Init+0x68>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <MX_DMA_Init+0x68>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <MX_DMA_Init+0x68>)
 8002adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <MX_DMA_Init+0x68>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	200f      	movs	r0, #15
 8002af4:	f001 fb05 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002af8:	200f      	movs	r0, #15
 8002afa:	f001 fb1e 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2038      	movs	r0, #56	; 0x38
 8002b04:	f001 fafd 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b08:	2038      	movs	r0, #56	; 0x38
 8002b0a:	f001 fb16 	bl	800413a <HAL_NVIC_EnableIRQ>

}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002bac:	f043 0310 	orr.w	r3, r3, #16
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <MX_GPIO_Init+0x12c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002bda:	2323      	movs	r3, #35	; 0x23
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bde:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	4619      	mov	r1, r3
 8002bee:	4817      	ldr	r0, [pc, #92]	; (8002c4c <MX_GPIO_Init+0x130>)
 8002bf0:	f001 fec8 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4811      	ldr	r0, [pc, #68]	; (8002c50 <MX_GPIO_Init+0x134>)
 8002c0a:	f001 febb 	bl	8004984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2006      	movs	r0, #6
 8002c14:	f001 fa75 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c18:	2006      	movs	r0, #6
 8002c1a:	f001 fa8e 	bl	800413a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	2007      	movs	r0, #7
 8002c24:	f001 fa6d 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c28:	2007      	movs	r0, #7
 8002c2a:	f001 fa86 	bl	800413a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2017      	movs	r0, #23
 8002c34:	f001 fa65 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c38:	2017      	movs	r0, #23
 8002c3a:	f001 fa7e 	bl	800413a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c3e:	bf00      	nop
 8002c40:	3730      	adds	r7, #48	; 0x30
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020800 	.word	0x40020800

08002c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c58:	b672      	cpsid	i
}
 8002c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <Error_Handler+0x8>

08002c5e <HAL_I2C_MemTxCpltCallback>:
#endif
}

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_MspInit+0x48>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_MspInit+0x48>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	; 0x44
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_MspInit+0x48>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_MspInit+0x48>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_MspInit+0x48>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_MspInit+0x48>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_ADC_MspInit+0x154>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	f040 8094 	bne.w	8002e08 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf0:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a43      	ldr	r2, [pc, #268]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_ADC_MspInit+0x158>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d50:	2338      	movs	r3, #56	; 0x38
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4619      	mov	r1, r3
 8002d62:	482d      	ldr	r0, [pc, #180]	; (8002e18 <HAL_ADC_MspInit+0x15c>)
 8002d64:	f001 fe0e 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d68:	2318      	movs	r3, #24
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4828      	ldr	r0, [pc, #160]	; (8002e1c <HAL_ADC_MspInit+0x160>)
 8002d7c:	f001 fe02 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4823      	ldr	r0, [pc, #140]	; (8002e20 <HAL_ADC_MspInit+0x164>)
 8002d94:	f001 fdf6 	bl	8004984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002d9a:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_ADC_MspInit+0x16c>)
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ddc:	4811      	ldr	r0, [pc, #68]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002dde:	f001 f9c7 	bl	8004170 <HAL_DMA_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002de8:	f7ff ff34 	bl	8002c54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_ADC_MspInit+0x168>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2012      	movs	r0, #18
 8002dfe:	f001 f980 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e02:	2012      	movs	r0, #18
 8002e04:	f001 f999 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40012000 	.word	0x40012000
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	200000fc 	.word	0x200000fc
 8002e28:	40026410 	.word	0x40026410

08002e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_I2C_MspInit+0x130>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f040 8082 	bne.w	8002f54 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a41      	ldr	r2, [pc, #260]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8e:	2312      	movs	r3, #18
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	482f      	ldr	r0, [pc, #188]	; (8002f64 <HAL_I2C_MspInit+0x138>)
 8002ea6:	f001 fd6d 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb0:	2312      	movs	r3, #18
 8002eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4828      	ldr	r0, [pc, #160]	; (8002f68 <HAL_I2C_MspInit+0x13c>)
 8002ec8:	f001 fd5c 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002ed6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_I2C_MspInit+0x134>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002eea:	4a21      	ldr	r2, [pc, #132]	; (8002f70 <HAL_I2C_MspInit+0x144>)
 8002eec:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002ef0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ef4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f08:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002f28:	4810      	ldr	r0, [pc, #64]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f2a:	f001 f921 	bl	8004170 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8002f34:	f7ff fe8e 	bl	8002c54 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_I2C_MspInit+0x140>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2048      	movs	r0, #72	; 0x48
 8002f4a:	f001 f8da 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002f4e:	2048      	movs	r0, #72	; 0x48
 8002f50:	f001 f8f3 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40005c00 	.word	0x40005c00
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	200001b0 	.word	0x200001b0
 8002f70:	40026070 	.word	0x40026070

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_TIM_Base_MspInit+0x110>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d116      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a3e      	ldr	r2, [pc, #248]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2019      	movs	r0, #25
 8002fa8:	f001 f8ab 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fac:	2019      	movs	r0, #25
 8002fae:	f001 f8c4 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002fb2:	e062      	b.n	800307a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a34      	ldr	r2, [pc, #208]	; (800308c <HAL_TIM_Base_MspInit+0x118>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d126      	bne.n	800300c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a30      	ldr	r2, [pc, #192]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	202b      	movs	r0, #43	; 0x2b
 8002fe0:	f001 f88f 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002fe4:	202b      	movs	r0, #43	; 0x2b
 8002fe6:	f001 f8a8 	bl	800413a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	202c      	movs	r0, #44	; 0x2c
 8002ff0:	f001 f887 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002ff4:	202c      	movs	r0, #44	; 0x2c
 8002ff6:	f001 f8a0 	bl	800413a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	202d      	movs	r0, #45	; 0x2d
 8003000:	f001 f87f 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003004:	202d      	movs	r0, #45	; 0x2d
 8003006:	f001 f898 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 800300a:	e036      	b.n	800307a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM13)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_TIM_Base_MspInit+0x11c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d116      	bne.n	8003044 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8003020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2100      	movs	r1, #0
 8003036:	202c      	movs	r0, #44	; 0x2c
 8003038:	f001 f863 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800303c:	202c      	movs	r0, #44	; 0x2c
 800303e:	f001 f87c 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8003042:	e01a      	b.n	800307a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM14)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a12      	ldr	r2, [pc, #72]	; (8003094 <HAL_TIM_Base_MspInit+0x120>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d115      	bne.n	800307a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_TIM_Base_MspInit+0x114>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	202d      	movs	r0, #45	; 0x2d
 8003070:	f001 f847 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003074:	202d      	movs	r0, #45	; 0x2d
 8003076:	f001 f860 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40023800 	.word	0x40023800
 800308c:	40010400 	.word	0x40010400
 8003090:	40001c00 	.word	0x40001c00
 8003094:	40002000 	.word	0x40002000

08003098 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM12)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_TIM_OC_MspInit+0x48>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d115      	bne.n	80030d6 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_TIM_OC_MspInit+0x4c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_TIM_OC_MspInit+0x4c>)
 80030b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_TIM_OC_MspInit+0x4c>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	202b      	movs	r0, #43	; 0x2b
 80030cc:	f001 f819 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030d0:	202b      	movs	r0, #43	; 0x2b
 80030d2:	f001 f832 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40001800 	.word	0x40001800
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_TIM_MspPostInit+0xec>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11f      	bne.n	800314a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a31      	ldr	r2, [pc, #196]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003126:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003138:	2301      	movs	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	4826      	ldr	r0, [pc, #152]	; (80031dc <HAL_TIM_MspPostInit+0xf4>)
 8003144:	f001 fc1e 	bl	8004984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003148:	e040      	b.n	80031cc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_TIM_MspPostInit+0xf8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d13b      	bne.n	80031cc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_TIM_MspPostInit+0xf0>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800319c:	2303      	movs	r3, #3
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	480f      	ldr	r0, [pc, #60]	; (80031e4 <HAL_TIM_MspPostInit+0xfc>)
 80031a8:	f001 fbec 	bl	8004984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031bc:	2303      	movs	r3, #3
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	4808      	ldr	r0, [pc, #32]	; (80031e8 <HAL_TIM_MspPostInit+0x100>)
 80031c8:	f001 fbdc 	bl	8004984 <HAL_GPIO_Init>
}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020800 	.word	0x40020800

080031ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_UART_MspInit+0x94>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d134      	bne.n	8003278 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_UART_MspInit+0x98>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_UART_MspInit+0x98>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_UART_MspInit+0x98>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_UART_MspInit+0x98>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_UART_MspInit+0x98>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_UART_MspInit+0x98>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003258:	2307      	movs	r3, #7
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4809      	ldr	r0, [pc, #36]	; (8003288 <HAL_UART_MspInit+0x9c>)
 8003264:	f001 fb8e 	bl	8004984 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	2027      	movs	r0, #39	; 0x27
 800326e:	f000 ff48 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003272:	2027      	movs	r0, #39	; 0x27
 8003274:	f000 ff61 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003278:	bf00      	nop
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40004800 	.word	0x40004800
 8003284:	40023800 	.word	0x40023800
 8003288:	40020c00 	.word	0x40020c00

0800328c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <NMI_Handler+0x4>

08003292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <HardFault_Handler+0x4>

08003298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <MemManage_Handler+0x4>

0800329e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a2:	e7fe      	b.n	80032a2 <BusFault_Handler+0x4>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <UsageFault_Handler+0x4>

080032aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d2:	f000 f923 	bl	800351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}

080032da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032de:	2001      	movs	r0, #1
 80032e0:	f001 fd06 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032ec:	2002      	movs	r0, #2
 80032ee:	f001 fcff 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <DMA1_Stream4_IRQHandler+0x10>)
 80032fe:	f001 f8cf 	bl	80044a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200001b0 	.word	0x200001b0

0800330c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <ADC_IRQHandler+0x10>)
 8003312:	f000 f962 	bl	80035da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200000b4 	.word	0x200000b4

08003320 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003324:	2020      	movs	r0, #32
 8003326:	f001 fce3 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800332a:	2080      	movs	r0, #128	; 0x80
 800332c:	f001 fce0 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}

08003334 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800333a:	f004 f8ef 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000210 	.word	0x20000210

08003348 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <TIM4_IRQHandler+0x10>)
 800334e:	f004 f8e5 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000258 	.word	0x20000258

0800335c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <USART3_IRQHandler+0x10>)
 8003362:	f005 f95b 	bl	800861c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200003c0 	.word	0x200003c0

08003370 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003374:	4803      	ldr	r0, [pc, #12]	; (8003384 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003376:	f004 f8d1 	bl	800751c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800337a:	4803      	ldr	r0, [pc, #12]	; (8003388 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800337c:	f004 f8ce 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200002a0 	.word	0x200002a0
 8003388:	200002e8 	.word	0x200002e8

0800338c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003390:	4803      	ldr	r0, [pc, #12]	; (80033a0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003392:	f004 f8c3 	bl	800751c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003396:	4803      	ldr	r0, [pc, #12]	; (80033a4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003398:	f004 f8c0 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200002a0 	.word	0x200002a0
 80033a4:	20000330 	.word	0x20000330

080033a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80033ac:	480e      	ldr	r0, [pc, #56]	; (80033e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>)
 80033ae:	f004 f8b5 	bl	800751c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80033b2:	480e      	ldr	r0, [pc, #56]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80033b4:	f004 f8b2 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if (__HAL_TIM_GET_FLAG(&htim14, TIM_FLAG_UPDATE) != RESET)
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10e      	bne.n	80033e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>
    {
      if (__HAL_TIM_GET_IT_SOURCE(&htim14, TIM_IT_UPDATE) != RESET)
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>
      {
        __HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0201 	mvn.w	r2, #1
 80033dc:	611a      	str	r2, [r3, #16]
        #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->PeriodElapsedCallback(&htim14);
        #else
          HAL_TIM_PeriodElapsedCallback(&htim14);
 80033de:	4803      	ldr	r0, [pc, #12]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80033e0:	f7fe faf2 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
        #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
    }
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200002a0 	.word	0x200002a0
 80033ec:	20000378 	.word	0x20000378

080033f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <DMA2_Stream0_IRQHandler+0x10>)
 80033f6:	f001 f853 	bl	80044a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200000fc 	.word	0x200000fc

08003404 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <I2C3_EV_IRQHandler+0x10>)
 800340a:	f001 fde1 	bl	8004fd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000015c 	.word	0x2000015c

08003418 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800345c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003428:	f7ff fff6 	bl	8003418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003444:	4c0a      	ldr	r4, [pc, #40]	; (8003470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003452:	f005 fe1d 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003456:	f7fe ff7f 	bl	8002358 <main>
  bx  lr
 800345a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800345c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003468:	0800a6c8 	.word	0x0800a6c8
  ldr r2, =_sbss
 800346c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003470:	20000448 	.word	0x20000448

08003474 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <CAN1_RX0_IRQHandler>
	...

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_Init+0x40>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <HAL_Init+0x40>)
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_Init+0x40>)
 800348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_Init+0x40>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a0:	2003      	movs	r0, #3
 80034a2:	f000 fe23 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a6:	200f      	movs	r0, #15
 80034a8:	f000 f808 	bl	80034bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80034ac:	f7ff fbe0 	bl	8002c70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00

080034bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_InitTick+0x54>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_InitTick+0x58>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fe3b 	bl	8004156 <HAL_SYSTICK_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00e      	b.n	8003508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d80a      	bhi.n	8003506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f0:	2200      	movs	r2, #0
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f000 fe03 	bl	8004102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034fc:	4a06      	ldr	r2, [pc, #24]	; (8003518 <HAL_InitTick+0x5c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000028 	.word	0x20000028
 8003514:	20000030 	.word	0x20000030
 8003518:	2000002c 	.word	0x2000002c

0800351c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_IncTick+0x1c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x20>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4413      	add	r3, r2
 800352c:	4a03      	ldr	r2, [pc, #12]	; (800353c <HAL_IncTick+0x20>)
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000030 	.word	0x20000030
 800353c:	20000444 	.word	0x20000444

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_GetTick+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	20000444 	.word	0x20000444

08003554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e033      	b.n	80035d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fba2 	bl	8002cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800359a:	f023 0302 	bic.w	r3, r3, #2
 800359e:	f043 0202 	orr.w	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb42 	bl	8003c30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
 80035c2:	e001      	b.n	80035c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d049      	beq.n	80036a4 <HAL_ADC_IRQHandler+0xca>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d046      	beq.n	80036a4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d12b      	bne.n	8003694 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003640:	2b00      	cmp	r3, #0
 8003642:	d127      	bne.n	8003694 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800365c:	2b00      	cmp	r3, #0
 800365e:	d119      	bne.n	8003694 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0220 	bic.w	r2, r2, #32
 800366e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fd ff13 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f06f 0212 	mvn.w	r2, #18
 80036a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d057      	beq.n	800376a <HAL_ADC_IRQHandler+0x190>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d054      	beq.n	800376a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d139      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12b      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	d124      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003734:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fbf0 	bl	8003f40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 020c 	mvn.w	r2, #12
 8003768:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d017      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x1d6>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d014      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10d      	bne.n	80037b0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f912 	bl	80039ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0201 	mvn.w	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037be:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x218>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0202 	orr.w	r2, r3, #2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0220 	mvn.w	r2, #32
 80037e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8fa 	bl	80039dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0220 	mvn.w	r2, #32
 80037f0:	601a      	str	r2, [r3, #0]
  }
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_ADC_Start_DMA+0x1e>
 8003816:	2302      	movs	r3, #2
 8003818:	e0bc      	b.n	8003994 <HAL_ADC_Start_DMA+0x198>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d018      	beq.n	8003862 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003840:	4b56      	ldr	r3, [pc, #344]	; (800399c <HAL_ADC_Start_DMA+0x1a0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_ADC_Start_DMA+0x1a4>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9a      	lsrs	r2, r3, #18
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003854:	e002      	b.n	800385c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3b01      	subs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f9      	bne.n	8003856 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 8084 	bne.w	800397a <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800389c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d106      	bne.n	80038c0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f023 0206 	bic.w	r2, r3, #6
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
 80038be:	e002      	b.n	80038c6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <HAL_ADC_Start_DMA+0x1a8>)
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <HAL_ADC_Start_DMA+0x1ac>)
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_ADC_Start_DMA+0x1b0>)
 80038e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800390e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	334c      	adds	r3, #76	; 0x4c
 800391a:	4619      	mov	r1, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f000 fcd4 	bl	80042cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_ADC_Start_DMA+0x1b4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d129      	bne.n	8003992 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	e020      	b.n	8003992 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_ADC_Start_DMA+0x1b8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d11b      	bne.n	8003992 <HAL_ADC_Start_DMA+0x196>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e00b      	b.n	8003992 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000028 	.word	0x20000028
 80039a0:	431bde83 	.word	0x431bde83
 80039a4:	08003e3d 	.word	0x08003e3d
 80039a8:	08003ef7 	.word	0x08003ef7
 80039ac:	08003f13 	.word	0x08003f13
 80039b0:	40012300 	.word	0x40012300
 80039b4:	40012000 	.word	0x40012000

080039b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x1c>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e103      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x224>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d925      	bls.n	8003a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b1e      	subs	r3, #30
 8003a32:	2207      	movs	r2, #7
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68d9      	ldr	r1, [r3, #12]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	4603      	mov	r3, r0
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4403      	add	r3, r0
 8003a5a:	3b1e      	subs	r3, #30
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e022      	b.n	8003aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	400a      	ands	r2, r1
 8003a8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6919      	ldr	r1, [r3, #16]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4403      	add	r3, r0
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d824      	bhi.n	8003b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b05      	subs	r3, #5
 8003ac8:	221f      	movs	r2, #31
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	3b05      	subs	r3, #5
 8003af2:	fa00 f203 	lsl.w	r2, r0, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
 8003afe:	e04c      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d824      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	3b23      	subs	r3, #35	; 0x23
 8003b1a:	221f      	movs	r2, #31
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43da      	mvns	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	400a      	ands	r2, r1
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	3b23      	subs	r3, #35	; 0x23
 8003b44:	fa00 f203 	lsl.w	r2, r0, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b50:	e023      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	3b41      	subs	r3, #65	; 0x41
 8003b64:	221f      	movs	r2, #31
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	400a      	ands	r2, r1
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b41      	subs	r3, #65	; 0x41
 8003b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_ADC_ConfigChannel+0x230>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x1c8>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b12      	cmp	r3, #18
 8003baa:	d105      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_ADC_ConfigChannel+0x234>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_ADC_ConfigChannel+0x234>)
 8003bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_ADC_ConfigChannel+0x230>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d123      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x21a>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d003      	beq.n	8003bd2 <HAL_ADC_ConfigChannel+0x1e2>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b11      	cmp	r3, #17
 8003bd0:	d11b      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_ADC_ConfigChannel+0x234>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <HAL_ADC_ConfigChannel+0x234>)
 8003bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bdc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d111      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_ADC_ConfigChannel+0x238>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_ADC_ConfigChannel+0x23c>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	0c9a      	lsrs	r2, r3, #18
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003bfc:	e002      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f9      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012000 	.word	0x40012000
 8003c24:	40012300 	.word	0x40012300
 8003c28:	20000028 	.word	0x20000028
 8003c2c:	431bde83 	.word	0x431bde83

08003c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <ADC_Init+0x204>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a7d      	ldr	r2, [pc, #500]	; (8003e34 <ADC_Init+0x204>)
 8003c3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c42:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <ADC_Init+0x204>)
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4979      	ldr	r1, [pc, #484]	; (8003e34 <ADC_Init+0x204>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	021a      	lsls	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <ADC_Init+0x208>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6899      	ldr	r1, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e00f      	b.n	8003d2a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0202 	bic.w	r2, r2, #2
 8003d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7e1b      	ldrb	r3, [r3, #24]
 8003d44:	005a      	lsls	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d027      	beq.n	8003da8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003d82:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	fa92 f2a2 	rbit	r2, r2
 8003d8a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	fa03 f102 	lsl.w	r1, r3, r2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	e007      	b.n	8003db8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	051a      	lsls	r2, r3, #20
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dfa:	025a      	lsls	r2, r3, #9
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	029a      	lsls	r2, r3, #10
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40012300 	.word	0x40012300
 8003e38:	0f000001 	.word	0x0f000001

08003e3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d13c      	bne.n	8003ed0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d12b      	bne.n	8003ec8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d127      	bne.n	8003ec8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d119      	bne.n	8003ec8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0220 	bic.w	r2, r2, #32
 8003ea2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7fd faf9 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ece:	e00e      	b.n	8003eee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fd7d 	bl	80039dc <HAL_ADC_ErrorCallback>
}
 8003ee2:	e004      	b.n	8003eee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fd57 	bl	80039b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	; 0x40
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff fd52 	bl	80039dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f70:	4013      	ands	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f86:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	60d3      	str	r3, [r2, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	f003 0307 	and.w	r3, r3, #7
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db0b      	blt.n	8003fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4906      	ldr	r1, [pc, #24]	; (8003fec <__NVIC_EnableIRQ+0x34>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2001      	movs	r0, #1
 8003fda:	fa00 f202 	lsl.w	r2, r0, r2
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	e000e100 	.word	0xe000e100

08003ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db0a      	blt.n	800401a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <__NVIC_SetPriority+0x4c>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	440b      	add	r3, r1
 8004014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004018:	e00a      	b.n	8004030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4908      	ldr	r1, [pc, #32]	; (8004040 <__NVIC_SetPriority+0x50>)
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	3b04      	subs	r3, #4
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	440b      	add	r3, r1
 800402e:	761a      	strb	r2, [r3, #24]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e100 	.word	0xe000e100
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	; 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f1c3 0307 	rsb	r3, r3, #7
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf28      	it	cs
 8004062:	2304      	movcs	r3, #4
 8004064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3304      	adds	r3, #4
 800406a:	2b06      	cmp	r3, #6
 800406c:	d902      	bls.n	8004074 <NVIC_EncodePriority+0x30>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3b03      	subs	r3, #3
 8004072:	e000      	b.n	8004076 <NVIC_EncodePriority+0x32>
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	401a      	ands	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800408c:	f04f 31ff 	mov.w	r1, #4294967295
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	43d9      	mvns	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	4313      	orrs	r3, r2
         );
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff90 	bl	8003ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff2d 	bl	8003f54 <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004114:	f7ff ff42 	bl	8003f9c <__NVIC_GetPriorityGrouping>
 8004118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff90 	bl	8004044 <NVIC_EncodePriority>
 8004124:	4602      	mov	r2, r0
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff5f 	bl	8003ff0 <__NVIC_SetPriority>
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff35 	bl	8003fb8 <__NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffa2 	bl	80040a8 <SysTick_Config>
 8004164:	4603      	mov	r3, r0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff f9e0 	bl	8003540 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e099      	b.n	80042c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ac:	e00f      	b.n	80041ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ae:	f7ff f9c7 	bl	8003540 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d908      	bls.n	80041ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2203      	movs	r2, #3
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e078      	b.n	80042c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e8      	bne.n	80041ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4b38      	ldr	r3, [pc, #224]	; (80042c8 <HAL_DMA_Init+0x158>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b04      	cmp	r3, #4
 8004226:	d107      	bne.n	8004238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4313      	orrs	r3, r2
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0307 	bic.w	r3, r3, #7
 800424e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b04      	cmp	r3, #4
 8004260:	d117      	bne.n	8004292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fb0b 	bl	8004890 <DMA_CheckFifoParam>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800428e:	2301      	movs	r3, #1
 8004290:	e016      	b.n	80042c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fac4 	bl	8004828 <DMA_CalcBaseAndBitshift>
 80042a0:	4603      	mov	r3, r0
 80042a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	223f      	movs	r2, #63	; 0x3f
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	f010803f 	.word	0xf010803f

080042cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_DMA_Start_IT+0x26>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e040      	b.n	8004374 <HAL_DMA_Start_IT+0xa8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d12f      	bne.n	8004366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa57 	bl	80047ce <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004324:	223f      	movs	r2, #63	; 0x3f
 8004326:	409a      	lsls	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0216 	orr.w	r2, r2, #22
 800433a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0208 	orr.w	r2, r2, #8
 8004352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e005      	b.n	8004372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800438a:	f7ff f8d9 	bl	8003540 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d008      	beq.n	80043ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e052      	b.n	8004454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0216 	bic.w	r2, r2, #22
 80043bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_DMA_Abort+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0208 	bic.w	r2, r2, #8
 80043ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043fe:	e013      	b.n	8004428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004400:	f7ff f89e 	bl	8003540 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b05      	cmp	r3, #5
 800440c:	d90c      	bls.n	8004428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2203      	movs	r2, #3
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e015      	b.n	8004454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e4      	bne.n	8004400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	223f      	movs	r2, #63	; 0x3f
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d004      	beq.n	800447a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e00c      	b.n	8004494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2205      	movs	r2, #5
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044ac:	4b8e      	ldr	r3, [pc, #568]	; (80046e8 <HAL_DMA_IRQHandler+0x248>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a8e      	ldr	r2, [pc, #568]	; (80046ec <HAL_DMA_IRQHandler+0x24c>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	2208      	movs	r2, #8
 80044cc:	409a      	lsls	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01a      	beq.n	800450c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	2208      	movs	r2, #8
 80044fa:	409a      	lsls	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2201      	movs	r2, #1
 8004530:	409a      	lsls	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0202 	orr.w	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	2204      	movs	r2, #4
 8004548:	409a      	lsls	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2204      	movs	r2, #4
 8004566:	409a      	lsls	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	2210      	movs	r2, #16
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d043      	beq.n	8004610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d03c      	beq.n	8004610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2210      	movs	r2, #16
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d024      	beq.n	8004610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
 80045ce:	e01f      	b.n	8004610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
 80045e0:	e016      	b.n	8004610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0208 	bic.w	r2, r2, #8
 80045fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	2220      	movs	r2, #32
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 808f 	beq.w	8004740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8087 	beq.w	8004740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	2220      	movs	r2, #32
 8004638:	409a      	lsls	r2, r3
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b05      	cmp	r3, #5
 8004648:	d136      	bne.n	80046b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0216 	bic.w	r2, r2, #22
 8004658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_DMA_IRQHandler+0x1da>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0208 	bic.w	r2, r2, #8
 8004688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	223f      	movs	r2, #63	; 0x3f
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d07e      	beq.n	80047ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
        }
        return;
 80046b6:	e079      	b.n	80047ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10d      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d031      	beq.n	8004740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
 80046e4:	e02c      	b.n	8004740 <HAL_DMA_IRQHandler+0x2a0>
 80046e6:	bf00      	nop
 80046e8:	20000028 	.word	0x20000028
 80046ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
 8004700:	e01e      	b.n	8004740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10f      	bne.n	8004730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0210 	bic.w	r2, r2, #16
 800471e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d032      	beq.n	80047ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2205      	movs	r2, #5
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3301      	adds	r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	d307      	bcc.n	8004788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f2      	bne.n	800476c <HAL_DMA_IRQHandler+0x2cc>
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
 80047aa:	e000      	b.n	80047ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80047ac:	bf00      	nop
    }
  }
}
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c2:	b2db      	uxtb	r3, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047ea:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d108      	bne.n	800480e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800480c:	e007      	b.n	800481e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3b10      	subs	r3, #16
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <DMA_CalcBaseAndBitshift+0x60>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <DMA_CalcBaseAndBitshift+0x64>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d909      	bls.n	800486a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	659a      	str	r2, [r3, #88]	; 0x58
 8004868:	e007      	b.n	800487a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	aaaaaaab 	.word	0xaaaaaaab
 800488c:	0800a4c8 	.word	0x0800a4c8

08004890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11f      	bne.n	80048ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d856      	bhi.n	800495e <DMA_CheckFifoParam+0xce>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <DMA_CheckFifoParam+0x28>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048db 	.word	0x080048db
 80048c0:	080048c9 	.word	0x080048c9
 80048c4:	0800495f 	.word	0x0800495f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d046      	beq.n	8004962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d8:	e043      	b.n	8004962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e2:	d140      	bne.n	8004966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e03d      	b.n	8004966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d121      	bne.n	8004938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d837      	bhi.n	800496a <DMA_CheckFifoParam+0xda>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <DMA_CheckFifoParam+0x70>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004911 	.word	0x08004911
 8004904:	08004917 	.word	0x08004917
 8004908:	08004911 	.word	0x08004911
 800490c:	08004929 	.word	0x08004929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e030      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d025      	beq.n	800496e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004926:	e022      	b.n	800496e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004930:	d11f      	bne.n	8004972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004936:	e01c      	b.n	8004972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d903      	bls.n	8004946 <DMA_CheckFifoParam+0xb6>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d003      	beq.n	800494c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004944:	e018      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
      break;
 800494a:	e015      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	e00b      	b.n	8004976 <DMA_CheckFifoParam+0xe6>
      break;
 800495e:	bf00      	nop
 8004960:	e00a      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;
 8004962:	bf00      	nop
 8004964:	e008      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;
 8004966:	bf00      	nop
 8004968:	e006      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;
 800496a:	bf00      	nop
 800496c:	e004      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;   
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <DMA_CheckFifoParam+0xe8>
      break;
 8004976:	bf00      	nop
    }
  } 
  
  return status; 
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004992:	e16f      	b.n	8004c74 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8161 	beq.w	8004c6e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d005      	beq.n	80049c4 <HAL_GPIO_Init+0x40>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d130      	bne.n	8004a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	2203      	movs	r2, #3
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049fa:	2201      	movs	r2, #1
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f003 0201 	and.w	r2, r3, #1
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d017      	beq.n	8004a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d123      	bne.n	8004ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	08da      	lsrs	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3208      	adds	r2, #8
 8004a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	08da      	lsrs	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3208      	adds	r2, #8
 8004ab0:	6939      	ldr	r1, [r7, #16]
 8004ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0203 	and.w	r2, r3, #3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80bb 	beq.w	8004c6e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af8:	2300      	movs	r3, #0
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	4a63      	ldr	r2, [pc, #396]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b06:	6453      	str	r3, [r2, #68]	; 0x44
 8004b08:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b14:	4a5f      	ldr	r2, [pc, #380]	; (8004c94 <HAL_GPIO_Init+0x310>)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a57      	ldr	r2, [pc, #348]	; (8004c98 <HAL_GPIO_Init+0x314>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d031      	beq.n	8004ba4 <HAL_GPIO_Init+0x220>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a56      	ldr	r2, [pc, #344]	; (8004c9c <HAL_GPIO_Init+0x318>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d02b      	beq.n	8004ba0 <HAL_GPIO_Init+0x21c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a55      	ldr	r2, [pc, #340]	; (8004ca0 <HAL_GPIO_Init+0x31c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d025      	beq.n	8004b9c <HAL_GPIO_Init+0x218>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a54      	ldr	r2, [pc, #336]	; (8004ca4 <HAL_GPIO_Init+0x320>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01f      	beq.n	8004b98 <HAL_GPIO_Init+0x214>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a53      	ldr	r2, [pc, #332]	; (8004ca8 <HAL_GPIO_Init+0x324>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d019      	beq.n	8004b94 <HAL_GPIO_Init+0x210>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a52      	ldr	r2, [pc, #328]	; (8004cac <HAL_GPIO_Init+0x328>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_GPIO_Init+0x20c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a51      	ldr	r2, [pc, #324]	; (8004cb0 <HAL_GPIO_Init+0x32c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00d      	beq.n	8004b8c <HAL_GPIO_Init+0x208>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a50      	ldr	r2, [pc, #320]	; (8004cb4 <HAL_GPIO_Init+0x330>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a4f      	ldr	r2, [pc, #316]	; (8004cb8 <HAL_GPIO_Init+0x334>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <HAL_GPIO_Init+0x200>
 8004b80:	2308      	movs	r3, #8
 8004b82:	e010      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b84:	2309      	movs	r3, #9
 8004b86:	e00e      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b88:	2307      	movs	r3, #7
 8004b8a:	e00c      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b8c:	2306      	movs	r3, #6
 8004b8e:	e00a      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b90:	2305      	movs	r3, #5
 8004b92:	e008      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b94:	2304      	movs	r3, #4
 8004b96:	e006      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e004      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e002      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f002 0203 	and.w	r2, r2, #3
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	4093      	lsls	r3, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bb8:	4936      	ldr	r1, [pc, #216]	; (8004c94 <HAL_GPIO_Init+0x310>)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004bea:	4a34      	ldr	r2, [pc, #208]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c14:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c1a:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_GPIO_Init+0x338>)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3301      	adds	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f ae88 	bne.w	8004994 <HAL_GPIO_Init+0x10>
  }
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	40013c00 	.word	0x40013c00

08004cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e001      	b.n	8004ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d06:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fae2 	bl	80022d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40013c00 	.word	0x40013c00

08004d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e12b      	b.n	8004f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fe f870 	bl	8002e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d84:	f002 f92a 	bl	8006fdc <HAL_RCC_GetPCLK1Freq>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a81      	ldr	r2, [pc, #516]	; (8004f94 <HAL_I2C_Init+0x274>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d807      	bhi.n	8004da4 <HAL_I2C_Init+0x84>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a80      	ldr	r2, [pc, #512]	; (8004f98 <HAL_I2C_Init+0x278>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bf94      	ite	ls
 8004d9c:	2301      	movls	r3, #1
 8004d9e:	2300      	movhi	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e006      	b.n	8004db2 <HAL_I2C_Init+0x92>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a7d      	ldr	r2, [pc, #500]	; (8004f9c <HAL_I2C_Init+0x27c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf94      	ite	ls
 8004dac:	2301      	movls	r3, #1
 8004dae:	2300      	movhi	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0e7      	b.n	8004f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a78      	ldr	r2, [pc, #480]	; (8004fa0 <HAL_I2C_Init+0x280>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0c9b      	lsrs	r3, r3, #18
 8004dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a6a      	ldr	r2, [pc, #424]	; (8004f94 <HAL_I2C_Init+0x274>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d802      	bhi.n	8004df4 <HAL_I2C_Init+0xd4>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3301      	adds	r3, #1
 8004df2:	e009      	b.n	8004e08 <HAL_I2C_Init+0xe8>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	4a69      	ldr	r2, [pc, #420]	; (8004fa4 <HAL_I2C_Init+0x284>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	3301      	adds	r3, #1
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	495c      	ldr	r1, [pc, #368]	; (8004f94 <HAL_I2C_Init+0x274>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d819      	bhi.n	8004e5c <HAL_I2C_Init+0x13c>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1e59      	subs	r1, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e36:	1c59      	adds	r1, r3, #1
 8004e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_I2C_Init+0x138>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1e59      	subs	r1, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	e051      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	e04f      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <HAL_I2C_Init+0x168>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	440b      	add	r3, r1
 8004e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e76:	3301      	adds	r3, #1
 8004e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e012      	b.n	8004eae <HAL_I2C_Init+0x18e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1e58      	subs	r0, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	0099      	lsls	r1, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Init+0x196>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e022      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10e      	bne.n	8004edc <HAL_I2C_Init+0x1bc>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1e58      	subs	r0, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	440b      	add	r3, r1
 8004ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eda:	e00f      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e58      	subs	r0, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	0099      	lsls	r1, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	6809      	ldr	r1, [r1, #0]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6911      	ldr	r1, [r2, #16]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68d2      	ldr	r2, [r2, #12]
 8004f36:	4311      	orrs	r1, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	000186a0 	.word	0x000186a0
 8004f98:	001e847f 	.word	0x001e847f
 8004f9c:	003d08ff 	.word	0x003d08ff
 8004fa0:	431bde83 	.word	0x431bde83
 8004fa4:	10624dd3 	.word	0x10624dd3

08004fa8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d103      	bne.n	8004fc6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d003      	beq.n	8005008 <HAL_I2C_EV_IRQHandler+0x38>
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	f040 80c1 	bne.w	800518a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_I2C_EV_IRQHandler+0x6e>
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005028:	d003      	beq.n	8005032 <HAL_I2C_EV_IRQHandler+0x62>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005030:	d101      	bne.n	8005036 <HAL_I2C_EV_IRQHandler+0x66>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <HAL_I2C_EV_IRQHandler+0x68>
 8005036:	2300      	movs	r3, #0
 8005038:	2b01      	cmp	r3, #1
 800503a:	f000 8132 	beq.w	80052a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <HAL_I2C_EV_IRQHandler+0x92>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	0a5b      	lsrs	r3, r3, #9
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f001 fb51 	bl	80066fc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fccd 	bl	80059fa <I2C_Master_SB>
 8005060:	e092      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	08db      	lsrs	r3, r3, #3
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0xb2>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fd42 	bl	8005b04 <I2C_Master_ADD10>
 8005080:	e082      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	0a5b      	lsrs	r3, r3, #9
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fd5b 	bl	8005b56 <I2C_Master_ADDR>
 80050a0:	e072      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d03b      	beq.n	8005126 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050bc:	f000 80f3 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00f      	beq.n	80050ec <HAL_I2C_EV_IRQHandler+0x11c>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <HAL_I2C_EV_IRQHandler+0x11c>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f939 	bl	800535c <I2C_MasterTransmit_TXE>
 80050ea:	e04d      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80d6 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	0a5b      	lsrs	r3, r3, #9
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80cf 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	2b21      	cmp	r3, #33	; 0x21
 800510c:	d103      	bne.n	8005116 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9c0 	bl	8005494 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005114:	e0c7      	b.n	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	f040 80c4 	bne.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa2e 	bl	8005580 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005124:	e0bf      	b.n	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005134:	f000 80b7 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	099b      	lsrs	r3, r3, #6
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00f      	beq.n	8005164 <HAL_I2C_EV_IRQHandler+0x194>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	0a9b      	lsrs	r3, r3, #10
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <HAL_I2C_EV_IRQHandler+0x194>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 faa7 	bl	80056b0 <I2C_MasterReceive_RXNE>
 8005162:	e011      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 809a 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	0a5b      	lsrs	r3, r3, #9
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8093 	beq.w	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb50 	bl	8005826 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005186:	e08e      	b.n	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005188:	e08d      	b.n	80052a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	e007      	b.n	80051ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x20e>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	0a5b      	lsrs	r3, r3, #9
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00c      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 ff09 	bl	8005fee <I2C_Slave_ADDR>
 80051dc:	e066      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x22e>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 ff44 	bl	8006084 <I2C_Slave_STOPF>
 80051fc:	e056      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051fe:	7bbb      	ldrb	r3, [r7, #14]
 8005200:	2b21      	cmp	r3, #33	; 0x21
 8005202:	d002      	beq.n	800520a <HAL_I2C_EV_IRQHandler+0x23a>
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	2b29      	cmp	r3, #41	; 0x29
 8005208:	d125      	bne.n	8005256 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00f      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0x266>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	0a9b      	lsrs	r3, r3, #10
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0x266>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fe21 	bl	8005e76 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005234:	e039      	b.n	80052aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d033      	beq.n	80052aa <HAL_I2C_EV_IRQHandler+0x2da>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	0a5b      	lsrs	r3, r3, #9
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d02d      	beq.n	80052aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fe4e 	bl	8005ef0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005254:	e029      	b.n	80052aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	0a9b      	lsrs	r3, r3, #10
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x2b2>
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fe58 	bl	8005f30 <I2C_SlaveReceive_RXNE>
 8005280:	e014      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	0a5b      	lsrs	r3, r3, #9
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fe86 	bl	8005fac <I2C_SlaveReceive_BTF>
 80052a0:	e004      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
 8005306:	4613      	mov	r3, r2
 8005308:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005372:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d150      	bne.n	8005424 <I2C_MasterTransmit_TXE+0xc8>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b21      	cmp	r3, #33	; 0x21
 8005386:	d14d      	bne.n	8005424 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b08      	cmp	r3, #8
 800538c:	d01d      	beq.n	80053ca <I2C_MasterTransmit_TXE+0x6e>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b20      	cmp	r3, #32
 8005392:	d01a      	beq.n	80053ca <I2C_MasterTransmit_TXE+0x6e>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800539a:	d016      	beq.n	80053ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2211      	movs	r2, #17
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ff75 	bl	80052b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053c8:	e060      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d107      	bne.n	8005414 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fd fc26 	bl	8002c5e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005412:	e03b      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff48 	bl	80052b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005422:	e033      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b21      	cmp	r3, #33	; 0x21
 8005428:	d005      	beq.n	8005436 <I2C_MasterTransmit_TXE+0xda>
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d12d      	bne.n	800548c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b22      	cmp	r3, #34	; 0x22
 8005434:	d12a      	bne.n	800548c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005450:	e01c      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d103      	bne.n	8005466 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f88e 	bl	8005580 <I2C_MemoryTransmit_TXE_BTF>
}
 8005464:	e012      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800548a:	e7ff      	b.n	800548c <I2C_MasterTransmit_TXE+0x130>
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b21      	cmp	r3, #33	; 0x21
 80054ac:	d164      	bne.n	8005578 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d012      	beq.n	80054de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054dc:	e04c      	b.n	8005578 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d01d      	beq.n	8005520 <I2C_MasterTransmit_BTF+0x8c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d01a      	beq.n	8005520 <I2C_MasterTransmit_BTF+0x8c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f0:	d016      	beq.n	8005520 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005500:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2211      	movs	r2, #17
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff feca 	bl	80052b2 <HAL_I2C_MasterTxCpltCallback>
}
 800551e:	e02b      	b.n	8005578 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d107      	bne.n	800556a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd fb7b 	bl	8002c5e <HAL_I2C_MemTxCpltCallback>
}
 8005568:	e006      	b.n	8005578 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe9d 	bl	80052b2 <HAL_I2C_MasterTxCpltCallback>
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11d      	bne.n	80055d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10b      	bne.n	80055b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80055b6:	e077      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	b29b      	uxth	r3, r3
 80055be:	121b      	asrs	r3, r3, #8
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055d2:	e069      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d10b      	bne.n	80055f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055f2:	e059      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d152      	bne.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b22      	cmp	r3, #34	; 0x22
 8005600:	d10d      	bne.n	800561e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005610:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800561c:	e044      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b21      	cmp	r3, #33	; 0x21
 800562c:	d112      	bne.n	8005654 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005652:	e029      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d124      	bne.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b21      	cmp	r3, #33	; 0x21
 8005662:	d121      	bne.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005672:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fd fadf 	bl	8002c5e <HAL_I2C_MemTxCpltCallback>
}
 80056a0:	e002      	b.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fc80 	bl	8004fa8 <I2C_Flush_DR>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b22      	cmp	r3, #34	; 0x22
 80056c2:	f040 80ac 	bne.w	800581e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d921      	bls.n	8005718 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	f040 808c 	bne.w	800581e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005714:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005716:	e082      	b.n	800581e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	2b02      	cmp	r3, #2
 800571e:	d075      	beq.n	800580c <I2C_MasterReceive_RXNE+0x15c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d002      	beq.n	800572c <I2C_MasterReceive_RXNE+0x7c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d16f      	bne.n	800580c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ffb3 	bl	8006698 <I2C_WaitOnSTOPRequestThroughIT>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d142      	bne.n	80057be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005756:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d10a      	bne.n	80057a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fdc0 	bl	8005326 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057a6:	e03a      	b.n	800581e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2212      	movs	r2, #18
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fd84 	bl	80052c4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057bc:	e02f      	b.n	800581e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fd97 	bl	8005338 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800580a:	e008      	b.n	800581e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	605a      	str	r2, [r3, #4]
}
 800581c:	e7ff      	b.n	800581e <I2C_MasterReceive_RXNE+0x16e>
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b04      	cmp	r3, #4
 800583c:	d11b      	bne.n	8005876 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005874:	e0bd      	b.n	80059f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b03      	cmp	r3, #3
 800587e:	d129      	bne.n	80058d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00a      	beq.n	80058ac <I2C_MasterReceive_BTF+0x86>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d007      	beq.n	80058ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058d2:	e08e      	b.n	80059f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d176      	bne.n	80059cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d002      	beq.n	80058ea <I2C_MasterReceive_BTF+0xc4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d108      	bne.n	80058fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e019      	b.n	8005930 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d002      	beq.n	8005908 <I2C_MasterReceive_BTF+0xe2>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d108      	bne.n	800591a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e00a      	b.n	8005930 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d007      	beq.n	8005930 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800598a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d10a      	bne.n	80059b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fcb9 	bl	8005326 <HAL_I2C_MemRxCpltCallback>
}
 80059b4:	e01d      	b.n	80059f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2212      	movs	r2, #18
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fc7d 	bl	80052c4 <HAL_I2C_MasterRxCpltCallback>
}
 80059ca:	e012      	b.n	80059f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d117      	bne.n	8005a3e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a26:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005a28:	e067      	b.n	8005afa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]
}
 8005a3c:	e05d      	b.n	8005afa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a46:	d133      	bne.n	8005ab0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b21      	cmp	r3, #33	; 0x21
 8005a52:	d109      	bne.n	8005a68 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a64:	611a      	str	r2, [r3, #16]
 8005a66:	e008      	b.n	8005a7a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <I2C_Master_SB+0x92>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d032      	beq.n	8005afa <I2C_Master_SB+0x100>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02d      	beq.n	8005afa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aac:	605a      	str	r2, [r3, #4]
}
 8005aae:	e024      	b.n	8005afa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10e      	bne.n	8005ad6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	11db      	asrs	r3, r3, #7
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0306 	and.w	r3, r3, #6
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f063 030f 	orn	r3, r3, #15
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	611a      	str	r2, [r3, #16]
}
 8005ad4:	e011      	b.n	8005afa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10d      	bne.n	8005afa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	11db      	asrs	r3, r3, #7
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 0306 	and.w	r3, r3, #6
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f063 030e 	orn	r3, r3, #14
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <I2C_Master_ADD10+0x26>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <I2C_Master_ADD10+0x48>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4a:	605a      	str	r2, [r3, #4]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b091      	sub	sp, #68	; 0x44
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b22      	cmp	r3, #34	; 0x22
 8005b7e:	f040 8169 	bne.w	8005e54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <I2C_Master_ADDR+0x54>
 8005b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d10b      	bne.n	8005baa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b92:	2300      	movs	r3, #0
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	e160      	b.n	8005e6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11d      	bne.n	8005bee <I2C_Master_ADDR+0x98>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bba:	d118      	bne.n	8005bee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	651a      	str	r2, [r3, #80]	; 0x50
 8005bec:	e13e      	b.n	8005e6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d113      	bne.n	8005c20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e115      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	f040 808a 	bne.w	8005d40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c32:	d137      	bne.n	8005ca4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d113      	bne.n	8005c7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c64:	2300      	movs	r3, #0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	e0e7      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	623b      	str	r3, [r7, #32]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e0d3      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d02e      	beq.n	8005d08 <I2C_Master_ADDR+0x1b2>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d02b      	beq.n	8005d08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb2:	2b12      	cmp	r3, #18
 8005cb4:	d102      	bne.n	8005cbc <I2C_Master_ADDR+0x166>
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d125      	bne.n	8005d08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d00e      	beq.n	8005ce0 <I2C_Master_ADDR+0x18a>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d00b      	beq.n	8005ce0 <I2C_Master_ADDR+0x18a>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d008      	beq.n	8005ce0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e007      	b.n	8005cf0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	e0a1      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e085      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d14d      	bne.n	8005de6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d016      	beq.n	8005d7e <I2C_Master_ADDR+0x228>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d013      	beq.n	8005d7e <I2C_Master_ADDR+0x228>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d010      	beq.n	8005d7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e007      	b.n	8005d8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d9c:	d117      	bne.n	8005dce <I2C_Master_ADDR+0x278>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005da4:	d00b      	beq.n	8005dbe <I2C_Master_ADDR+0x268>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d008      	beq.n	8005dbe <I2C_Master_ADDR+0x268>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d005      	beq.n	8005dbe <I2C_Master_ADDR+0x268>
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d002      	beq.n	8005dbe <I2C_Master_ADDR+0x268>
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d107      	bne.n	8005dce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	e032      	b.n	8005e4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005df4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e04:	d117      	bne.n	8005e36 <I2C_Master_ADDR+0x2e0>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e0c:	d00b      	beq.n	8005e26 <I2C_Master_ADDR+0x2d0>
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d008      	beq.n	8005e26 <I2C_Master_ADDR+0x2d0>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d005      	beq.n	8005e26 <I2C_Master_ADDR+0x2d0>
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d002      	beq.n	8005e26 <I2C_Master_ADDR+0x2d0>
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d107      	bne.n	8005e36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e52:	e00b      	b.n	8005e6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	e7ff      	b.n	8005e6c <I2C_Master_ADDR+0x316>
 8005e6c:	bf00      	nop
 8005e6e:	3744      	adds	r7, #68	; 0x44
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr

08005e76 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02b      	beq.n	8005ee8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d114      	bne.n	8005ee8 <I2C_SlaveTransmit_TXE+0x72>
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b29      	cmp	r3, #41	; 0x29
 8005ec2:	d111      	bne.n	8005ee8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2221      	movs	r2, #33	; 0x21
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2228      	movs	r2, #40	; 0x28
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff f9f7 	bl	80052d6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02c      	beq.n	8005fa4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d114      	bne.n	8005fa4 <I2C_SlaveReceive_RXNE+0x74>
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7e:	d111      	bne.n	8005fa4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2222      	movs	r2, #34	; 0x22
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2228      	movs	r2, #40	; 0x28
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f9a2 	bl	80052e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr

08005fee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006008:	2b28      	cmp	r3, #40	; 0x28
 800600a:	d127      	bne.n	800605c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	81bb      	strh	r3, [r7, #12]
 800603e:	e002      	b.n	8006046 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800604e:	89ba      	ldrh	r2, [r7, #12]
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff f950 	bl	80052fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800605a:	e00e      	b.n	800607a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006092:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80060a4:	2300      	movs	r3, #0
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	60bb      	str	r3, [r7, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e0:	d172      	bne.n	80061c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	2b22      	cmp	r3, #34	; 0x22
 80060e6:	d002      	beq.n	80060ee <I2C_Slave_STOPF+0x6a>
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d135      	bne.n	800615a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0204 	orr.w	r2, r3, #4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006120:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fb44 	bl	80047b4 <HAL_DMA_GetState>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d049      	beq.n	80061c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	4a69      	ldr	r2, [pc, #420]	; (80062dc <I2C_Slave_STOPF+0x258>)
 8006138:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f98c 	bl	800445c <HAL_DMA_Abort_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d03d      	beq.n	80061c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006158:	e035      	b.n	80061c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0204 	orr.w	r2, r3, #4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800618c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fb0e 	bl	80047b4 <HAL_DMA_GetState>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d014      	beq.n	80061c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	4a4e      	ldr	r2, [pc, #312]	; (80062dc <I2C_Slave_STOPF+0x258>)
 80061a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe f956 	bl	800445c <HAL_DMA_Abort_IT>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c0:	4610      	mov	r0, r2
 80061c2:	4798      	blx	r3
 80061c4:	e000      	b.n	80061c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d03e      	beq.n	8006250 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d112      	bne.n	8006206 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d112      	bne.n	800623a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f043 0204 	orr.w	r2, r3, #4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f843 	bl	80062e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800625e:	e039      	b.n	80062d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b2a      	cmp	r3, #42	; 0x2a
 8006264:	d109      	bne.n	800627a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2228      	movs	r2, #40	; 0x28
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff f837 	bl	80052e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b28      	cmp	r3, #40	; 0x28
 8006284:	d111      	bne.n	80062aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <I2C_Slave_STOPF+0x25c>)
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff f836 	bl	8005314 <HAL_I2C_ListenCpltCallback>
}
 80062a8:	e014      	b.n	80062d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	2b22      	cmp	r3, #34	; 0x22
 80062b0:	d002      	beq.n	80062b8 <I2C_Slave_STOPF+0x234>
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b22      	cmp	r3, #34	; 0x22
 80062b6:	d10d      	bne.n	80062d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff f80a 	bl	80052e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	08006549 	.word	0x08006549
 80062e0:	ffff0000 	.word	0xffff0000

080062e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d002      	beq.n	8006308 <I2C_ITError+0x24>
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d10a      	bne.n	800631e <I2C_ITError+0x3a>
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b22      	cmp	r3, #34	; 0x22
 800630c:	d107      	bne.n	800631e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800631c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006324:	2b28      	cmp	r3, #40	; 0x28
 8006326:	d107      	bne.n	8006338 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2228      	movs	r2, #40	; 0x28
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006336:	e015      	b.n	8006364 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006346:	d00a      	beq.n	800635e <I2C_ITError+0x7a>
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b60      	cmp	r3, #96	; 0x60
 800634c:	d007      	beq.n	800635e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800636e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006372:	d162      	bne.n	800643a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006382:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d020      	beq.n	80063d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	4a6a      	ldr	r2, [pc, #424]	; (8006540 <I2C_ITError+0x25c>)
 8006398:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe f85c 	bl	800445c <HAL_DMA_Abort_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8089 	beq.w	80064be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063ce:	4610      	mov	r0, r2
 80063d0:	4798      	blx	r3
 80063d2:	e074      	b.n	80064be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	4a59      	ldr	r2, [pc, #356]	; (8006540 <I2C_ITError+0x25c>)
 80063da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe f83b 	bl	800445c <HAL_DMA_Abort_IT>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d068      	beq.n	80064be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d10b      	bne.n	8006412 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	e041      	b.n	80064be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b60      	cmp	r3, #96	; 0x60
 8006444:	d125      	bne.n	8006492 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d10b      	bne.n	800647a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fe ff5d 	bl	800534a <HAL_I2C_AbortCpltCallback>
 8006490:	e015      	b.n	80064be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d10b      	bne.n	80064b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fe ff3d 	bl	8005338 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10e      	bne.n	80064ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b04      	cmp	r3, #4
 800650e:	d113      	bne.n	8006538 <I2C_ITError+0x254>
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b28      	cmp	r3, #40	; 0x28
 8006514:	d110      	bne.n	8006538 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <I2C_ITError+0x260>)
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fe feee 	bl	8005314 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	08006549 	.word	0x08006549
 8006544:	ffff0000 	.word	0xffff0000

08006548 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006562:	4b4b      	ldr	r3, [pc, #300]	; (8006690 <I2C_DMAAbort+0x148>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	4a4a      	ldr	r2, [pc, #296]	; (8006694 <I2C_DMAAbort+0x14c>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a1a      	lsrs	r2, r3, #8
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800658e:	e00a      	b.n	80065a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b01      	subs	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d0ea      	beq.n	800657c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	2200      	movs	r2, #0
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	2200      	movs	r2, #0
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	2200      	movs	r2, #0
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b60      	cmp	r3, #96	; 0x60
 8006616:	d10e      	bne.n	8006636 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7fe fe8b 	bl	800534a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006634:	e027      	b.n	8006686 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006636:	7cfb      	ldrb	r3, [r7, #19]
 8006638:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800663c:	2b28      	cmp	r3, #40	; 0x28
 800663e:	d117      	bne.n	8006670 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800665e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2228      	movs	r2, #40	; 0x28
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800666e:	e007      	b.n	8006680 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f7fe fe59 	bl	8005338 <HAL_I2C_ErrorCallback>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000028 	.word	0x20000028
 8006694:	14f8b589 	.word	0x14f8b589

08006698 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066a4:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	0a1a      	lsrs	r2, r3, #8
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b01      	subs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d107      	bne.n	80066d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e008      	b.n	80066e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d0e9      	beq.n	80066ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000028 	.word	0x20000028
 80066f8:	14f8b589 	.word	0x14f8b589

080066fc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800670c:	d103      	bne.n	8006716 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006714:	e007      	b.n	8006726 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800671e:	d102      	bne.n	8006726 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e23b      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d050      	beq.n	80067f0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800674e:	4b9e      	ldr	r3, [pc, #632]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
 8006756:	2b04      	cmp	r3, #4
 8006758:	d00c      	beq.n	8006774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675a:	4b9b      	ldr	r3, [pc, #620]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006762:	2b08      	cmp	r3, #8
 8006764:	d112      	bne.n	800678c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006766:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006772:	d10b      	bne.n	800678c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006774:	4b94      	ldr	r3, [pc, #592]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d036      	beq.n	80067ee <HAL_RCC_OscConfig+0xbe>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d132      	bne.n	80067ee <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e216      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4b8e      	ldr	r3, [pc, #568]	; (80069cc <HAL_RCC_OscConfig+0x29c>)
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d013      	beq.n	80067c6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679e:	f7fc fecf 	bl	8003540 <HAL_GetTick>
 80067a2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a6:	f7fc fecb 	bl	8003540 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b64      	cmp	r3, #100	; 0x64
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e200      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b8:	4b83      	ldr	r3, [pc, #524]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x76>
 80067c4:	e014      	b.n	80067f0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c6:	f7fc febb 	bl	8003540 <HAL_GetTick>
 80067ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ce:	f7fc feb7 	bl	8003540 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b64      	cmp	r3, #100	; 0x64
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1ec      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067e0:	4b79      	ldr	r3, [pc, #484]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x9e>
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d077      	beq.n	80068ec <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067fc:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006808:	4b6f      	ldr	r3, [pc, #444]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006810:	2b08      	cmp	r3, #8
 8006812:	d126      	bne.n	8006862 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006814:	4b6c      	ldr	r3, [pc, #432]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d120      	bne.n	8006862 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006820:	4b69      	ldr	r3, [pc, #420]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_RCC_OscConfig+0x108>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e1c0      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006838:	4b63      	ldr	r3, [pc, #396]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	21f8      	movs	r1, #248	; 0xf8
 8006846:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	fa91 f1a1 	rbit	r1, r1
 800684e:	6179      	str	r1, [r7, #20]
  return result;
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	fab1 f181 	clz	r1, r1
 8006856:	b2c9      	uxtb	r1, r1
 8006858:	408b      	lsls	r3, r1
 800685a:	495b      	ldr	r1, [pc, #364]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006860:	e044      	b.n	80068ec <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02a      	beq.n	80068c0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800686a:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <HAL_RCC_OscConfig+0x2a0>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fc fe66 	bl	8003540 <HAL_GetTick>
 8006874:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006878:	f7fc fe62 	bl	8003540 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e197      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688a:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006896:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	21f8      	movs	r1, #248	; 0xf8
 80068a4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	6939      	ldr	r1, [r7, #16]
 80068a8:	fa91 f1a1 	rbit	r1, r1
 80068ac:	60f9      	str	r1, [r7, #12]
  return result;
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	fab1 f181 	clz	r1, r1
 80068b4:	b2c9      	uxtb	r1, r1
 80068b6:	408b      	lsls	r3, r1
 80068b8:	4943      	ldr	r1, [pc, #268]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	e015      	b.n	80068ec <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c0:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <HAL_RCC_OscConfig+0x2a0>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c6:	f7fc fe3b 	bl	8003540 <HAL_GetTick>
 80068ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ce:	f7fc fe37 	bl	8003540 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e16c      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e0:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f0      	bne.n	80068ce <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d030      	beq.n	800695a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d016      	beq.n	800692e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_OscConfig+0x2a4>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006906:	f7fc fe1b 	bl	8003540 <HAL_GetTick>
 800690a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690e:	f7fc fe17 	bl	8003540 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e14c      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006920:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x1de>
 800692c:	e015      	b.n	800695a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692e:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <HAL_RCC_OscConfig+0x2a4>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006934:	f7fc fe04 	bl	8003540 <HAL_GetTick>
 8006938:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693c:	f7fc fe00 	bl	8003540 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e135      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800694e:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8087 	beq.w	8006a76 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800696e:	4b16      	ldr	r3, [pc, #88]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d110      	bne.n	800699c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	4a11      	ldr	r2, [pc, #68]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 8006984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006988:	6413      	str	r3, [r2, #64]	; 0x40
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <HAL_RCC_OscConfig+0x298>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	60bb      	str	r3, [r7, #8]
 8006994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <HAL_RCC_OscConfig+0x2a8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_RCC_OscConfig+0x2a8>)
 80069a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x2a8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d122      	bne.n	80069fa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b4:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <HAL_RCC_OscConfig+0x2a8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <HAL_RCC_OscConfig+0x2a8>)
 80069ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c0:	f7fc fdbe 	bl	8003540 <HAL_GetTick>
 80069c4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c6:	e012      	b.n	80069ee <HAL_RCC_OscConfig+0x2be>
 80069c8:	40023800 	.word	0x40023800
 80069cc:	40023802 	.word	0x40023802
 80069d0:	42470000 	.word	0x42470000
 80069d4:	42470e80 	.word	0x42470e80
 80069d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fc fdb0 	bl	8003540 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0e5      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ee:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x494>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	4b72      	ldr	r3, [pc, #456]	; (8006bc8 <HAL_RCC_OscConfig+0x498>)
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d015      	beq.n	8006a38 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0c:	f7fc fd98 	bl	8003540 <HAL_GetTick>
 8006a10:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a14:	f7fc fd94 	bl	8003540 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e0c7      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2a:	4b68      	ldr	r3, [pc, #416]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ee      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2e4>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a38:	f7fc fd82 	bl	8003540 <HAL_GetTick>
 8006a3c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a40:	f7fc fd7e 	bl	8003540 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e0b1      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a56:	4b5d      	ldr	r3, [pc, #372]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1ee      	bne.n	8006a40 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d105      	bne.n	8006a76 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6a:	4b58      	ldr	r3, [pc, #352]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a57      	ldr	r2, [pc, #348]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 809c 	beq.w	8006bb8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a80:	4b52      	ldr	r3, [pc, #328]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d061      	beq.n	8006b50 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d146      	bne.n	8006b22 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a94:	4b4e      	ldr	r3, [pc, #312]	; (8006bd0 <HAL_RCC_OscConfig+0x4a0>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fc fd51 	bl	8003540 <HAL_GetTick>
 8006a9e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fc fd4d 	bl	8003540 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b64      	cmp	r3, #100	; 0x64
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e082      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab4:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac0:	4b42      	ldr	r3, [pc, #264]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <HAL_RCC_OscConfig+0x4a4>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	69d1      	ldr	r1, [r2, #28]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6a12      	ldr	r2, [r2, #32]
 8006ad0:	4311      	orrs	r1, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ad6:	0192      	lsls	r2, r2, #6
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ade:	0612      	lsls	r2, r2, #24
 8006ae0:	4311      	orrs	r1, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ae6:	0852      	lsrs	r2, r2, #1
 8006ae8:	3a01      	subs	r2, #1
 8006aea:	0412      	lsls	r2, r2, #16
 8006aec:	430a      	orrs	r2, r1
 8006aee:	4937      	ldr	r1, [pc, #220]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af4:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <HAL_RCC_OscConfig+0x4a0>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afa:	f7fc fd21 	bl	8003540 <HAL_GetTick>
 8006afe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fc fd1d 	bl	8003540 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b64      	cmp	r3, #100	; 0x64
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e052      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b14:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x3d2>
 8006b20:	e04a      	b.n	8006bb8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b22:	4b2b      	ldr	r3, [pc, #172]	; (8006bd0 <HAL_RCC_OscConfig+0x4a0>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b28:	f7fc fd0a 	bl	8003540 <HAL_GetTick>
 8006b2c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b30:	f7fc fd06 	bl	8003540 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	; 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e03b      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b42:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x400>
 8006b4e:	e033      	b.n	8006bb8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e02e      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <HAL_RCC_OscConfig+0x49c>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d121      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d11a      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b84:	4013      	ands	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b8a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40007000 	.word	0x40007000
 8006bc8:	40023870 	.word	0x40023870
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	42470060 	.word	0x42470060
 8006bd4:	f0bc8000 	.word	0xf0bc8000

08006bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0d2      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bec:	4b6b      	ldr	r3, [pc, #428]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d90c      	bls.n	8006c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfa:	4b68      	ldr	r3, [pc, #416]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c02:	4b66      	ldr	r3, [pc, #408]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0be      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d020      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c2c:	4b5c      	ldr	r3, [pc, #368]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4a5b      	ldr	r2, [pc, #364]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006c44:	4b56      	ldr	r3, [pc, #344]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a55      	ldr	r2, [pc, #340]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4950      	ldr	r1, [pc, #320]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d040      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c76:	4b4a      	ldr	r3, [pc, #296]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d115      	bne.n	8006cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e085      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8e:	4b44      	ldr	r3, [pc, #272]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e079      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c9e:	4b40      	ldr	r3, [pc, #256]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e071      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cae:	4b3c      	ldr	r3, [pc, #240]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f023 0203 	bic.w	r2, r3, #3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4939      	ldr	r1, [pc, #228]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cc0:	f7fc fc3e 	bl	8003540 <HAL_GetTick>
 8006cc4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	e00a      	b.n	8006cde <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc8:	f7fc fc3a 	bl	8003540 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e059      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cde:	4b30      	ldr	r3, [pc, #192]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 020c 	and.w	r2, r3, #12
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d1eb      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d20c      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b27      	ldr	r3, [pc, #156]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e03c      	b.n	8006d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d24:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	491b      	ldr	r1, [pc, #108]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4913      	ldr	r1, [pc, #76]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006d56:	f000 f82b 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d64:	22f0      	movs	r2, #240	; 0xf0
 8006d66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	fa92 f2a2 	rbit	r2, r2
 8006d6e:	60fa      	str	r2, [r7, #12]
  return result;
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	fab2 f282 	clz	r2, r2
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	40d3      	lsrs	r3, r2
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <HAL_RCC_ClockConfig+0x1cc>)
 8006d7c:	5cd3      	ldrb	r3, [r2, r3]
 8006d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <HAL_RCC_ClockConfig+0x1d0>)
 8006d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d86:	4b09      	ldr	r3, [pc, #36]	; (8006dac <HAL_RCC_ClockConfig+0x1d4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fc fb96 	bl	80034bc <HAL_InitTick>

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40023c00 	.word	0x40023c00
 8006da0:	40023800 	.word	0x40023800
 8006da4:	0800a4b0 	.word	0x0800a4b0
 8006da8:	20000028 	.word	0x20000028
 8006dac:	2000002c 	.word	0x2000002c

08006db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db4:	b094      	sub	sp, #80	; 0x50
 8006db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc8:	4b7c      	ldr	r3, [pc, #496]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 030c 	and.w	r3, r3, #12
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d00d      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0x40>
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	f200 80e7 	bhi.w	8006fa8 <HAL_RCC_GetSysClockFreq+0x1f8>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_RCC_GetSysClockFreq+0x34>
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d003      	beq.n	8006dea <HAL_RCC_GetSysClockFreq+0x3a>
 8006de2:	e0e1      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006de4:	4b76      	ldr	r3, [pc, #472]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x210>)
 8006de6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006de8:	e0e1      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dea:	4b76      	ldr	r3, [pc, #472]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x214>)
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dee:	e0de      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006df0:	4b72      	ldr	r3, [pc, #456]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d065      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e06:	4b6d      	ldr	r3, [pc, #436]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	099b      	lsrs	r3, r3, #6
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	f04f 0000 	mov.w	r0, #0
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	0159      	lsls	r1, r3, #5
 8006e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e34:	0150      	lsls	r0, r2, #5
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	1a51      	subs	r1, r2, r1
 8006e3e:	6139      	str	r1, [r7, #16]
 8006e40:	4629      	mov	r1, r5
 8006e42:	eb63 0301 	sbc.w	r3, r3, r1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e54:	4659      	mov	r1, fp
 8006e56:	018b      	lsls	r3, r1, #6
 8006e58:	4651      	mov	r1, sl
 8006e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e5e:	4651      	mov	r1, sl
 8006e60:	018a      	lsls	r2, r1, #6
 8006e62:	46d4      	mov	ip, sl
 8006e64:	ebb2 080c 	subs.w	r8, r2, ip
 8006e68:	4659      	mov	r1, fp
 8006e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e82:	4690      	mov	r8, r2
 8006e84:	4699      	mov	r9, r3
 8006e86:	4623      	mov	r3, r4
 8006e88:	eb18 0303 	adds.w	r3, r8, r3
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	462b      	mov	r3, r5
 8006e90:	eb49 0303 	adc.w	r3, r9, r3
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	024b      	lsls	r3, r1, #9
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4604      	mov	r4, r0
 8006eac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	024a      	lsls	r2, r1, #9
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eba:	2200      	movs	r2, #0
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec4:	f7fa f978 	bl	80011b8 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4613      	mov	r3, r2
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed0:	e05c      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b3a      	ldr	r3, [pc, #232]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4618      	mov	r0, r3
 8006edc:	4611      	mov	r1, r2
 8006ede:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	f04f 0000 	mov.w	r0, #0
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	0159      	lsls	r1, r3, #5
 8006efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006efe:	0150      	lsls	r0, r2, #5
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	46c4      	mov	ip, r8
 8006f06:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	468c      	mov	ip, r1
 8006f10:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f28:	ebb2 040a 	subs.w	r4, r2, sl
 8006f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	00eb      	lsls	r3, r5, #3
 8006f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f3e:	00e2      	lsls	r2, r4, #3
 8006f40:	4614      	mov	r4, r2
 8006f42:	461d      	mov	r5, r3
 8006f44:	4603      	mov	r3, r0
 8006f46:	18e3      	adds	r3, r4, r3
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	eb45 0303 	adc.w	r3, r5, r3
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f5e:	4629      	mov	r1, r5
 8006f60:	028b      	lsls	r3, r1, #10
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	4604      	mov	r4, r0
 8006f68:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	028a      	lsls	r2, r1, #10
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f76:	2200      	movs	r2, #0
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	61fa      	str	r2, [r7, #28]
 8006f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f80:	f7fa f91a 	bl	80011b8 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4613      	mov	r3, r2
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x20c>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	3301      	adds	r3, #1
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fa6:	e002      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x210>)
 8006faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3750      	adds	r7, #80	; 0x50
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	007a1200 	.word	0x007a1200

08006fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fcc:	4b02      	ldr	r3, [pc, #8]	; (8006fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006fce:	681b      	ldr	r3, [r3, #0]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr
 8006fd8:	20000028 	.word	0x20000028

08006fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006fe2:	f7ff fff1 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006ff0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	fa92 f2a2 	rbit	r2, r2
 8006ffc:	603a      	str	r2, [r7, #0]
  return result;
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	fab2 f282 	clz	r2, r2
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	40d3      	lsrs	r3, r2
 8007008:	4a04      	ldr	r2, [pc, #16]	; (800701c <HAL_RCC_GetPCLK1Freq+0x40>)
 800700a:	5cd3      	ldrb	r3, [r2, r3]
 800700c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40023800 	.word	0x40023800
 800701c:	0800a4c0 	.word	0x0800a4c0

08007020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8007026:	f7ff ffcf 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 800702a:	4601      	mov	r1, r0
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007034:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8007038:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	fa92 f2a2 	rbit	r2, r2
 8007040:	603a      	str	r2, [r7, #0]
  return result;
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	fab2 f282 	clz	r2, r2
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	40d3      	lsrs	r3, r2
 800704c:	4a04      	ldr	r2, [pc, #16]	; (8007060 <HAL_RCC_GetPCLK2Freq+0x40>)
 800704e:	5cd3      	ldrb	r3, [r2, r3]
 8007050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40023800 	.word	0x40023800
 8007060:	0800a4c0 	.word	0x0800a4c0

08007064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e041      	b.n	80070fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fb ff72 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f000 fd4c 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	f241 1311 	movw	r3, #4369	; 0x1111
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10f      	bne.n	800714a <HAL_TIM_Base_Stop_IT+0x48>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	f240 4344 	movw	r3, #1092	; 0x444
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <HAL_TIM_Base_Stop_IT+0x48>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e041      	b.n	80071f4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fb ff87 	bl	8003098 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f000 fccf 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e041      	b.n	8007292 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f839 	bl	800729a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f000 fc80 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <HAL_TIM_PWM_Start+0x24>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	bf14      	ite	ne
 80072c8:	2301      	movne	r3, #1
 80072ca:	2300      	moveq	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	e022      	b.n	8007316 <HAL_TIM_PWM_Start+0x6a>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d109      	bne.n	80072ea <HAL_TIM_PWM_Start+0x3e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	bf14      	ite	ne
 80072e2:	2301      	movne	r3, #1
 80072e4:	2300      	moveq	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	e015      	b.n	8007316 <HAL_TIM_PWM_Start+0x6a>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d109      	bne.n	8007304 <HAL_TIM_PWM_Start+0x58>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e008      	b.n	8007316 <HAL_TIM_PWM_Start+0x6a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	bf14      	ite	ne
 8007310:	2301      	movne	r3, #1
 8007312:	2300      	moveq	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e07c      	b.n	8007418 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_TIM_PWM_Start+0x82>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800732c:	e013      	b.n	8007356 <HAL_TIM_PWM_Start+0xaa>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b04      	cmp	r3, #4
 8007332:	d104      	bne.n	800733e <HAL_TIM_PWM_Start+0x92>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	e00b      	b.n	8007356 <HAL_TIM_PWM_Start+0xaa>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d104      	bne.n	800734e <HAL_TIM_PWM_Start+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734c:	e003      	b.n	8007356 <HAL_TIM_PWM_Start+0xaa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2201      	movs	r2, #1
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fece 	bl	8008100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2d      	ldr	r2, [pc, #180]	; (8007420 <HAL_TIM_PWM_Start+0x174>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <HAL_TIM_PWM_Start+0xcc>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <HAL_TIM_PWM_Start+0x178>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d101      	bne.n	800737c <HAL_TIM_PWM_Start+0xd0>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_TIM_PWM_Start+0xd2>
 800737c:	2300      	movs	r3, #0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a22      	ldr	r2, [pc, #136]	; (8007420 <HAL_TIM_PWM_Start+0x174>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d022      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d01d      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <HAL_TIM_PWM_Start+0x17c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d018      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_TIM_PWM_Start+0x180>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_TIM_PWM_Start+0x184>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a16      	ldr	r2, [pc, #88]	; (8007424 <HAL_TIM_PWM_Start+0x178>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a18      	ldr	r2, [pc, #96]	; (8007434 <HAL_TIM_PWM_Start+0x188>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x136>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <HAL_TIM_PWM_Start+0x18c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d111      	bne.n	8007406 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b06      	cmp	r3, #6
 80073f2:	d010      	beq.n	8007416 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007404:	e007      	b.n	8007416 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0201 	orr.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40010000 	.word	0x40010000
 8007424:	40010400 	.word	0x40010400
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00
 8007434:	40014000 	.word	0x40014000
 8007438:	40001800 	.word	0x40001800

0800743c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fe56 	bl	8008100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2e      	ldr	r2, [pc, #184]	; (8007514 <HAL_TIM_PWM_Stop+0xd8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <HAL_TIM_PWM_Stop+0x2c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2d      	ldr	r2, [pc, #180]	; (8007518 <HAL_TIM_PWM_Stop+0xdc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d101      	bne.n	800746c <HAL_TIM_PWM_Stop+0x30>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <HAL_TIM_PWM_Stop+0x32>
 800746c:	2300      	movs	r3, #0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d017      	beq.n	80074a2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	f241 1311 	movw	r3, #4369	; 0x1111
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <HAL_TIM_PWM_Stop+0x66>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	f240 4344 	movw	r3, #1092	; 0x444
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_PWM_Stop+0x66>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10f      	bne.n	80074d2 <HAL_TIM_PWM_Stop+0x96>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	f240 4344 	movw	r3, #1092	; 0x444
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d107      	bne.n	80074d2 <HAL_TIM_PWM_Stop+0x96>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_PWM_Stop+0xa6>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e0:	e013      	b.n	800750a <HAL_TIM_PWM_Stop+0xce>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_PWM_Stop+0xb6>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f0:	e00b      	b.n	800750a <HAL_TIM_PWM_Stop+0xce>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_PWM_Stop+0xc6>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	e003      	b.n	800750a <HAL_TIM_PWM_Stop+0xce>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40010000 	.word	0x40010000
 8007518:	40010400 	.word	0x40010400

0800751c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b02      	cmp	r3, #2
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0202 	mvn.w	r2, #2
 8007548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fad2 	bl	8007b08 <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fac5 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fad4 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b04      	cmp	r3, #4
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0204 	mvn.w	r2, #4
 800759c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 faa8 	bl	8007b08 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa9b 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 faaa 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0208 	mvn.w	r2, #8
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa7e 	bl	8007b08 <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa71 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa80 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b10      	cmp	r3, #16
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0210 	mvn.w	r2, #16
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2208      	movs	r2, #8
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa54 	bl	8007b08 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa47 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa56 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10e      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d107      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0201 	mvn.w	r2, #1
 8007698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fa f994 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d10e      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d107      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 ff2a 	bl	8008520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d10e      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d107      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa1a 	bl	8007b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b20      	cmp	r3, #32
 8007704:	d10e      	bne.n	8007724 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b20      	cmp	r3, #32
 8007712:	d107      	bne.n	8007724 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0220 	mvn.w	r2, #32
 800771c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fef5 	bl	800850e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007746:	2302      	movs	r3, #2
 8007748:	e048      	b.n	80077dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b0c      	cmp	r3, #12
 8007756:	d839      	bhi.n	80077cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_TIM_OC_ConfigChannel+0x34>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007795 	.word	0x08007795
 8007764:	080077cd 	.word	0x080077cd
 8007768:	080077cd 	.word	0x080077cd
 800776c:	080077cd 	.word	0x080077cd
 8007770:	080077a3 	.word	0x080077a3
 8007774:	080077cd 	.word	0x080077cd
 8007778:	080077cd 	.word	0x080077cd
 800777c:	080077cd 	.word	0x080077cd
 8007780:	080077b1 	.word	0x080077b1
 8007784:	080077cd 	.word	0x080077cd
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077cd 	.word	0x080077cd
 8007790:	080077bf 	.word	0x080077bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fa6e 	bl	8007c7c <TIM_OC1_SetConfig>
      break;
 80077a0:	e017      	b.n	80077d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fad7 	bl	8007d5c <TIM_OC2_SetConfig>
      break;
 80077ae:	e010      	b.n	80077d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fb44 	bl	8007e44 <TIM_OC3_SetConfig>
      break;
 80077bc:	e009      	b.n	80077d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fbb1 	bl	8007f2c <TIM_OC4_SetConfig>
      break;
 80077ca:	e002      	b.n	80077d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
      break;
 80077d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077fe:	2302      	movs	r3, #2
 8007800:	e0ae      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b0c      	cmp	r3, #12
 800780e:	f200 809f 	bhi.w	8007950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800784d 	.word	0x0800784d
 800781c:	08007951 	.word	0x08007951
 8007820:	08007951 	.word	0x08007951
 8007824:	08007951 	.word	0x08007951
 8007828:	0800788d 	.word	0x0800788d
 800782c:	08007951 	.word	0x08007951
 8007830:	08007951 	.word	0x08007951
 8007834:	08007951 	.word	0x08007951
 8007838:	080078cf 	.word	0x080078cf
 800783c:	08007951 	.word	0x08007951
 8007840:	08007951 	.word	0x08007951
 8007844:	08007951 	.word	0x08007951
 8007848:	0800790f 	.word	0x0800790f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fa12 	bl	8007c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0208 	orr.w	r2, r2, #8
 8007866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0204 	bic.w	r2, r2, #4
 8007876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6999      	ldr	r1, [r3, #24]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	691a      	ldr	r2, [r3, #16]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	619a      	str	r2, [r3, #24]
      break;
 800788a:	e064      	b.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fa62 	bl	8007d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6999      	ldr	r1, [r3, #24]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	021a      	lsls	r2, r3, #8
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	619a      	str	r2, [r3, #24]
      break;
 80078cc:	e043      	b.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fab5 	bl	8007e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0208 	orr.w	r2, r2, #8
 80078e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0204 	bic.w	r2, r2, #4
 80078f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69d9      	ldr	r1, [r3, #28]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	61da      	str	r2, [r3, #28]
      break;
 800790c:	e023      	b.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fb09 	bl	8007f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69d9      	ldr	r1, [r3, #28]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	021a      	lsls	r2, r3, #8
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	61da      	str	r2, [r3, #28]
      break;
 800794e:	e002      	b.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	75fb      	strb	r3, [r7, #23]
      break;
 8007954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIM_ConfigClockSource+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e0b4      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x186>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d03e      	beq.n	8007a3c <HAL_TIM_ConfigClockSource+0xd4>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	f200 8087 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	f000 8086 	beq.w	8007ada <HAL_TIM_ConfigClockSource+0x172>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d87f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d01a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0xa6>
 80079d8:	2b70      	cmp	r3, #112	; 0x70
 80079da:	d87b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d050      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x11a>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d877      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d03c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0xfa>
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d873      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d058      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d86f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d064      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d86b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d060      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d867      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d05c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d05a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a0c:	e062      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f000 fb50 	bl	80080c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	609a      	str	r2, [r3, #8]
      break;
 8007a3a:	e04f      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6899      	ldr	r1, [r3, #8]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f000 fb39 	bl	80080c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	609a      	str	r2, [r3, #8]
      break;
 8007a60:	e03c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 fab0 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2150      	movs	r1, #80	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fb07 	bl	800808e <TIM_ITRx_SetConfig>
      break;
 8007a80:	e02c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 face 	bl	8008030 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2160      	movs	r1, #96	; 0x60
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 faf7 	bl	800808e <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e01c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f000 fa90 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fae7 	bl	800808e <TIM_ITRx_SetConfig>
      break;
 8007ac0:	e00c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 fade 	bl	800808e <TIM_ITRx_SetConfig>
      break;
 8007ad2:	e003      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
	...

08007b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3f      	ldr	r2, [pc, #252]	; (8007c50 <TIM_Base_SetConfig+0x110>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5e:	d00f      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <TIM_Base_SetConfig+0x114>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	; (8007c58 <TIM_Base_SetConfig+0x118>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3a      	ldr	r2, [pc, #232]	; (8007c5c <TIM_Base_SetConfig+0x11c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a39      	ldr	r2, [pc, #228]	; (8007c60 <TIM_Base_SetConfig+0x120>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d108      	bne.n	8007b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2e      	ldr	r2, [pc, #184]	; (8007c50 <TIM_Base_SetConfig+0x110>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d02b      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba0:	d027      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	; (8007c54 <TIM_Base_SetConfig+0x114>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d023      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <TIM_Base_SetConfig+0x118>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01f      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <TIM_Base_SetConfig+0x11c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d01b      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <TIM_Base_SetConfig+0x120>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d017      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <TIM_Base_SetConfig+0x124>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d013      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a26      	ldr	r2, [pc, #152]	; (8007c68 <TIM_Base_SetConfig+0x128>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00f      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <TIM_Base_SetConfig+0x12c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00b      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a24      	ldr	r2, [pc, #144]	; (8007c70 <TIM_Base_SetConfig+0x130>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a23      	ldr	r2, [pc, #140]	; (8007c74 <TIM_Base_SetConfig+0x134>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <TIM_Base_SetConfig+0x138>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d108      	bne.n	8007c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <TIM_Base_SetConfig+0x110>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_Base_SetConfig+0xf8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a0b      	ldr	r2, [pc, #44]	; (8007c60 <TIM_Base_SetConfig+0x120>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d103      	bne.n	8007c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	615a      	str	r2, [r3, #20]
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40014400 	.word	0x40014400
 8007c6c:	40014800 	.word	0x40014800
 8007c70:	40001800 	.word	0x40001800
 8007c74:	40001c00 	.word	0x40001c00
 8007c78:	40002000 	.word	0x40002000

08007c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f023 0201 	bic.w	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0303 	bic.w	r3, r3, #3
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 0302 	bic.w	r3, r3, #2
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <TIM_OC1_SetConfig+0xd8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x64>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <TIM_OC1_SetConfig+0xdc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10c      	bne.n	8007cfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0308 	bic.w	r3, r3, #8
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 0304 	bic.w	r3, r3, #4
 8007cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <TIM_OC1_SetConfig+0xd8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d003      	beq.n	8007d0a <TIM_OC1_SetConfig+0x8e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <TIM_OC1_SetConfig+0xdc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d111      	bne.n	8007d2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40010400 	.word	0x40010400

08007d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f023 0210 	bic.w	r2, r3, #16
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <TIM_OC2_SetConfig+0xe0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0x68>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <TIM_OC2_SetConfig+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d10d      	bne.n	8007de0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <TIM_OC2_SetConfig+0xe0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC2_SetConfig+0x94>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <TIM_OC2_SetConfig+0xe4>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d113      	bne.n	8007e18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40010400 	.word	0x40010400

08007e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a21      	ldr	r2, [pc, #132]	; (8007f24 <TIM_OC3_SetConfig+0xe0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_OC3_SetConfig+0x66>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <TIM_OC3_SetConfig+0xe4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10d      	bne.n	8007ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a16      	ldr	r2, [pc, #88]	; (8007f24 <TIM_OC3_SetConfig+0xe0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC3_SetConfig+0x92>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <TIM_OC3_SetConfig+0xe4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40010400 	.word	0x40010400

08007f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	031b      	lsls	r3, r3, #12
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <TIM_OC4_SetConfig+0xa0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d003      	beq.n	8007f94 <TIM_OC4_SetConfig+0x68>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a10      	ldr	r2, [pc, #64]	; (8007fd0 <TIM_OC4_SetConfig+0xa4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d109      	bne.n	8007fa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	40010000 	.word	0x40010000
 8007fd0:	40010400 	.word	0x40010400

08007fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 030a 	bic.w	r3, r3, #10
 8008010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f023 0210 	bic.w	r2, r3, #16
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800805a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	031b      	lsls	r3, r3, #12
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800806c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	621a      	str	r2, [r3, #32]
}
 8008084:	bf00      	nop
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr

0800808e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f043 0307 	orr.w	r3, r3, #7
 80080b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	609a      	str	r2, [r3, #8]
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr

080080c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b087      	sub	sp, #28
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	021a      	lsls	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	609a      	str	r2, [r3, #8]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2201      	movs	r2, #1
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a1a      	ldr	r2, [r3, #32]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	43db      	mvns	r3, r3
 8008122:	401a      	ands	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	fa01 f303 	lsl.w	r3, r1, r3
 8008138:	431a      	orrs	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <HAL_TIMEx_PWMN_Start+0x24>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	e022      	b.n	80081b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b04      	cmp	r3, #4
 8008170:	d109      	bne.n	8008186 <HAL_TIMEx_PWMN_Start+0x3e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b01      	cmp	r3, #1
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	e015      	b.n	80081b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d109      	bne.n	80081a0 <HAL_TIMEx_PWMN_Start+0x58>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	e008      	b.n	80081b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e06d      	b.n	8008296 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <HAL_TIMEx_PWMN_Start+0x82>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081c8:	e013      	b.n	80081f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d104      	bne.n	80081da <HAL_TIMEx_PWMN_Start+0x92>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081d8:	e00b      	b.n	80081f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d104      	bne.n	80081ea <HAL_TIMEx_PWMN_Start+0xa2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e8:	e003      	b.n	80081f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2204      	movs	r2, #4
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f999 	bl	8008532 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800820e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <HAL_TIMEx_PWMN_Start+0x158>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008222:	d01d      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <HAL_TIMEx_PWMN_Start+0x160>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_TIMEx_PWMN_Start+0x164>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1a      	ldr	r2, [pc, #104]	; (80082b0 <HAL_TIMEx_PWMN_Start+0x168>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0x118>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d111      	bne.n	8008284 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b06      	cmp	r3, #6
 8008270:	d010      	beq.n	8008294 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008282:	e007      	b.n	8008294 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40000c00 	.word	0x40000c00
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40001800 	.word	0x40001800

080082bc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f92f 	bl	8008532 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	f241 1311 	movw	r3, #4369	; 0x1111
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10f      	bne.n	8008304 <HAL_TIMEx_PWMN_Stop+0x48>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	f240 4344 	movw	r3, #1092	; 0x444
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d107      	bne.n	8008304 <HAL_TIMEx_PWMN_Stop+0x48>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008302:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6a1a      	ldr	r2, [r3, #32]
 800830a:	f241 1311 	movw	r3, #4369	; 0x1111
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10f      	bne.n	8008334 <HAL_TIMEx_PWMN_Stop+0x78>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	f240 4344 	movw	r3, #1092	; 0x444
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d107      	bne.n	8008334 <HAL_TIMEx_PWMN_Stop+0x78>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0201 	bic.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <HAL_TIMEx_PWMN_Stop+0x88>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008342:	e013      	b.n	800836c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b04      	cmp	r3, #4
 8008348:	d104      	bne.n	8008354 <HAL_TIMEx_PWMN_Stop+0x98>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008352:	e00b      	b.n	800836c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b08      	cmp	r3, #8
 8008358:	d104      	bne.n	8008364 <HAL_TIMEx_PWMN_Stop+0xa8>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008362:	e003      	b.n	800836c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800838c:	2302      	movs	r3, #2
 800838e:	e05a      	b.n	8008446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a20      	ldr	r2, [pc, #128]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d01d      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1c      	ldr	r2, [pc, #112]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1a      	ldr	r2, [pc, #104]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a19      	ldr	r2, [pc, #100]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a17      	ldr	r2, [pc, #92]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d10c      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	4313      	orrs	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr
 8008450:	40010000 	.word	0x40010000
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40010400 	.word	0x40010400
 8008464:	40014000 	.word	0x40014000
 8008468:	40001800 	.word	0x40001800

0800846c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008484:	2302      	movs	r3, #2
 8008486:	e03d      	b.n	8008504 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008532:	b480      	push	{r7}
 8008534:	b087      	sub	sp, #28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2204      	movs	r2, #4
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	43db      	mvns	r3, r3
 8008554:	401a      	ands	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	fa01 f303 	lsl.w	r3, r1, r3
 800856a:	431a      	orrs	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	621a      	str	r2, [r3, #32]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e042      	b.n	8008612 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7fa fe23 	bl	80031ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2224      	movs	r2, #36	; 0x24
 80085aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc76 	bl	8008eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b0ba      	sub	sp, #232	; 0xe8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800865a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10f      	bne.n	8008682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb5a 	bl	8008d34 <UART_Receive_IT>
      return;
 8008680:	e25b      	b.n	8008b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80de 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80d1 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
 80086b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	f043 0201 	orr.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
 80086fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f043 0204 	orr.w	r2, r3, #4
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800872a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	f043 0208 	orr.w	r2, r3, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 81f2 	beq.w	8008b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d008      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fae5 	bl	8008d34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <HAL_UART_IRQHandler+0x17a>
 800878e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d04f      	beq.n	8008836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f9ef 	bl	8008b7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d141      	bne.n	800882e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3314      	adds	r3, #20
 80087b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1d9      	bne.n	80087aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d013      	beq.n	8008826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	4a7e      	ldr	r2, [pc, #504]	; (80089fc <HAL_UART_IRQHandler+0x3e0>)
 8008804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	4618      	mov	r0, r3
 800880c:	f7fb fe26 	bl	800445c <HAL_DMA_Abort_IT>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008824:	e00e      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f993 	bl	8008b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e00a      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f98f 	bl	8008b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e006      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f98b 	bl	8008b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008842:	e175      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	bf00      	nop
    return;
 8008846:	e173      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	f040 814f 	bne.w	8008af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8148 	beq.w	8008af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8141 	beq.w	8008af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	f040 80b6 	bne.w	8008a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8145 	beq.w	8008b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088b2:	429a      	cmp	r2, r3
 80088b4:	f080 813e 	bcs.w	8008b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ca:	f000 8088 	beq.w	80089de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1d9      	bne.n	80088ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3314      	adds	r3, #20
 8008920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800892a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800893e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e1      	bne.n	800891a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3314      	adds	r3, #20
 800895c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800897a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800897c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e3      	bne.n	8008956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80089c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e3      	bne.n	800899c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fb fccf 	bl	800437c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f8b5 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089fa:	e09b      	b.n	8008b34 <HAL_UART_IRQHandler+0x518>
 80089fc:	08008c3f 	.word	0x08008c3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 808e 	beq.w	8008b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8089 	beq.w	8008b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8008a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e3      	bne.n	8008a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a82:	633a      	str	r2, [r7, #48]	; 0x30
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac8:	61fa      	str	r2, [r7, #28]
 8008aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e3      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f83b 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aee:	e023      	b.n	8008b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <HAL_UART_IRQHandler+0x4f4>
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f8ac 	bl	8008c66 <UART_Transmit_IT>
    return;
 8008b0e:	e014      	b.n	8008b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <HAL_UART_IRQHandler+0x51e>
 8008b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d008      	beq.n	8008b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f8eb 	bl	8008d04 <UART_EndTransmit_IT>
    return;
 8008b2e:	e004      	b.n	8008b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b38:	bf00      	nop
  }
}
 8008b3a:	37e8      	adds	r7, #232	; 0xe8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr

08008b52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr

08008b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr

08008b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b095      	sub	sp, #84	; 0x54
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ba2:	643a      	str	r2, [r7, #64]	; 0x40
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3314      	adds	r3, #20
 8008bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3314      	adds	r3, #20
 8008bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d119      	bne.n	8008c26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	330c      	adds	r3, #12
 8008bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f023 0310 	bic.w	r3, r3, #16
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c12:	61ba      	str	r2, [r7, #24]
 8008c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	6979      	ldr	r1, [r7, #20]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e5      	bne.n	8008bf2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c34:	bf00      	nop
 8008c36:	3754      	adds	r7, #84	; 0x54
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff ff7a 	bl	8008b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b21      	cmp	r3, #33	; 0x21
 8008c78:	d13e      	bne.n	8008cf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c82:	d114      	bne.n	8008cae <UART_Transmit_IT+0x48>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d110      	bne.n	8008cae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ca0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	1c9a      	adds	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	621a      	str	r2, [r3, #32]
 8008cac:	e008      	b.n	8008cc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	1c59      	adds	r1, r3, #1
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6211      	str	r1, [r2, #32]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10f      	bne.n	8008cf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e000      	b.n	8008cfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cf8:	2302      	movs	r3, #2
  }
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr

08008d04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68da      	ldr	r2, [r3, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7f8 fc23 	bl	8001570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08c      	sub	sp, #48	; 0x30
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b22      	cmp	r3, #34	; 0x22
 8008d46:	f040 80ae 	bne.w	8008ea6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d117      	bne.n	8008d84 <UART_Receive_IT+0x50>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d113      	bne.n	8008d84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	1c9a      	adds	r2, r3, #2
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	629a      	str	r2, [r3, #40]	; 0x28
 8008d82:	e026      	b.n	8008dd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d96:	d007      	beq.n	8008da8 <UART_Receive_IT+0x74>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <UART_Receive_IT+0x82>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e008      	b.n	8008dc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4619      	mov	r1, r3
 8008de0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d15d      	bne.n	8008ea2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0220 	bic.w	r2, r2, #32
 8008df4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	695a      	ldr	r2, [r3, #20]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d135      	bne.n	8008e98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	330c      	adds	r3, #12
 8008e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	613b      	str	r3, [r7, #16]
   return(result);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f023 0310 	bic.w	r3, r3, #16
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	330c      	adds	r3, #12
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	623a      	str	r2, [r7, #32]
 8008e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	69f9      	ldr	r1, [r7, #28]
 8008e58:	6a3a      	ldr	r2, [r7, #32]
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e5      	bne.n	8008e32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b10      	cmp	r3, #16
 8008e72:	d10a      	bne.n	8008e8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff fe67 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
 8008e96:	e002      	b.n	8008e9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff fe51 	bl	8008b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e002      	b.n	8008ea8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e000      	b.n	8008ea8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3730      	adds	r7, #48	; 0x30
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ef0:	f023 030c 	bic.w	r3, r3, #12
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	430b      	orrs	r3, r1
 8008efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a57      	ldr	r2, [pc, #348]	; (8009078 <UART_SetConfig+0x1c8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d004      	beq.n	8008f28 <UART_SetConfig+0x78>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a56      	ldr	r2, [pc, #344]	; (800907c <UART_SetConfig+0x1cc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d103      	bne.n	8008f30 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f28:	f7fe f87a 	bl	8007020 <HAL_RCC_GetPCLK2Freq>
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	e002      	b.n	8008f36 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f30:	f7fe f854 	bl	8006fdc <HAL_RCC_GetPCLK1Freq>
 8008f34:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3e:	d14c      	bne.n	8008fda <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009a      	lsls	r2, r3, #2
 8008f4a:	441a      	add	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	4a4a      	ldr	r2, [pc, #296]	; (8009080 <UART_SetConfig+0x1d0>)
 8008f58:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	0119      	lsls	r1, r3, #4
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009a      	lsls	r2, r3, #2
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f76:	4b42      	ldr	r3, [pc, #264]	; (8009080 <UART_SetConfig+0x1d0>)
 8008f78:	fba3 0302 	umull	r0, r3, r3, r2
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	2064      	movs	r0, #100	; 0x64
 8008f80:	fb00 f303 	mul.w	r3, r0, r3
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	3332      	adds	r3, #50	; 0x32
 8008f8a:	4a3d      	ldr	r2, [pc, #244]	; (8009080 <UART_SetConfig+0x1d0>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f98:	4419      	add	r1, r3
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009a      	lsls	r2, r3, #2
 8008fa4:	441a      	add	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fb0:	4b33      	ldr	r3, [pc, #204]	; (8009080 <UART_SetConfig+0x1d0>)
 8008fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	2064      	movs	r0, #100	; 0x64
 8008fba:	fb00 f303 	mul.w	r3, r0, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	3332      	adds	r3, #50	; 0x32
 8008fc4:	4a2e      	ldr	r2, [pc, #184]	; (8009080 <UART_SetConfig+0x1d0>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	f003 0207 	and.w	r2, r3, #7
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fd8:	e04a      	b.n	8009070 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009a      	lsls	r2, r3, #2
 8008fe4:	441a      	add	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff0:	4a23      	ldr	r2, [pc, #140]	; (8009080 <UART_SetConfig+0x1d0>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	0119      	lsls	r1, r3, #4
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009a      	lsls	r2, r3, #2
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <UART_SetConfig+0x1d0>)
 8009012:	fba3 0302 	umull	r0, r3, r3, r2
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	2064      	movs	r0, #100	; 0x64
 800901a:	fb00 f303 	mul.w	r3, r0, r3
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	3332      	adds	r3, #50	; 0x32
 8009024:	4a16      	ldr	r2, [pc, #88]	; (8009080 <UART_SetConfig+0x1d0>)
 8009026:	fba2 2303 	umull	r2, r3, r2, r3
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009030:	4419      	add	r1, r3
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009a      	lsls	r2, r3, #2
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	fbb2 f2f3 	udiv	r2, r2, r3
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <UART_SetConfig+0x1d0>)
 800904a:	fba3 0302 	umull	r0, r3, r3, r2
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2064      	movs	r0, #100	; 0x64
 8009052:	fb00 f303 	mul.w	r3, r0, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	3332      	adds	r3, #50	; 0x32
 800905c:	4a08      	ldr	r2, [pc, #32]	; (8009080 <UART_SetConfig+0x1d0>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	440a      	add	r2, r1
 800906e:	609a      	str	r2, [r3, #8]
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	40011000 	.word	0x40011000
 800907c:	40011400 	.word	0x40011400
 8009080:	51eb851f 	.word	0x51eb851f

08009084 <__errno>:
 8009084:	4b01      	ldr	r3, [pc, #4]	; (800908c <__errno+0x8>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000034 	.word	0x20000034

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	2600      	movs	r6, #0
 8009094:	4d0c      	ldr	r5, [pc, #48]	; (80090c8 <__libc_init_array+0x38>)
 8009096:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009098:	1b64      	subs	r4, r4, r5
 800909a:	10a4      	asrs	r4, r4, #2
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	f001 f9f8 	bl	800a494 <_init>
 80090a4:	2600      	movs	r6, #0
 80090a6:	4d0a      	ldr	r5, [pc, #40]	; (80090d0 <__libc_init_array+0x40>)
 80090a8:	4c0a      	ldr	r4, [pc, #40]	; (80090d4 <__libc_init_array+0x44>)
 80090aa:	1b64      	subs	r4, r4, r5
 80090ac:	10a4      	asrs	r4, r4, #2
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	0800a6c0 	.word	0x0800a6c0
 80090cc:	0800a6c0 	.word	0x0800a6c0
 80090d0:	0800a6c0 	.word	0x0800a6c0
 80090d4:	0800a6c4 	.word	0x0800a6c4

080090d8 <memset>:
 80090d8:	4603      	mov	r3, r0
 80090da:	4402      	add	r2, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <sin>:
 80090e8:	b530      	push	{r4, r5, lr}
 80090ea:	4a20      	ldr	r2, [pc, #128]	; (800916c <sin+0x84>)
 80090ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090f0:	4293      	cmp	r3, r2
 80090f2:	b087      	sub	sp, #28
 80090f4:	dc06      	bgt.n	8009104 <sin+0x1c>
 80090f6:	2300      	movs	r3, #0
 80090f8:	2200      	movs	r2, #0
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	f000 feff 	bl	8009f00 <__kernel_sin>
 8009102:	e006      	b.n	8009112 <sin+0x2a>
 8009104:	4a1a      	ldr	r2, [pc, #104]	; (8009170 <sin+0x88>)
 8009106:	4293      	cmp	r3, r2
 8009108:	dd05      	ble.n	8009116 <sin+0x2e>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	f7f7 f85f 	bl	80001d0 <__aeabi_dsub>
 8009112:	b007      	add	sp, #28
 8009114:	bd30      	pop	{r4, r5, pc}
 8009116:	aa02      	add	r2, sp, #8
 8009118:	f000 f852 	bl	80091c0 <__ieee754_rem_pio2>
 800911c:	f000 0003 	and.w	r0, r0, #3
 8009120:	2801      	cmp	r0, #1
 8009122:	d009      	beq.n	8009138 <sin+0x50>
 8009124:	2802      	cmp	r0, #2
 8009126:	d00e      	beq.n	8009146 <sin+0x5e>
 8009128:	b9c0      	cbnz	r0, 800915c <sin+0x74>
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	2301      	movs	r3, #1
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009136:	e7e2      	b.n	80090fe <sin+0x16>
 8009138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800913c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009140:	f000 fade 	bl	8009700 <__kernel_cos>
 8009144:	e7e5      	b.n	8009112 <sin+0x2a>
 8009146:	2301      	movs	r3, #1
 8009148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009152:	f000 fed5 	bl	8009f00 <__kernel_sin>
 8009156:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800915a:	e7da      	b.n	8009112 <sin+0x2a>
 800915c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009164:	f000 facc 	bl	8009700 <__kernel_cos>
 8009168:	e7f5      	b.n	8009156 <sin+0x6e>
 800916a:	bf00      	nop
 800916c:	3fe921fb 	.word	0x3fe921fb
 8009170:	7fefffff 	.word	0x7fefffff

08009174 <remainder>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	4616      	mov	r6, r2
 8009178:	461f      	mov	r7, r3
 800917a:	f000 fa19 	bl	80095b0 <__ieee754_remainder>
 800917e:	4632      	mov	r2, r6
 8009180:	4604      	mov	r4, r0
 8009182:	460d      	mov	r5, r1
 8009184:	463b      	mov	r3, r7
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fc73 	bl	8000a74 <__aeabi_dcmpun>
 800918e:	b990      	cbnz	r0, 80091b6 <remainder+0x42>
 8009190:	2200      	movs	r2, #0
 8009192:	2300      	movs	r3, #0
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 fc3a 	bl	8000a10 <__aeabi_dcmpeq>
 800919c:	b158      	cbz	r0, 80091b6 <remainder+0x42>
 800919e:	f7ff ff71 	bl	8009084 <__errno>
 80091a2:	2321      	movs	r3, #33	; 0x21
 80091a4:	2200      	movs	r2, #0
 80091a6:	6003      	str	r3, [r0, #0]
 80091a8:	2300      	movs	r3, #0
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	f7f7 faf1 	bl	8000794 <__aeabi_ddiv>
 80091b2:	4604      	mov	r4, r0
 80091b4:	460d      	mov	r5, r1
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091bc:	0000      	movs	r0, r0
	...

080091c0 <__ieee754_rem_pio2>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4614      	mov	r4, r2
 80091c6:	4ac4      	ldr	r2, [pc, #784]	; (80094d8 <__ieee754_rem_pio2+0x318>)
 80091c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80091cc:	b08d      	sub	sp, #52	; 0x34
 80091ce:	4592      	cmp	sl, r2
 80091d0:	9104      	str	r1, [sp, #16]
 80091d2:	dc07      	bgt.n	80091e4 <__ieee754_rem_pio2+0x24>
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	e9c4 0100 	strd	r0, r1, [r4]
 80091dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80091e0:	2500      	movs	r5, #0
 80091e2:	e024      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80091e4:	4abd      	ldr	r2, [pc, #756]	; (80094dc <__ieee754_rem_pio2+0x31c>)
 80091e6:	4592      	cmp	sl, r2
 80091e8:	dc72      	bgt.n	80092d0 <__ieee754_rem_pio2+0x110>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	4dbc      	ldr	r5, [pc, #752]	; (80094e0 <__ieee754_rem_pio2+0x320>)
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	a3ab      	add	r3, pc, #684	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2e0>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	dd36      	ble.n	8009266 <__ieee754_rem_pio2+0xa6>
 80091f8:	f7f6 ffea 	bl	80001d0 <__aeabi_dsub>
 80091fc:	45aa      	cmp	sl, r5
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	d018      	beq.n	8009236 <__ieee754_rem_pio2+0x76>
 8009204:	a3a8      	add	r3, pc, #672	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffe1 	bl	80001d0 <__aeabi_dsub>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4630      	mov	r0, r6
 8009214:	e9c4 2300 	strd	r2, r3, [r4]
 8009218:	4639      	mov	r1, r7
 800921a:	f7f6 ffd9 	bl	80001d0 <__aeabi_dsub>
 800921e:	a3a2      	add	r3, pc, #648	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f6 ffd4 	bl	80001d0 <__aeabi_dsub>
 8009228:	2501      	movs	r5, #1
 800922a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800922e:	4628      	mov	r0, r5
 8009230:	b00d      	add	sp, #52	; 0x34
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	a39e      	add	r3, pc, #632	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f6 ffc8 	bl	80001d0 <__aeabi_dsub>
 8009240:	a39d      	add	r3, pc, #628	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f7f6 ffc1 	bl	80001d0 <__aeabi_dsub>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	e9c4 2300 	strd	r2, r3, [r4]
 8009258:	4639      	mov	r1, r7
 800925a:	f7f6 ffb9 	bl	80001d0 <__aeabi_dsub>
 800925e:	a396      	add	r3, pc, #600	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e7de      	b.n	8009224 <__ieee754_rem_pio2+0x64>
 8009266:	f7f6 ffb5 	bl	80001d4 <__adddf3>
 800926a:	45aa      	cmp	sl, r5
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	d016      	beq.n	80092a0 <__ieee754_rem_pio2+0xe0>
 8009272:	a38d      	add	r3, pc, #564	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f6 ffac 	bl	80001d4 <__adddf3>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4630      	mov	r0, r6
 8009282:	e9c4 2300 	strd	r2, r3, [r4]
 8009286:	4639      	mov	r1, r7
 8009288:	f7f6 ffa2 	bl	80001d0 <__aeabi_dsub>
 800928c:	a386      	add	r3, pc, #536	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f6 ff9f 	bl	80001d4 <__adddf3>
 8009296:	f04f 35ff 	mov.w	r5, #4294967295
 800929a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800929e:	e7c6      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80092a0:	a383      	add	r3, pc, #524	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 ff95 	bl	80001d4 <__adddf3>
 80092aa:	a383      	add	r3, pc, #524	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	4606      	mov	r6, r0
 80092b2:	460f      	mov	r7, r1
 80092b4:	f7f6 ff8e 	bl	80001d4 <__adddf3>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4630      	mov	r0, r6
 80092be:	e9c4 2300 	strd	r2, r3, [r4]
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f6 ff84 	bl	80001d0 <__aeabi_dsub>
 80092c8:	a37b      	add	r3, pc, #492	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	e7e0      	b.n	8009292 <__ieee754_rem_pio2+0xd2>
 80092d0:	4a84      	ldr	r2, [pc, #528]	; (80094e4 <__ieee754_rem_pio2+0x324>)
 80092d2:	4592      	cmp	sl, r2
 80092d4:	f300 80d5 	bgt.w	8009482 <__ieee754_rem_pio2+0x2c2>
 80092d8:	f000 fec8 	bl	800a06c <fabs>
 80092dc:	a378      	add	r3, pc, #480	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x300>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	f7f7 f92b 	bl	8000540 <__aeabi_dmul>
 80092ea:	2200      	movs	r2, #0
 80092ec:	4b7e      	ldr	r3, [pc, #504]	; (80094e8 <__ieee754_rem_pio2+0x328>)
 80092ee:	f7f6 ff71 	bl	80001d4 <__adddf3>
 80092f2:	f7f7 fbd5 	bl	8000aa0 <__aeabi_d2iz>
 80092f6:	4605      	mov	r5, r0
 80092f8:	f7f7 f8b8 	bl	800046c <__aeabi_i2d>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009304:	a366      	add	r3, pc, #408	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2e0>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f7 f919 	bl	8000540 <__aeabi_dmul>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f6 ff5b 	bl	80001d0 <__aeabi_dsub>
 800931a:	a363      	add	r3, pc, #396	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009328:	f7f7 f90a 	bl	8000540 <__aeabi_dmul>
 800932c:	2d1f      	cmp	r5, #31
 800932e:	4606      	mov	r6, r0
 8009330:	460f      	mov	r7, r1
 8009332:	dc0e      	bgt.n	8009352 <__ieee754_rem_pio2+0x192>
 8009334:	4b6d      	ldr	r3, [pc, #436]	; (80094ec <__ieee754_rem_pio2+0x32c>)
 8009336:	1e6a      	subs	r2, r5, #1
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	4553      	cmp	r3, sl
 800933e:	d008      	beq.n	8009352 <__ieee754_rem_pio2+0x192>
 8009340:	4632      	mov	r2, r6
 8009342:	463b      	mov	r3, r7
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ff42 	bl	80001d0 <__aeabi_dsub>
 800934c:	e9c4 0100 	strd	r0, r1, [r4]
 8009350:	e013      	b.n	800937a <__ieee754_rem_pio2+0x1ba>
 8009352:	463b      	mov	r3, r7
 8009354:	4632      	mov	r2, r6
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f6 ff39 	bl	80001d0 <__aeabi_dsub>
 800935e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009368:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800936c:	f1ba 0f10 	cmp.w	sl, #16
 8009370:	dc1f      	bgt.n	80093b2 <__ieee754_rem_pio2+0x1f2>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9c4 2300 	strd	r2, r3, [r4]
 800937a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800937e:	4640      	mov	r0, r8
 8009380:	4653      	mov	r3, sl
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 ff24 	bl	80001d0 <__aeabi_dsub>
 8009388:	4632      	mov	r2, r6
 800938a:	463b      	mov	r3, r7
 800938c:	f7f6 ff20 	bl	80001d0 <__aeabi_dsub>
 8009390:	460b      	mov	r3, r1
 8009392:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009396:	9904      	ldr	r1, [sp, #16]
 8009398:	4602      	mov	r2, r0
 800939a:	2900      	cmp	r1, #0
 800939c:	f6bf af47 	bge.w	800922e <__ieee754_rem_pio2+0x6e>
 80093a0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80093a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80093a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093ac:	60e3      	str	r3, [r4, #12]
 80093ae:	426d      	negs	r5, r5
 80093b0:	e73d      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80093b2:	a33f      	add	r3, pc, #252	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	f7f7 f8c0 	bl	8000540 <__aeabi_dmul>
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f6 ff00 	bl	80001d0 <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f6 fef8 	bl	80001d0 <__aeabi_dsub>
 80093e0:	4632      	mov	r2, r6
 80093e2:	463b      	mov	r3, r7
 80093e4:	f7f6 fef4 	bl	80001d0 <__aeabi_dsub>
 80093e8:	a333      	add	r3, pc, #204	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f6:	f7f7 f8a3 	bl	8000540 <__aeabi_dmul>
 80093fa:	4632      	mov	r2, r6
 80093fc:	463b      	mov	r3, r7
 80093fe:	f7f6 fee7 	bl	80001d0 <__aeabi_dsub>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4606      	mov	r6, r0
 8009408:	460f      	mov	r7, r1
 800940a:	4650      	mov	r0, sl
 800940c:	4659      	mov	r1, fp
 800940e:	f7f6 fedf 	bl	80001d0 <__aeabi_dsub>
 8009412:	9a05      	ldr	r2, [sp, #20]
 8009414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b31      	cmp	r3, #49	; 0x31
 800941c:	dc06      	bgt.n	800942c <__ieee754_rem_pio2+0x26c>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	46d0      	mov	r8, sl
 8009424:	46d9      	mov	r9, fp
 8009426:	e9c4 2300 	strd	r2, r3, [r4]
 800942a:	e7a6      	b.n	800937a <__ieee754_rem_pio2+0x1ba>
 800942c:	a326      	add	r3, pc, #152	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x308>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009436:	f7f7 f883 	bl	8000540 <__aeabi_dmul>
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f6 fec3 	bl	80001d0 <__aeabi_dsub>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	4650      	mov	r0, sl
 8009454:	4659      	mov	r1, fp
 8009456:	f7f6 febb 	bl	80001d0 <__aeabi_dsub>
 800945a:	4632      	mov	r2, r6
 800945c:	463b      	mov	r3, r7
 800945e:	f7f6 feb7 	bl	80001d0 <__aeabi_dsub>
 8009462:	a31b      	add	r3, pc, #108	; (adr r3, 80094d0 <__ieee754_rem_pio2+0x310>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009470:	f7f7 f866 	bl	8000540 <__aeabi_dmul>
 8009474:	4632      	mov	r2, r6
 8009476:	463b      	mov	r3, r7
 8009478:	f7f6 feaa 	bl	80001d0 <__aeabi_dsub>
 800947c:	4606      	mov	r6, r0
 800947e:	460f      	mov	r7, r1
 8009480:	e75e      	b.n	8009340 <__ieee754_rem_pio2+0x180>
 8009482:	4a1b      	ldr	r2, [pc, #108]	; (80094f0 <__ieee754_rem_pio2+0x330>)
 8009484:	4592      	cmp	sl, r2
 8009486:	dd35      	ble.n	80094f4 <__ieee754_rem_pio2+0x334>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	f7f6 fea0 	bl	80001d0 <__aeabi_dsub>
 8009490:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009494:	e9c4 0100 	strd	r0, r1, [r4]
 8009498:	e6a2      	b.n	80091e0 <__ieee754_rem_pio2+0x20>
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	54400000 	.word	0x54400000
 80094a4:	3ff921fb 	.word	0x3ff921fb
 80094a8:	1a626331 	.word	0x1a626331
 80094ac:	3dd0b461 	.word	0x3dd0b461
 80094b0:	1a600000 	.word	0x1a600000
 80094b4:	3dd0b461 	.word	0x3dd0b461
 80094b8:	2e037073 	.word	0x2e037073
 80094bc:	3ba3198a 	.word	0x3ba3198a
 80094c0:	6dc9c883 	.word	0x6dc9c883
 80094c4:	3fe45f30 	.word	0x3fe45f30
 80094c8:	2e000000 	.word	0x2e000000
 80094cc:	3ba3198a 	.word	0x3ba3198a
 80094d0:	252049c1 	.word	0x252049c1
 80094d4:	397b839a 	.word	0x397b839a
 80094d8:	3fe921fb 	.word	0x3fe921fb
 80094dc:	4002d97b 	.word	0x4002d97b
 80094e0:	3ff921fb 	.word	0x3ff921fb
 80094e4:	413921fb 	.word	0x413921fb
 80094e8:	3fe00000 	.word	0x3fe00000
 80094ec:	0800a4d0 	.word	0x0800a4d0
 80094f0:	7fefffff 	.word	0x7fefffff
 80094f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80094f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80094fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009500:	460f      	mov	r7, r1
 8009502:	4606      	mov	r6, r0
 8009504:	f7f7 facc 	bl	8000aa0 <__aeabi_d2iz>
 8009508:	f7f6 ffb0 	bl	800046c <__aeabi_i2d>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009518:	f7f6 fe5a 	bl	80001d0 <__aeabi_dsub>
 800951c:	2200      	movs	r2, #0
 800951e:	4b22      	ldr	r3, [pc, #136]	; (80095a8 <__ieee754_rem_pio2+0x3e8>)
 8009520:	f7f7 f80e 	bl	8000540 <__aeabi_dmul>
 8009524:	460f      	mov	r7, r1
 8009526:	4606      	mov	r6, r0
 8009528:	f7f7 faba 	bl	8000aa0 <__aeabi_d2iz>
 800952c:	f7f6 ff9e 	bl	800046c <__aeabi_i2d>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4630      	mov	r0, r6
 8009536:	4639      	mov	r1, r7
 8009538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800953c:	f7f6 fe48 	bl	80001d0 <__aeabi_dsub>
 8009540:	2200      	movs	r2, #0
 8009542:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <__ieee754_rem_pio2+0x3e8>)
 8009544:	f7f6 fffc 	bl	8000540 <__aeabi_dmul>
 8009548:	f04f 0803 	mov.w	r8, #3
 800954c:	2600      	movs	r6, #0
 800954e:	2700      	movs	r7, #0
 8009550:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009558:	4632      	mov	r2, r6
 800955a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800955e:	463b      	mov	r3, r7
 8009560:	46c2      	mov	sl, r8
 8009562:	f108 38ff 	add.w	r8, r8, #4294967295
 8009566:	f7f7 fa53 	bl	8000a10 <__aeabi_dcmpeq>
 800956a:	2800      	cmp	r0, #0
 800956c:	d1f4      	bne.n	8009558 <__ieee754_rem_pio2+0x398>
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <__ieee754_rem_pio2+0x3ec>)
 8009570:	462a      	mov	r2, r5
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	2302      	movs	r3, #2
 8009576:	4621      	mov	r1, r4
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	a806      	add	r0, sp, #24
 800957c:	4653      	mov	r3, sl
 800957e:	f000 f97d 	bl	800987c <__kernel_rem_pio2>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	4605      	mov	r5, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	f6bf ae51 	bge.w	800922e <__ieee754_rem_pio2+0x6e>
 800958c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009594:	e9c4 2300 	strd	r2, r3, [r4]
 8009598:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800959c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80095a4:	e703      	b.n	80093ae <__ieee754_rem_pio2+0x1ee>
 80095a6:	bf00      	nop
 80095a8:	41700000 	.word	0x41700000
 80095ac:	0800a550 	.word	0x0800a550

080095b0 <__ieee754_remainder>:
 80095b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80095b8:	ea56 0c02 	orrs.w	ip, r6, r2
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	461f      	mov	r7, r3
 80095c2:	4691      	mov	r9, r2
 80095c4:	4698      	mov	r8, r3
 80095c6:	4693      	mov	fp, r2
 80095c8:	d108      	bne.n	80095dc <__ieee754_remainder+0x2c>
 80095ca:	f7f6 ffb9 	bl	8000540 <__aeabi_dmul>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	f7f7 f8df 	bl	8000794 <__aeabi_ddiv>
 80095d6:	b003      	add	sp, #12
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80095e0:	9101      	str	r1, [sp, #4]
 80095e2:	4943      	ldr	r1, [pc, #268]	; (80096f0 <__ieee754_remainder+0x140>)
 80095e4:	458a      	cmp	sl, r1
 80095e6:	dc07      	bgt.n	80095f8 <__ieee754_remainder+0x48>
 80095e8:	428e      	cmp	r6, r1
 80095ea:	dd0a      	ble.n	8009602 <__ieee754_remainder+0x52>
 80095ec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80095f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d021      	beq.n	800963c <__ieee754_remainder+0x8c>
 80095f8:	464a      	mov	r2, r9
 80095fa:	463b      	mov	r3, r7
 80095fc:	4628      	mov	r0, r5
 80095fe:	4621      	mov	r1, r4
 8009600:	e7e3      	b.n	80095ca <__ieee754_remainder+0x1a>
 8009602:	493c      	ldr	r1, [pc, #240]	; (80096f4 <__ieee754_remainder+0x144>)
 8009604:	428e      	cmp	r6, r1
 8009606:	dc19      	bgt.n	800963c <__ieee754_remainder+0x8c>
 8009608:	4610      	mov	r0, r2
 800960a:	4619      	mov	r1, r3
 800960c:	f7f6 fde2 	bl	80001d4 <__adddf3>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4628      	mov	r0, r5
 8009616:	4621      	mov	r1, r4
 8009618:	f000 fe2c 	bl	800a274 <__ieee754_fmod>
 800961c:	4684      	mov	ip, r0
 800961e:	460c      	mov	r4, r1
 8009620:	ebaa 0606 	sub.w	r6, sl, r6
 8009624:	eba5 0b0b 	sub.w	fp, r5, fp
 8009628:	ea56 030b 	orrs.w	r3, r6, fp
 800962c:	d108      	bne.n	8009640 <__ieee754_remainder+0x90>
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	4660      	mov	r0, ip
 8009634:	4621      	mov	r1, r4
 8009636:	f7f6 ff83 	bl	8000540 <__aeabi_dmul>
 800963a:	e7cc      	b.n	80095d6 <__ieee754_remainder+0x26>
 800963c:	46ac      	mov	ip, r5
 800963e:	e7ef      	b.n	8009620 <__ieee754_remainder+0x70>
 8009640:	4660      	mov	r0, ip
 8009642:	4621      	mov	r1, r4
 8009644:	f000 fd12 	bl	800a06c <fabs>
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	4648      	mov	r0, r9
 800964e:	4639      	mov	r1, r7
 8009650:	f000 fd0c 	bl	800a06c <fabs>
 8009654:	4b28      	ldr	r3, [pc, #160]	; (80096f8 <__ieee754_remainder+0x148>)
 8009656:	4606      	mov	r6, r0
 8009658:	ea08 0303 	and.w	r3, r8, r3
 800965c:	460f      	mov	r7, r1
 800965e:	bb53      	cbnz	r3, 80096b6 <__ieee754_remainder+0x106>
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f6 fdb4 	bl	80001d4 <__adddf3>
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	f7f7 f9f6 	bl	8000a60 <__aeabi_dcmpgt>
 8009674:	b1c0      	cbz	r0, 80096a8 <__ieee754_remainder+0xf8>
 8009676:	4632      	mov	r2, r6
 8009678:	463b      	mov	r3, r7
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f6 fda7 	bl	80001d0 <__aeabi_dsub>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4604      	mov	r4, r0
 8009688:	460d      	mov	r5, r1
 800968a:	f7f6 fda3 	bl	80001d4 <__adddf3>
 800968e:	4632      	mov	r2, r6
 8009690:	463b      	mov	r3, r7
 8009692:	f7f7 f9db 	bl	8000a4c <__aeabi_dcmpge>
 8009696:	b138      	cbz	r0, 80096a8 <__ieee754_remainder+0xf8>
 8009698:	4620      	mov	r0, r4
 800969a:	4629      	mov	r1, r5
 800969c:	4632      	mov	r2, r6
 800969e:	463b      	mov	r3, r7
 80096a0:	f7f6 fd96 	bl	80001d0 <__aeabi_dsub>
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	4620      	mov	r0, r4
 80096ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	ea83 0105 	eor.w	r1, r3, r5
 80096b4:	e78f      	b.n	80095d6 <__ieee754_remainder+0x26>
 80096b6:	2200      	movs	r2, #0
 80096b8:	4b10      	ldr	r3, [pc, #64]	; (80096fc <__ieee754_remainder+0x14c>)
 80096ba:	f7f6 ff41 	bl	8000540 <__aeabi_dmul>
 80096be:	4680      	mov	r8, r0
 80096c0:	4689      	mov	r9, r1
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f9c9 	bl	8000a60 <__aeabi_dcmpgt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0ea      	beq.n	80096a8 <__ieee754_remainder+0xf8>
 80096d2:	4632      	mov	r2, r6
 80096d4:	463b      	mov	r3, r7
 80096d6:	4620      	mov	r0, r4
 80096d8:	4629      	mov	r1, r5
 80096da:	f7f6 fd79 	bl	80001d0 <__aeabi_dsub>
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f7 f9a5 	bl	8000a38 <__aeabi_dcmple>
 80096ee:	e7d2      	b.n	8009696 <__ieee754_remainder+0xe6>
 80096f0:	7fefffff 	.word	0x7fefffff
 80096f4:	7fdfffff 	.word	0x7fdfffff
 80096f8:	7fe00000 	.word	0x7fe00000
 80096fc:	3fe00000 	.word	0x3fe00000

08009700 <__kernel_cos>:
 8009700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009708:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800970c:	4680      	mov	r8, r0
 800970e:	460f      	mov	r7, r1
 8009710:	e9cd 2300 	strd	r2, r3, [sp]
 8009714:	da04      	bge.n	8009720 <__kernel_cos+0x20>
 8009716:	f7f7 f9c3 	bl	8000aa0 <__aeabi_d2iz>
 800971a:	2800      	cmp	r0, #0
 800971c:	f000 8086 	beq.w	800982c <__kernel_cos+0x12c>
 8009720:	4642      	mov	r2, r8
 8009722:	463b      	mov	r3, r7
 8009724:	4640      	mov	r0, r8
 8009726:	4639      	mov	r1, r7
 8009728:	f7f6 ff0a 	bl	8000540 <__aeabi_dmul>
 800972c:	2200      	movs	r2, #0
 800972e:	4b4e      	ldr	r3, [pc, #312]	; (8009868 <__kernel_cos+0x168>)
 8009730:	4604      	mov	r4, r0
 8009732:	460d      	mov	r5, r1
 8009734:	f7f6 ff04 	bl	8000540 <__aeabi_dmul>
 8009738:	a33f      	add	r3, pc, #252	; (adr r3, 8009838 <__kernel_cos+0x138>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	4682      	mov	sl, r0
 8009740:	468b      	mov	fp, r1
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	f7f6 fefb 	bl	8000540 <__aeabi_dmul>
 800974a:	a33d      	add	r3, pc, #244	; (adr r3, 8009840 <__kernel_cos+0x140>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 fd40 	bl	80001d4 <__adddf3>
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 fef2 	bl	8000540 <__aeabi_dmul>
 800975c:	a33a      	add	r3, pc, #232	; (adr r3, 8009848 <__kernel_cos+0x148>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f7f6 fd35 	bl	80001d0 <__aeabi_dsub>
 8009766:	4622      	mov	r2, r4
 8009768:	462b      	mov	r3, r5
 800976a:	f7f6 fee9 	bl	8000540 <__aeabi_dmul>
 800976e:	a338      	add	r3, pc, #224	; (adr r3, 8009850 <__kernel_cos+0x150>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fd2e 	bl	80001d4 <__adddf3>
 8009778:	4622      	mov	r2, r4
 800977a:	462b      	mov	r3, r5
 800977c:	f7f6 fee0 	bl	8000540 <__aeabi_dmul>
 8009780:	a335      	add	r3, pc, #212	; (adr r3, 8009858 <__kernel_cos+0x158>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fd23 	bl	80001d0 <__aeabi_dsub>
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f7f6 fed7 	bl	8000540 <__aeabi_dmul>
 8009792:	a333      	add	r3, pc, #204	; (adr r3, 8009860 <__kernel_cos+0x160>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 fd1c 	bl	80001d4 <__adddf3>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 fece 	bl	8000540 <__aeabi_dmul>
 80097a4:	4622      	mov	r2, r4
 80097a6:	462b      	mov	r3, r5
 80097a8:	f7f6 feca 	bl	8000540 <__aeabi_dmul>
 80097ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b0:	4604      	mov	r4, r0
 80097b2:	460d      	mov	r5, r1
 80097b4:	4640      	mov	r0, r8
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f6 fec2 	bl	8000540 <__aeabi_dmul>
 80097bc:	460b      	mov	r3, r1
 80097be:	4602      	mov	r2, r0
 80097c0:	4629      	mov	r1, r5
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7f6 fd04 	bl	80001d0 <__aeabi_dsub>
 80097c8:	4b28      	ldr	r3, [pc, #160]	; (800986c <__kernel_cos+0x16c>)
 80097ca:	4680      	mov	r8, r0
 80097cc:	429e      	cmp	r6, r3
 80097ce:	4689      	mov	r9, r1
 80097d0:	dc0e      	bgt.n	80097f0 <__kernel_cos+0xf0>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4650      	mov	r0, sl
 80097d8:	4659      	mov	r1, fp
 80097da:	f7f6 fcf9 	bl	80001d0 <__aeabi_dsub>
 80097de:	4602      	mov	r2, r0
 80097e0:	2000      	movs	r0, #0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4922      	ldr	r1, [pc, #136]	; (8009870 <__kernel_cos+0x170>)
 80097e6:	f7f6 fcf3 	bl	80001d0 <__aeabi_dsub>
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	2400      	movs	r4, #0
 80097f2:	4b20      	ldr	r3, [pc, #128]	; (8009874 <__kernel_cos+0x174>)
 80097f4:	4622      	mov	r2, r4
 80097f6:	429e      	cmp	r6, r3
 80097f8:	bfcc      	ite	gt
 80097fa:	4d1f      	ldrgt	r5, [pc, #124]	; (8009878 <__kernel_cos+0x178>)
 80097fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009800:	462b      	mov	r3, r5
 8009802:	2000      	movs	r0, #0
 8009804:	491a      	ldr	r1, [pc, #104]	; (8009870 <__kernel_cos+0x170>)
 8009806:	f7f6 fce3 	bl	80001d0 <__aeabi_dsub>
 800980a:	4622      	mov	r2, r4
 800980c:	4606      	mov	r6, r0
 800980e:	460f      	mov	r7, r1
 8009810:	462b      	mov	r3, r5
 8009812:	4650      	mov	r0, sl
 8009814:	4659      	mov	r1, fp
 8009816:	f7f6 fcdb 	bl	80001d0 <__aeabi_dsub>
 800981a:	4642      	mov	r2, r8
 800981c:	464b      	mov	r3, r9
 800981e:	f7f6 fcd7 	bl	80001d0 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	e7dc      	b.n	80097e6 <__kernel_cos+0xe6>
 800982c:	2000      	movs	r0, #0
 800982e:	4910      	ldr	r1, [pc, #64]	; (8009870 <__kernel_cos+0x170>)
 8009830:	e7db      	b.n	80097ea <__kernel_cos+0xea>
 8009832:	bf00      	nop
 8009834:	f3af 8000 	nop.w
 8009838:	be8838d4 	.word	0xbe8838d4
 800983c:	bda8fae9 	.word	0xbda8fae9
 8009840:	bdb4b1c4 	.word	0xbdb4b1c4
 8009844:	3e21ee9e 	.word	0x3e21ee9e
 8009848:	809c52ad 	.word	0x809c52ad
 800984c:	3e927e4f 	.word	0x3e927e4f
 8009850:	19cb1590 	.word	0x19cb1590
 8009854:	3efa01a0 	.word	0x3efa01a0
 8009858:	16c15177 	.word	0x16c15177
 800985c:	3f56c16c 	.word	0x3f56c16c
 8009860:	5555554c 	.word	0x5555554c
 8009864:	3fa55555 	.word	0x3fa55555
 8009868:	3fe00000 	.word	0x3fe00000
 800986c:	3fd33332 	.word	0x3fd33332
 8009870:	3ff00000 	.word	0x3ff00000
 8009874:	3fe90000 	.word	0x3fe90000
 8009878:	3fd20000 	.word	0x3fd20000

0800987c <__kernel_rem_pio2>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009884:	9308      	str	r3, [sp, #32]
 8009886:	9106      	str	r1, [sp, #24]
 8009888:	4bb6      	ldr	r3, [pc, #728]	; (8009b64 <__kernel_rem_pio2+0x2e8>)
 800988a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800988c:	f112 0f14 	cmn.w	r2, #20
 8009890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009894:	bfa8      	it	ge
 8009896:	1ed4      	subge	r4, r2, #3
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	bfb8      	it	lt
 800989e:	2400      	movlt	r4, #0
 80098a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	bfa4      	itt	ge
 80098a8:	2318      	movge	r3, #24
 80098aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80098ae:	f06f 0317 	mvn.w	r3, #23
 80098b2:	fb04 3303 	mla	r3, r4, r3, r3
 80098b6:	eb03 0b02 	add.w	fp, r3, r2
 80098ba:	9a07      	ldr	r2, [sp, #28]
 80098bc:	9b02      	ldr	r3, [sp, #8]
 80098be:	1aa7      	subs	r7, r4, r2
 80098c0:	eb03 0802 	add.w	r8, r3, r2
 80098c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80098c6:	2500      	movs	r5, #0
 80098c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	9009      	str	r0, [sp, #36]	; 0x24
 80098d2:	ae20      	add	r6, sp, #128	; 0x80
 80098d4:	4545      	cmp	r5, r8
 80098d6:	dd14      	ble.n	8009902 <__kernel_rem_pio2+0x86>
 80098d8:	f04f 0800 	mov.w	r8, #0
 80098dc:	9a08      	ldr	r2, [sp, #32]
 80098de:	ab20      	add	r3, sp, #128	; 0x80
 80098e0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80098e4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	4598      	cmp	r8, r3
 80098ec:	dc35      	bgt.n	800995a <__kernel_rem_pio2+0xde>
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	2200      	movs	r2, #0
 80098f2:	f1a3 0908 	sub.w	r9, r3, #8
 80098f6:	2300      	movs	r3, #0
 80098f8:	462f      	mov	r7, r5
 80098fa:	2600      	movs	r6, #0
 80098fc:	e9cd 2300 	strd	r2, r3, [sp]
 8009900:	e01f      	b.n	8009942 <__kernel_rem_pio2+0xc6>
 8009902:	42ef      	cmn	r7, r5
 8009904:	d40b      	bmi.n	800991e <__kernel_rem_pio2+0xa2>
 8009906:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800990a:	e9cd 2300 	strd	r2, r3, [sp]
 800990e:	f7f6 fdad 	bl	800046c <__aeabi_i2d>
 8009912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009916:	e8e6 0102 	strd	r0, r1, [r6], #8
 800991a:	3501      	adds	r5, #1
 800991c:	e7da      	b.n	80098d4 <__kernel_rem_pio2+0x58>
 800991e:	4610      	mov	r0, r2
 8009920:	4619      	mov	r1, r3
 8009922:	e7f8      	b.n	8009916 <__kernel_rem_pio2+0x9a>
 8009924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009928:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800992c:	f7f6 fe08 	bl	8000540 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009938:	f7f6 fc4c 	bl	80001d4 <__adddf3>
 800993c:	e9cd 0100 	strd	r0, r1, [sp]
 8009940:	3601      	adds	r6, #1
 8009942:	9b07      	ldr	r3, [sp, #28]
 8009944:	3f08      	subs	r7, #8
 8009946:	429e      	cmp	r6, r3
 8009948:	ddec      	ble.n	8009924 <__kernel_rem_pio2+0xa8>
 800994a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800994e:	f108 0801 	add.w	r8, r8, #1
 8009952:	e8ea 2302 	strd	r2, r3, [sl], #8
 8009956:	3508      	adds	r5, #8
 8009958:	e7c6      	b.n	80098e8 <__kernel_rem_pio2+0x6c>
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	aa0c      	add	r2, sp, #48	; 0x30
 800995e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009962:	930b      	str	r3, [sp, #44]	; 0x2c
 8009964:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009966:	9e02      	ldr	r6, [sp, #8]
 8009968:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800996c:	930a      	str	r3, [sp, #40]	; 0x28
 800996e:	ab98      	add	r3, sp, #608	; 0x260
 8009970:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009974:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009978:	ab70      	add	r3, sp, #448	; 0x1c0
 800997a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800997e:	46d0      	mov	r8, sl
 8009980:	46b1      	mov	r9, r6
 8009982:	af0c      	add	r7, sp, #48	; 0x30
 8009984:	9700      	str	r7, [sp, #0]
 8009986:	f1b9 0f00 	cmp.w	r9, #0
 800998a:	f1a8 0808 	sub.w	r8, r8, #8
 800998e:	dc71      	bgt.n	8009a74 <__kernel_rem_pio2+0x1f8>
 8009990:	465a      	mov	r2, fp
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f000 fbef 	bl	800a178 <scalbn>
 800999a:	2200      	movs	r2, #0
 800999c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80099a0:	4604      	mov	r4, r0
 80099a2:	460d      	mov	r5, r1
 80099a4:	f7f6 fdcc 	bl	8000540 <__aeabi_dmul>
 80099a8:	f000 fb66 	bl	800a078 <floor>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4b6e      	ldr	r3, [pc, #440]	; (8009b68 <__kernel_rem_pio2+0x2ec>)
 80099b0:	f7f6 fdc6 	bl	8000540 <__aeabi_dmul>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fc08 	bl	80001d0 <__aeabi_dsub>
 80099c0:	460d      	mov	r5, r1
 80099c2:	4604      	mov	r4, r0
 80099c4:	f7f7 f86c 	bl	8000aa0 <__aeabi_d2iz>
 80099c8:	9004      	str	r0, [sp, #16]
 80099ca:	f7f6 fd4f 	bl	800046c <__aeabi_i2d>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4620      	mov	r0, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7f6 fbfb 	bl	80001d0 <__aeabi_dsub>
 80099da:	f1bb 0f00 	cmp.w	fp, #0
 80099de:	4680      	mov	r8, r0
 80099e0:	4689      	mov	r9, r1
 80099e2:	dd70      	ble.n	8009ac6 <__kernel_rem_pio2+0x24a>
 80099e4:	1e72      	subs	r2, r6, #1
 80099e6:	ab0c      	add	r3, sp, #48	; 0x30
 80099e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099ec:	9c04      	ldr	r4, [sp, #16]
 80099ee:	f1cb 0118 	rsb	r1, fp, #24
 80099f2:	fa40 f301 	asr.w	r3, r0, r1
 80099f6:	441c      	add	r4, r3
 80099f8:	408b      	lsls	r3, r1
 80099fa:	1ac0      	subs	r0, r0, r3
 80099fc:	ab0c      	add	r3, sp, #48	; 0x30
 80099fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009a02:	f1cb 0317 	rsb	r3, fp, #23
 8009a06:	9404      	str	r4, [sp, #16]
 8009a08:	fa40 f303 	asr.w	r3, r0, r3
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd66      	ble.n	8009ae2 <__kernel_rem_pio2+0x266>
 8009a14:	2200      	movs	r2, #0
 8009a16:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	4296      	cmp	r6, r2
 8009a24:	f300 80ac 	bgt.w	8009b80 <__kernel_rem_pio2+0x304>
 8009a28:	f1bb 0f00 	cmp.w	fp, #0
 8009a2c:	dd07      	ble.n	8009a3e <__kernel_rem_pio2+0x1c2>
 8009a2e:	f1bb 0f01 	cmp.w	fp, #1
 8009a32:	f000 80b4 	beq.w	8009b9e <__kernel_rem_pio2+0x322>
 8009a36:	f1bb 0f02 	cmp.w	fp, #2
 8009a3a:	f000 80ba 	beq.w	8009bb2 <__kernel_rem_pio2+0x336>
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d14e      	bne.n	8009ae2 <__kernel_rem_pio2+0x266>
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4948      	ldr	r1, [pc, #288]	; (8009b6c <__kernel_rem_pio2+0x2f0>)
 8009a4c:	f7f6 fbc0 	bl	80001d0 <__aeabi_dsub>
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	2c00      	cmp	r4, #0
 8009a56:	d044      	beq.n	8009ae2 <__kernel_rem_pio2+0x266>
 8009a58:	465a      	mov	r2, fp
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	4943      	ldr	r1, [pc, #268]	; (8009b6c <__kernel_rem_pio2+0x2f0>)
 8009a5e:	f000 fb8b 	bl	800a178 <scalbn>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f6 fbb1 	bl	80001d0 <__aeabi_dsub>
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4689      	mov	r9, r1
 8009a72:	e036      	b.n	8009ae2 <__kernel_rem_pio2+0x266>
 8009a74:	2200      	movs	r2, #0
 8009a76:	4b3e      	ldr	r3, [pc, #248]	; (8009b70 <__kernel_rem_pio2+0x2f4>)
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f7f6 fd60 	bl	8000540 <__aeabi_dmul>
 8009a80:	f7f7 f80e 	bl	8000aa0 <__aeabi_d2iz>
 8009a84:	f7f6 fcf2 	bl	800046c <__aeabi_i2d>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b38      	ldr	r3, [pc, #224]	; (8009b74 <__kernel_rem_pio2+0x2f8>)
 8009a94:	f7f6 fd54 	bl	8000540 <__aeabi_dmul>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fb96 	bl	80001d0 <__aeabi_dsub>
 8009aa4:	f7f6 fffc 	bl	8000aa0 <__aeabi_d2iz>
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8009aae:	f843 0b04 	str.w	r0, [r3], #4
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ab8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009abc:	f7f6 fb8a 	bl	80001d4 <__adddf3>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	e75f      	b.n	8009986 <__kernel_rem_pio2+0x10a>
 8009ac6:	d105      	bne.n	8009ad4 <__kernel_rem_pio2+0x258>
 8009ac8:	1e73      	subs	r3, r6, #1
 8009aca:	aa0c      	add	r2, sp, #48	; 0x30
 8009acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ad0:	15c3      	asrs	r3, r0, #23
 8009ad2:	e79b      	b.n	8009a0c <__kernel_rem_pio2+0x190>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4b28      	ldr	r3, [pc, #160]	; (8009b78 <__kernel_rem_pio2+0x2fc>)
 8009ad8:	f7f6 ffb8 	bl	8000a4c <__aeabi_dcmpge>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d13e      	bne.n	8009b5e <__kernel_rem_pio2+0x2e2>
 8009ae0:	9000      	str	r0, [sp, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f6 ff91 	bl	8000a10 <__aeabi_dcmpeq>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f000 80b1 	beq.w	8009c56 <__kernel_rem_pio2+0x3da>
 8009af4:	1e74      	subs	r4, r6, #1
 8009af6:	4623      	mov	r3, r4
 8009af8:	2200      	movs	r2, #0
 8009afa:	9902      	ldr	r1, [sp, #8]
 8009afc:	428b      	cmp	r3, r1
 8009afe:	da5f      	bge.n	8009bc0 <__kernel_rem_pio2+0x344>
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d074      	beq.n	8009bee <__kernel_rem_pio2+0x372>
 8009b04:	ab0c      	add	r3, sp, #48	; 0x30
 8009b06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009b0a:	f1ab 0b18 	sub.w	fp, fp, #24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 809f 	beq.w	8009c52 <__kernel_rem_pio2+0x3d6>
 8009b14:	465a      	mov	r2, fp
 8009b16:	2000      	movs	r0, #0
 8009b18:	4914      	ldr	r1, [pc, #80]	; (8009b6c <__kernel_rem_pio2+0x2f0>)
 8009b1a:	f000 fb2d 	bl	800a178 <scalbn>
 8009b1e:	46a2      	mov	sl, r4
 8009b20:	4606      	mov	r6, r0
 8009b22:	460f      	mov	r7, r1
 8009b24:	f04f 0800 	mov.w	r8, #0
 8009b28:	ab70      	add	r3, sp, #448	; 0x1c0
 8009b2a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009b70 <__kernel_rem_pio2+0x2f4>
 8009b2e:	00e5      	lsls	r5, r4, #3
 8009b30:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009b34:	f1ba 0f00 	cmp.w	sl, #0
 8009b38:	f280 80c3 	bge.w	8009cc2 <__kernel_rem_pio2+0x446>
 8009b3c:	4626      	mov	r6, r4
 8009b3e:	2e00      	cmp	r6, #0
 8009b40:	f2c0 80f5 	blt.w	8009d2e <__kernel_rem_pio2+0x4b2>
 8009b44:	4b0d      	ldr	r3, [pc, #52]	; (8009b7c <__kernel_rem_pio2+0x300>)
 8009b46:	f04f 0a00 	mov.w	sl, #0
 8009b4a:	9307      	str	r3, [sp, #28]
 8009b4c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009b4e:	f04f 0b00 	mov.w	fp, #0
 8009b52:	f04f 0800 	mov.w	r8, #0
 8009b56:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009b5a:	1ba7      	subs	r7, r4, r6
 8009b5c:	e0db      	b.n	8009d16 <__kernel_rem_pio2+0x49a>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	e757      	b.n	8009a14 <__kernel_rem_pio2+0x198>
 8009b64:	0800a698 	.word	0x0800a698
 8009b68:	40200000 	.word	0x40200000
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	3e700000 	.word	0x3e700000
 8009b74:	41700000 	.word	0x41700000
 8009b78:	3fe00000 	.word	0x3fe00000
 8009b7c:	0800a658 	.word	0x0800a658
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b944      	cbnz	r4, 8009b96 <__kernel_rem_pio2+0x31a>
 8009b84:	b11b      	cbz	r3, 8009b8e <__kernel_rem_pio2+0x312>
 8009b86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	461c      	mov	r4, r3
 8009b90:	3201      	adds	r2, #1
 8009b92:	3704      	adds	r7, #4
 8009b94:	e745      	b.n	8009a22 <__kernel_rem_pio2+0x1a6>
 8009b96:	1acb      	subs	r3, r1, r3
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	e7f7      	b.n	8009b8e <__kernel_rem_pio2+0x312>
 8009b9e:	1e72      	subs	r2, r6, #1
 8009ba0:	ab0c      	add	r3, sp, #48	; 0x30
 8009ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009baa:	a90c      	add	r1, sp, #48	; 0x30
 8009bac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bb0:	e745      	b.n	8009a3e <__kernel_rem_pio2+0x1c2>
 8009bb2:	1e72      	subs	r2, r6, #1
 8009bb4:	ab0c      	add	r3, sp, #48	; 0x30
 8009bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bbe:	e7f4      	b.n	8009baa <__kernel_rem_pio2+0x32e>
 8009bc0:	a90c      	add	r1, sp, #48	; 0x30
 8009bc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	e796      	b.n	8009afa <__kernel_rem_pio2+0x27e>
 8009bcc:	3401      	adds	r4, #1
 8009bce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	d0fa      	beq.n	8009bcc <__kernel_rem_pio2+0x350>
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	f106 0801 	add.w	r8, r6, #1
 8009bdc:	18f5      	adds	r5, r6, r3
 8009bde:	ab20      	add	r3, sp, #128	; 0x80
 8009be0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009be4:	4434      	add	r4, r6
 8009be6:	4544      	cmp	r4, r8
 8009be8:	da04      	bge.n	8009bf4 <__kernel_rem_pio2+0x378>
 8009bea:	4626      	mov	r6, r4
 8009bec:	e6bf      	b.n	800996e <__kernel_rem_pio2+0xf2>
 8009bee:	2401      	movs	r4, #1
 8009bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bf2:	e7ec      	b.n	8009bce <__kernel_rem_pio2+0x352>
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf6:	f04f 0900 	mov.w	r9, #0
 8009bfa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009bfe:	f7f6 fc35 	bl	800046c <__aeabi_i2d>
 8009c02:	2600      	movs	r6, #0
 8009c04:	2700      	movs	r7, #0
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	e9c5 0100 	strd	r0, r1, [r5]
 8009c0c:	3b08      	subs	r3, #8
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	9504      	str	r5, [sp, #16]
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	4599      	cmp	r9, r3
 8009c16:	dd05      	ble.n	8009c24 <__kernel_rem_pio2+0x3a8>
 8009c18:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8009c1c:	f108 0801 	add.w	r8, r8, #1
 8009c20:	3508      	adds	r5, #8
 8009c22:	e7e0      	b.n	8009be6 <__kernel_rem_pio2+0x36a>
 8009c24:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009c28:	9900      	ldr	r1, [sp, #0]
 8009c2a:	f109 0901 	add.w	r9, r9, #1
 8009c2e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009c32:	9100      	str	r1, [sp, #0]
 8009c34:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8009c38:	f8cd c010 	str.w	ip, [sp, #16]
 8009c3c:	f7f6 fc80 	bl	8000540 <__aeabi_dmul>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 fac4 	bl	80001d4 <__adddf3>
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	e7df      	b.n	8009c12 <__kernel_rem_pio2+0x396>
 8009c52:	3c01      	subs	r4, #1
 8009c54:	e756      	b.n	8009b04 <__kernel_rem_pio2+0x288>
 8009c56:	f1cb 0200 	rsb	r2, fp, #0
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f000 fa8b 	bl	800a178 <scalbn>
 8009c62:	2200      	movs	r2, #0
 8009c64:	4ba4      	ldr	r3, [pc, #656]	; (8009ef8 <__kernel_rem_pio2+0x67c>)
 8009c66:	4604      	mov	r4, r0
 8009c68:	460d      	mov	r5, r1
 8009c6a:	f7f6 feef 	bl	8000a4c <__aeabi_dcmpge>
 8009c6e:	b1f8      	cbz	r0, 8009cb0 <__kernel_rem_pio2+0x434>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4ba2      	ldr	r3, [pc, #648]	; (8009efc <__kernel_rem_pio2+0x680>)
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fc62 	bl	8000540 <__aeabi_dmul>
 8009c7c:	f7f6 ff10 	bl	8000aa0 <__aeabi_d2iz>
 8009c80:	4607      	mov	r7, r0
 8009c82:	f7f6 fbf3 	bl	800046c <__aeabi_i2d>
 8009c86:	2200      	movs	r2, #0
 8009c88:	4b9b      	ldr	r3, [pc, #620]	; (8009ef8 <__kernel_rem_pio2+0x67c>)
 8009c8a:	f7f6 fc59 	bl	8000540 <__aeabi_dmul>
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4602      	mov	r2, r0
 8009c92:	4629      	mov	r1, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7f6 fa9b 	bl	80001d0 <__aeabi_dsub>
 8009c9a:	f7f6 ff01 	bl	8000aa0 <__aeabi_d2iz>
 8009c9e:	1c74      	adds	r4, r6, #1
 8009ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8009ca2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009ca6:	f10b 0b18 	add.w	fp, fp, #24
 8009caa:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8009cae:	e731      	b.n	8009b14 <__kernel_rem_pio2+0x298>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fef4 	bl	8000aa0 <__aeabi_d2iz>
 8009cb8:	ab0c      	add	r3, sp, #48	; 0x30
 8009cba:	4634      	mov	r4, r6
 8009cbc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009cc0:	e728      	b.n	8009b14 <__kernel_rem_pio2+0x298>
 8009cc2:	ab0c      	add	r3, sp, #48	; 0x30
 8009cc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009cc8:	f7f6 fbd0 	bl	800046c <__aeabi_i2d>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fc36 	bl	8000540 <__aeabi_dmul>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009cda:	464b      	mov	r3, r9
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fc2e 	bl	8000540 <__aeabi_dmul>
 8009ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ce8:	4606      	mov	r6, r0
 8009cea:	460f      	mov	r7, r1
 8009cec:	e722      	b.n	8009b34 <__kernel_rem_pio2+0x2b8>
 8009cee:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009cf2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009cf6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8009cfa:	f8cd c01c 	str.w	ip, [sp, #28]
 8009cfe:	f7f6 fc1f 	bl	8000540 <__aeabi_dmul>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4650      	mov	r0, sl
 8009d08:	4659      	mov	r1, fp
 8009d0a:	f7f6 fa63 	bl	80001d4 <__adddf3>
 8009d0e:	4682      	mov	sl, r0
 8009d10:	468b      	mov	fp, r1
 8009d12:	f108 0801 	add.w	r8, r8, #1
 8009d16:	9b02      	ldr	r3, [sp, #8]
 8009d18:	4598      	cmp	r8, r3
 8009d1a:	dc01      	bgt.n	8009d20 <__kernel_rem_pio2+0x4a4>
 8009d1c:	45b8      	cmp	r8, r7
 8009d1e:	dde6      	ble.n	8009cee <__kernel_rem_pio2+0x472>
 8009d20:	ab48      	add	r3, sp, #288	; 0x120
 8009d22:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009d26:	e9c7 ab00 	strd	sl, fp, [r7]
 8009d2a:	3e01      	subs	r6, #1
 8009d2c:	e707      	b.n	8009b3e <__kernel_rem_pio2+0x2c2>
 8009d2e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	dc09      	bgt.n	8009d48 <__kernel_rem_pio2+0x4cc>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc32      	bgt.n	8009d9e <__kernel_rem_pio2+0x522>
 8009d38:	d05a      	beq.n	8009df0 <__kernel_rem_pio2+0x574>
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	f003 0007 	and.w	r0, r3, #7
 8009d40:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d1f5      	bne.n	8009d3a <__kernel_rem_pio2+0x4be>
 8009d4e:	ab48      	add	r3, sp, #288	; 0x120
 8009d50:	441d      	add	r5, r3
 8009d52:	46aa      	mov	sl, r5
 8009d54:	46a3      	mov	fp, r4
 8009d56:	f1bb 0f00 	cmp.w	fp, #0
 8009d5a:	dc76      	bgt.n	8009e4a <__kernel_rem_pio2+0x5ce>
 8009d5c:	46aa      	mov	sl, r5
 8009d5e:	46a3      	mov	fp, r4
 8009d60:	f1bb 0f01 	cmp.w	fp, #1
 8009d64:	f300 8090 	bgt.w	8009e88 <__kernel_rem_pio2+0x60c>
 8009d68:	2700      	movs	r7, #0
 8009d6a:	463e      	mov	r6, r7
 8009d6c:	2c01      	cmp	r4, #1
 8009d6e:	f300 80aa 	bgt.w	8009ec6 <__kernel_rem_pio2+0x64a>
 8009d72:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009d76:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009d7a:	9b00      	ldr	r3, [sp, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f040 80ac 	bne.w	8009eda <__kernel_rem_pio2+0x65e>
 8009d82:	4603      	mov	r3, r0
 8009d84:	462a      	mov	r2, r5
 8009d86:	9806      	ldr	r0, [sp, #24]
 8009d88:	e9c0 2300 	strd	r2, r3, [r0]
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	460b      	mov	r3, r1
 8009d90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d94:	463a      	mov	r2, r7
 8009d96:	4633      	mov	r3, r6
 8009d98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009d9c:	e7cd      	b.n	8009d3a <__kernel_rem_pio2+0x4be>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	46a0      	mov	r8, r4
 8009da2:	4601      	mov	r1, r0
 8009da4:	ab48      	add	r3, sp, #288	; 0x120
 8009da6:	441d      	add	r5, r3
 8009da8:	f1b8 0f00 	cmp.w	r8, #0
 8009dac:	da3a      	bge.n	8009e24 <__kernel_rem_pio2+0x5a8>
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d03e      	beq.n	8009e32 <__kernel_rem_pio2+0x5b6>
 8009db4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009db8:	4602      	mov	r2, r0
 8009dba:	462b      	mov	r3, r5
 8009dbc:	9d06      	ldr	r5, [sp, #24]
 8009dbe:	2601      	movs	r6, #1
 8009dc0:	e9c5 2300 	strd	r2, r3, [r5]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009dca:	f7f6 fa01 	bl	80001d0 <__aeabi_dsub>
 8009dce:	4684      	mov	ip, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	ad48      	add	r5, sp, #288	; 0x120
 8009dd4:	42b4      	cmp	r4, r6
 8009dd6:	f105 0508 	add.w	r5, r5, #8
 8009dda:	da2c      	bge.n	8009e36 <__kernel_rem_pio2+0x5ba>
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	b10b      	cbz	r3, 8009de4 <__kernel_rem_pio2+0x568>
 8009de0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009de4:	4662      	mov	r2, ip
 8009de6:	463b      	mov	r3, r7
 8009de8:	9906      	ldr	r1, [sp, #24]
 8009dea:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009dee:	e7a4      	b.n	8009d3a <__kernel_rem_pio2+0x4be>
 8009df0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009df2:	ab48      	add	r3, sp, #288	; 0x120
 8009df4:	4637      	mov	r7, r6
 8009df6:	441d      	add	r5, r3
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	da09      	bge.n	8009e10 <__kernel_rem_pio2+0x594>
 8009dfc:	9b00      	ldr	r3, [sp, #0]
 8009dfe:	b10b      	cbz	r3, 8009e04 <__kernel_rem_pio2+0x588>
 8009e00:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009e04:	4632      	mov	r2, r6
 8009e06:	463b      	mov	r3, r7
 8009e08:	9906      	ldr	r1, [sp, #24]
 8009e0a:	e9c1 2300 	strd	r2, r3, [r1]
 8009e0e:	e794      	b.n	8009d3a <__kernel_rem_pio2+0x4be>
 8009e10:	4630      	mov	r0, r6
 8009e12:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 f9dc 	bl	80001d4 <__adddf3>
 8009e1c:	3c01      	subs	r4, #1
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460f      	mov	r7, r1
 8009e22:	e7e9      	b.n	8009df8 <__kernel_rem_pio2+0x57c>
 8009e24:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009e28:	f7f6 f9d4 	bl	80001d4 <__adddf3>
 8009e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e30:	e7ba      	b.n	8009da8 <__kernel_rem_pio2+0x52c>
 8009e32:	460d      	mov	r5, r1
 8009e34:	e7c0      	b.n	8009db8 <__kernel_rem_pio2+0x53c>
 8009e36:	4660      	mov	r0, ip
 8009e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 f9c9 	bl	80001d4 <__adddf3>
 8009e42:	3601      	adds	r6, #1
 8009e44:	4684      	mov	ip, r0
 8009e46:	460f      	mov	r7, r1
 8009e48:	e7c4      	b.n	8009dd4 <__kernel_rem_pio2+0x558>
 8009e4a:	e9da 6700 	ldrd	r6, r7, [sl]
 8009e4e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009e52:	4632      	mov	r2, r6
 8009e54:	463b      	mov	r3, r7
 8009e56:	4640      	mov	r0, r8
 8009e58:	4649      	mov	r1, r9
 8009e5a:	f7f6 f9bb 	bl	80001d4 <__adddf3>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 f9b1 	bl	80001d0 <__aeabi_dsub>
 8009e6e:	4632      	mov	r2, r6
 8009e70:	463b      	mov	r3, r7
 8009e72:	f7f6 f9af 	bl	80001d4 <__adddf3>
 8009e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e7a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009e7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e82:	e9ca 2300 	strd	r2, r3, [sl]
 8009e86:	e766      	b.n	8009d56 <__kernel_rem_pio2+0x4da>
 8009e88:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e8c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009e90:	4642      	mov	r2, r8
 8009e92:	464b      	mov	r3, r9
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 f99c 	bl	80001d4 <__adddf3>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 f992 	bl	80001d0 <__aeabi_dsub>
 8009eac:	4642      	mov	r2, r8
 8009eae:	464b      	mov	r3, r9
 8009eb0:	f7f6 f990 	bl	80001d4 <__adddf3>
 8009eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb8:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009ebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ec0:	e9ca 2300 	strd	r2, r3, [sl]
 8009ec4:	e74c      	b.n	8009d60 <__kernel_rem_pio2+0x4e4>
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009ecc:	4631      	mov	r1, r6
 8009ece:	f7f6 f981 	bl	80001d4 <__adddf3>
 8009ed2:	3c01      	subs	r4, #1
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	460e      	mov	r6, r1
 8009ed8:	e748      	b.n	8009d6c <__kernel_rem_pio2+0x4f0>
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009ee0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009ee4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009ee8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009eec:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009ef0:	601d      	str	r5, [r3, #0]
 8009ef2:	615e      	str	r6, [r3, #20]
 8009ef4:	e721      	b.n	8009d3a <__kernel_rem_pio2+0x4be>
 8009ef6:	bf00      	nop
 8009ef8:	41700000 	.word	0x41700000
 8009efc:	3e700000 	.word	0x3e700000

08009f00 <__kernel_sin>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	b086      	sub	sp, #24
 8009f06:	e9cd 2300 	strd	r2, r3, [sp]
 8009f0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f0e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f12:	4682      	mov	sl, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009f18:	da03      	bge.n	8009f22 <__kernel_sin+0x22>
 8009f1a:	f7f6 fdc1 	bl	8000aa0 <__aeabi_d2iz>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d050      	beq.n	8009fc4 <__kernel_sin+0xc4>
 8009f22:	4652      	mov	r2, sl
 8009f24:	4623      	mov	r3, r4
 8009f26:	4650      	mov	r0, sl
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7f6 fb09 	bl	8000540 <__aeabi_dmul>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460f      	mov	r7, r1
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4650      	mov	r0, sl
 8009f38:	4621      	mov	r1, r4
 8009f3a:	f7f6 fb01 	bl	8000540 <__aeabi_dmul>
 8009f3e:	a33e      	add	r3, pc, #248	; (adr r3, 800a038 <__kernel_sin+0x138>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f7f6 faf8 	bl	8000540 <__aeabi_dmul>
 8009f50:	a33b      	add	r3, pc, #236	; (adr r3, 800a040 <__kernel_sin+0x140>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f93b 	bl	80001d0 <__aeabi_dsub>
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	f7f6 faef 	bl	8000540 <__aeabi_dmul>
 8009f62:	a339      	add	r3, pc, #228	; (adr r3, 800a048 <__kernel_sin+0x148>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f934 	bl	80001d4 <__adddf3>
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	f7f6 fae6 	bl	8000540 <__aeabi_dmul>
 8009f74:	a336      	add	r3, pc, #216	; (adr r3, 800a050 <__kernel_sin+0x150>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f929 	bl	80001d0 <__aeabi_dsub>
 8009f7e:	4632      	mov	r2, r6
 8009f80:	463b      	mov	r3, r7
 8009f82:	f7f6 fadd 	bl	8000540 <__aeabi_dmul>
 8009f86:	a334      	add	r3, pc, #208	; (adr r3, 800a058 <__kernel_sin+0x158>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f922 	bl	80001d4 <__adddf3>
 8009f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f94:	b9dd      	cbnz	r5, 8009fce <__kernel_sin+0xce>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	f7f6 facf 	bl	8000540 <__aeabi_dmul>
 8009fa2:	a32f      	add	r3, pc, #188	; (adr r3, 800a060 <__kernel_sin+0x160>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 f912 	bl	80001d0 <__aeabi_dsub>
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	f7f6 fac6 	bl	8000540 <__aeabi_dmul>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4621      	mov	r1, r4
 8009fbc:	f7f6 f90a 	bl	80001d4 <__adddf3>
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	b006      	add	sp, #24
 8009fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fce:	2200      	movs	r2, #0
 8009fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd4:	4b24      	ldr	r3, [pc, #144]	; (800a068 <__kernel_sin+0x168>)
 8009fd6:	f7f6 fab3 	bl	8000540 <__aeabi_dmul>
 8009fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	f7f6 faab 	bl	8000540 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ff2:	f7f6 f8ed 	bl	80001d0 <__aeabi_dsub>
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	463b      	mov	r3, r7
 8009ffa:	f7f6 faa1 	bl	8000540 <__aeabi_dmul>
 8009ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a002:	f7f6 f8e5 	bl	80001d0 <__aeabi_dsub>
 800a006:	a316      	add	r3, pc, #88	; (adr r3, 800a060 <__kernel_sin+0x160>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 fa94 	bl	8000540 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4630      	mov	r0, r6
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 f8d8 	bl	80001d4 <__adddf3>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4650      	mov	r0, sl
 800a02a:	4621      	mov	r1, r4
 800a02c:	f7f6 f8d0 	bl	80001d0 <__aeabi_dsub>
 800a030:	e7c6      	b.n	8009fc0 <__kernel_sin+0xc0>
 800a032:	bf00      	nop
 800a034:	f3af 8000 	nop.w
 800a038:	5acfd57c 	.word	0x5acfd57c
 800a03c:	3de5d93a 	.word	0x3de5d93a
 800a040:	8a2b9ceb 	.word	0x8a2b9ceb
 800a044:	3e5ae5e6 	.word	0x3e5ae5e6
 800a048:	57b1fe7d 	.word	0x57b1fe7d
 800a04c:	3ec71de3 	.word	0x3ec71de3
 800a050:	19c161d5 	.word	0x19c161d5
 800a054:	3f2a01a0 	.word	0x3f2a01a0
 800a058:	1110f8a6 	.word	0x1110f8a6
 800a05c:	3f811111 	.word	0x3f811111
 800a060:	55555549 	.word	0x55555549
 800a064:	3fc55555 	.word	0x3fc55555
 800a068:	3fe00000 	.word	0x3fe00000

0800a06c <fabs>:
 800a06c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a070:	4770      	bx	lr
 800a072:	0000      	movs	r0, r0
 800a074:	0000      	movs	r0, r0
	...

0800a078 <floor>:
 800a078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a080:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a084:	2e13      	cmp	r6, #19
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4607      	mov	r7, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	4605      	mov	r5, r0
 800a090:	dc33      	bgt.n	800a0fa <floor+0x82>
 800a092:	2e00      	cmp	r6, #0
 800a094:	da14      	bge.n	800a0c0 <floor+0x48>
 800a096:	a334      	add	r3, pc, #208	; (adr r3, 800a168 <floor+0xf0>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 f89a 	bl	80001d4 <__adddf3>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f7f6 fcdc 	bl	8000a60 <__aeabi_dcmpgt>
 800a0a8:	b138      	cbz	r0, 800a0ba <floor+0x42>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	da58      	bge.n	800a160 <floor+0xe8>
 800a0ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a0b2:	431d      	orrs	r5, r3
 800a0b4:	d001      	beq.n	800a0ba <floor+0x42>
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	4c2d      	ldr	r4, [pc, #180]	; (800a170 <floor+0xf8>)
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	462f      	mov	r7, r5
 800a0be:	e025      	b.n	800a10c <floor+0x94>
 800a0c0:	4a2c      	ldr	r2, [pc, #176]	; (800a174 <floor+0xfc>)
 800a0c2:	fa42 f806 	asr.w	r8, r2, r6
 800a0c6:	ea01 0208 	and.w	r2, r1, r8
 800a0ca:	4302      	orrs	r2, r0
 800a0cc:	d01e      	beq.n	800a10c <floor+0x94>
 800a0ce:	a326      	add	r3, pc, #152	; (adr r3, 800a168 <floor+0xf0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f87e 	bl	80001d4 <__adddf3>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f7f6 fcc0 	bl	8000a60 <__aeabi_dcmpgt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d0ea      	beq.n	800a0ba <floor+0x42>
 800a0e4:	2c00      	cmp	r4, #0
 800a0e6:	bfbe      	ittt	lt
 800a0e8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a0ec:	fa43 f606 	asrlt.w	r6, r3, r6
 800a0f0:	19a4      	addlt	r4, r4, r6
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	ea24 0408 	bic.w	r4, r4, r8
 800a0f8:	e7df      	b.n	800a0ba <floor+0x42>
 800a0fa:	2e33      	cmp	r6, #51	; 0x33
 800a0fc:	dd0a      	ble.n	800a114 <floor+0x9c>
 800a0fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a102:	d103      	bne.n	800a10c <floor+0x94>
 800a104:	f7f6 f866 	bl	80001d4 <__adddf3>
 800a108:	4607      	mov	r7, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4638      	mov	r0, r7
 800a10e:	4619      	mov	r1, r3
 800a110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a114:	f04f 32ff 	mov.w	r2, #4294967295
 800a118:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a11c:	fa22 f808 	lsr.w	r8, r2, r8
 800a120:	ea18 0f00 	tst.w	r8, r0
 800a124:	d0f2      	beq.n	800a10c <floor+0x94>
 800a126:	a310      	add	r3, pc, #64	; (adr r3, 800a168 <floor+0xf0>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f7f6 f852 	bl	80001d4 <__adddf3>
 800a130:	2200      	movs	r2, #0
 800a132:	2300      	movs	r3, #0
 800a134:	f7f6 fc94 	bl	8000a60 <__aeabi_dcmpgt>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d0be      	beq.n	800a0ba <floor+0x42>
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	da02      	bge.n	800a146 <floor+0xce>
 800a140:	2e14      	cmp	r6, #20
 800a142:	d103      	bne.n	800a14c <floor+0xd4>
 800a144:	3401      	adds	r4, #1
 800a146:	ea25 0508 	bic.w	r5, r5, r8
 800a14a:	e7b6      	b.n	800a0ba <floor+0x42>
 800a14c:	2301      	movs	r3, #1
 800a14e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a152:	fa03 f606 	lsl.w	r6, r3, r6
 800a156:	4435      	add	r5, r6
 800a158:	42bd      	cmp	r5, r7
 800a15a:	bf38      	it	cc
 800a15c:	18e4      	addcc	r4, r4, r3
 800a15e:	e7f2      	b.n	800a146 <floor+0xce>
 800a160:	2500      	movs	r5, #0
 800a162:	462c      	mov	r4, r5
 800a164:	e7a9      	b.n	800a0ba <floor+0x42>
 800a166:	bf00      	nop
 800a168:	8800759c 	.word	0x8800759c
 800a16c:	7e37e43c 	.word	0x7e37e43c
 800a170:	bff00000 	.word	0xbff00000
 800a174:	000fffff 	.word	0x000fffff

0800a178 <scalbn>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	4617      	mov	r7, r2
 800a184:	460b      	mov	r3, r1
 800a186:	b996      	cbnz	r6, 800a1ae <scalbn+0x36>
 800a188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a18c:	4303      	orrs	r3, r0
 800a18e:	d039      	beq.n	800a204 <scalbn+0x8c>
 800a190:	4b33      	ldr	r3, [pc, #204]	; (800a260 <scalbn+0xe8>)
 800a192:	2200      	movs	r2, #0
 800a194:	f7f6 f9d4 	bl	8000540 <__aeabi_dmul>
 800a198:	4b32      	ldr	r3, [pc, #200]	; (800a264 <scalbn+0xec>)
 800a19a:	4604      	mov	r4, r0
 800a19c:	429f      	cmp	r7, r3
 800a19e:	460d      	mov	r5, r1
 800a1a0:	da0f      	bge.n	800a1c2 <scalbn+0x4a>
 800a1a2:	a32b      	add	r3, pc, #172	; (adr r3, 800a250 <scalbn+0xd8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 f9ca 	bl	8000540 <__aeabi_dmul>
 800a1ac:	e006      	b.n	800a1bc <scalbn+0x44>
 800a1ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a1b2:	4296      	cmp	r6, r2
 800a1b4:	d10a      	bne.n	800a1cc <scalbn+0x54>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f7f6 f80c 	bl	80001d4 <__adddf3>
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	e020      	b.n	800a204 <scalbn+0x8c>
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a1c8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a1cc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a1d0:	19b9      	adds	r1, r7, r6
 800a1d2:	4291      	cmp	r1, r2
 800a1d4:	dd0e      	ble.n	800a1f4 <scalbn+0x7c>
 800a1d6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a1da:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a1de:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a1e2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a1e6:	4820      	ldr	r0, [pc, #128]	; (800a268 <scalbn+0xf0>)
 800a1e8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a1ec:	a31a      	add	r3, pc, #104	; (adr r3, 800a258 <scalbn+0xe0>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	e7d9      	b.n	800a1a8 <scalbn+0x30>
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	dd08      	ble.n	800a20a <scalbn+0x92>
 800a1f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a200:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a204:	4620      	mov	r0, r4
 800a206:	4629      	mov	r1, r5
 800a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a20a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a20e:	da12      	bge.n	800a236 <scalbn+0xbe>
 800a210:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a214:	429f      	cmp	r7, r3
 800a216:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a21a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a21e:	dcdc      	bgt.n	800a1da <scalbn+0x62>
 800a220:	a30b      	add	r3, pc, #44	; (adr r3, 800a250 <scalbn+0xd8>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a22a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a22e:	480f      	ldr	r0, [pc, #60]	; (800a26c <scalbn+0xf4>)
 800a230:	f041 011f 	orr.w	r1, r1, #31
 800a234:	e7b8      	b.n	800a1a8 <scalbn+0x30>
 800a236:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a23a:	3136      	adds	r1, #54	; 0x36
 800a23c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a240:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	2200      	movs	r2, #0
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <scalbn+0xf8>)
 800a24c:	e7ac      	b.n	800a1a8 <scalbn+0x30>
 800a24e:	bf00      	nop
 800a250:	c2f8f359 	.word	0xc2f8f359
 800a254:	01a56e1f 	.word	0x01a56e1f
 800a258:	8800759c 	.word	0x8800759c
 800a25c:	7e37e43c 	.word	0x7e37e43c
 800a260:	43500000 	.word	0x43500000
 800a264:	ffff3cb0 	.word	0xffff3cb0
 800a268:	8800759c 	.word	0x8800759c
 800a26c:	c2f8f359 	.word	0xc2f8f359
 800a270:	3c900000 	.word	0x3c900000

0800a274 <__ieee754_fmod>:
 800a274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a278:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800a27c:	460e      	mov	r6, r1
 800a27e:	461d      	mov	r5, r3
 800a280:	4619      	mov	r1, r3
 800a282:	ea58 0302 	orrs.w	r3, r8, r2
 800a286:	4607      	mov	r7, r0
 800a288:	4614      	mov	r4, r2
 800a28a:	4694      	mov	ip, r2
 800a28c:	4696      	mov	lr, r2
 800a28e:	d00c      	beq.n	800a2aa <__ieee754_fmod+0x36>
 800a290:	4a7a      	ldr	r2, [pc, #488]	; (800a47c <__ieee754_fmod+0x208>)
 800a292:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a296:	4293      	cmp	r3, r2
 800a298:	46b2      	mov	sl, r6
 800a29a:	dc06      	bgt.n	800a2aa <__ieee754_fmod+0x36>
 800a29c:	4262      	negs	r2, r4
 800a29e:	4878      	ldr	r0, [pc, #480]	; (800a480 <__ieee754_fmod+0x20c>)
 800a2a0:	4322      	orrs	r2, r4
 800a2a2:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800a2a6:	4282      	cmp	r2, r0
 800a2a8:	d90c      	bls.n	800a2c4 <__ieee754_fmod+0x50>
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	f7f6 f945 	bl	8000540 <__aeabi_dmul>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	f7f6 fa6b 	bl	8000794 <__aeabi_ddiv>
 800a2be:	4607      	mov	r7, r0
 800a2c0:	460e      	mov	r6, r1
 800a2c2:	e00e      	b.n	800a2e2 <__ieee754_fmod+0x6e>
 800a2c4:	4543      	cmp	r3, r8
 800a2c6:	46b9      	mov	r9, r7
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800a2ce:	dc0c      	bgt.n	800a2ea <__ieee754_fmod+0x76>
 800a2d0:	db07      	blt.n	800a2e2 <__ieee754_fmod+0x6e>
 800a2d2:	4567      	cmp	r7, ip
 800a2d4:	d305      	bcc.n	800a2e2 <__ieee754_fmod+0x6e>
 800a2d6:	d108      	bne.n	800a2ea <__ieee754_fmod+0x76>
 800a2d8:	4b6a      	ldr	r3, [pc, #424]	; (800a484 <__ieee754_fmod+0x210>)
 800a2da:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800a2de:	e9d4 7600 	ldrd	r7, r6, [r4]
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ea:	ea1a 0f00 	tst.w	sl, r0
 800a2ee:	d14a      	bne.n	800a386 <__ieee754_fmod+0x112>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d141      	bne.n	800a378 <__ieee754_fmod+0x104>
 800a2f4:	464a      	mov	r2, r9
 800a2f6:	4864      	ldr	r0, [pc, #400]	; (800a488 <__ieee754_fmod+0x214>)
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	dc3a      	bgt.n	800a372 <__ieee754_fmod+0xfe>
 800a2fc:	4a60      	ldr	r2, [pc, #384]	; (800a480 <__ieee754_fmod+0x20c>)
 800a2fe:	402a      	ands	r2, r5
 800a300:	2a00      	cmp	r2, #0
 800a302:	d14f      	bne.n	800a3a4 <__ieee754_fmod+0x130>
 800a304:	f1b8 0f00 	cmp.w	r8, #0
 800a308:	d144      	bne.n	800a394 <__ieee754_fmod+0x120>
 800a30a:	4666      	mov	r6, ip
 800a30c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a310:	2e00      	cmp	r6, #0
 800a312:	dc3c      	bgt.n	800a38e <__ieee754_fmod+0x11a>
 800a314:	4e5d      	ldr	r6, [pc, #372]	; (800a48c <__ieee754_fmod+0x218>)
 800a316:	42b0      	cmp	r0, r6
 800a318:	db49      	blt.n	800a3ae <__ieee754_fmod+0x13a>
 800a31a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a322:	4e5a      	ldr	r6, [pc, #360]	; (800a48c <__ieee754_fmod+0x218>)
 800a324:	42b2      	cmp	r2, r6
 800a326:	db54      	blt.n	800a3d2 <__ieee754_fmod+0x15e>
 800a328:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a32c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800a330:	1a80      	subs	r0, r0, r2
 800a332:	1b5e      	subs	r6, r3, r5
 800a334:	eba1 070e 	sub.w	r7, r1, lr
 800a338:	2800      	cmp	r0, #0
 800a33a:	d161      	bne.n	800a400 <__ieee754_fmod+0x18c>
 800a33c:	4571      	cmp	r1, lr
 800a33e:	bf38      	it	cc
 800a340:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800a344:	2e00      	cmp	r6, #0
 800a346:	bfa4      	itt	ge
 800a348:	4639      	movge	r1, r7
 800a34a:	4633      	movge	r3, r6
 800a34c:	ea53 0001 	orrs.w	r0, r3, r1
 800a350:	d0c2      	beq.n	800a2d8 <__ieee754_fmod+0x64>
 800a352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a356:	db68      	blt.n	800a42a <__ieee754_fmod+0x1b6>
 800a358:	484c      	ldr	r0, [pc, #304]	; (800a48c <__ieee754_fmod+0x218>)
 800a35a:	4282      	cmp	r2, r0
 800a35c:	db6b      	blt.n	800a436 <__ieee754_fmod+0x1c2>
 800a35e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a362:	431c      	orrs	r4, r3
 800a364:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800a368:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800a36c:	460f      	mov	r7, r1
 800a36e:	464e      	mov	r6, r9
 800a370:	e7b7      	b.n	800a2e2 <__ieee754_fmod+0x6e>
 800a372:	3801      	subs	r0, #1
 800a374:	0052      	lsls	r2, r2, #1
 800a376:	e7bf      	b.n	800a2f8 <__ieee754_fmod+0x84>
 800a378:	4844      	ldr	r0, [pc, #272]	; (800a48c <__ieee754_fmod+0x218>)
 800a37a:	02da      	lsls	r2, r3, #11
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	ddbd      	ble.n	800a2fc <__ieee754_fmod+0x88>
 800a380:	3801      	subs	r0, #1
 800a382:	0052      	lsls	r2, r2, #1
 800a384:	e7fa      	b.n	800a37c <__ieee754_fmod+0x108>
 800a386:	1518      	asrs	r0, r3, #20
 800a388:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800a38c:	e7b6      	b.n	800a2fc <__ieee754_fmod+0x88>
 800a38e:	3a01      	subs	r2, #1
 800a390:	0076      	lsls	r6, r6, #1
 800a392:	e7bd      	b.n	800a310 <__ieee754_fmod+0x9c>
 800a394:	4a3d      	ldr	r2, [pc, #244]	; (800a48c <__ieee754_fmod+0x218>)
 800a396:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800a39a:	2e00      	cmp	r6, #0
 800a39c:	ddba      	ble.n	800a314 <__ieee754_fmod+0xa0>
 800a39e:	3a01      	subs	r2, #1
 800a3a0:	0076      	lsls	r6, r6, #1
 800a3a2:	e7fa      	b.n	800a39a <__ieee754_fmod+0x126>
 800a3a4:	ea4f 5228 	mov.w	r2, r8, asr #20
 800a3a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3ac:	e7b2      	b.n	800a314 <__ieee754_fmod+0xa0>
 800a3ae:	1a31      	subs	r1, r6, r0
 800a3b0:	291f      	cmp	r1, #31
 800a3b2:	dc08      	bgt.n	800a3c6 <__ieee754_fmod+0x152>
 800a3b4:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800a3b8:	408b      	lsls	r3, r1
 800a3ba:	fa29 f606 	lsr.w	r6, r9, r6
 800a3be:	4333      	orrs	r3, r6
 800a3c0:	fa09 f101 	lsl.w	r1, r9, r1
 800a3c4:	e7ad      	b.n	800a322 <__ieee754_fmod+0xae>
 800a3c6:	4b32      	ldr	r3, [pc, #200]	; (800a490 <__ieee754_fmod+0x21c>)
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	1a1b      	subs	r3, r3, r0
 800a3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d0:	e7a7      	b.n	800a322 <__ieee754_fmod+0xae>
 800a3d2:	eba6 0e02 	sub.w	lr, r6, r2
 800a3d6:	f1be 0f1f 	cmp.w	lr, #31
 800a3da:	dc0a      	bgt.n	800a3f2 <__ieee754_fmod+0x17e>
 800a3dc:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800a3e0:	fa08 f80e 	lsl.w	r8, r8, lr
 800a3e4:	fa2c f505 	lsr.w	r5, ip, r5
 800a3e8:	ea45 0508 	orr.w	r5, r5, r8
 800a3ec:	fa0c fe0e 	lsl.w	lr, ip, lr
 800a3f0:	e79e      	b.n	800a330 <__ieee754_fmod+0xbc>
 800a3f2:	4d27      	ldr	r5, [pc, #156]	; (800a490 <__ieee754_fmod+0x21c>)
 800a3f4:	f04f 0e00 	mov.w	lr, #0
 800a3f8:	1aad      	subs	r5, r5, r2
 800a3fa:	fa0c f505 	lsl.w	r5, ip, r5
 800a3fe:	e797      	b.n	800a330 <__ieee754_fmod+0xbc>
 800a400:	4571      	cmp	r1, lr
 800a402:	bf38      	it	cc
 800a404:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800a408:	2e00      	cmp	r6, #0
 800a40a:	da05      	bge.n	800a418 <__ieee754_fmod+0x1a4>
 800a40c:	0fce      	lsrs	r6, r1, #31
 800a40e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800a412:	0049      	lsls	r1, r1, #1
 800a414:	3801      	subs	r0, #1
 800a416:	e78c      	b.n	800a332 <__ieee754_fmod+0xbe>
 800a418:	ea56 0307 	orrs.w	r3, r6, r7
 800a41c:	f43f af5c 	beq.w	800a2d8 <__ieee754_fmod+0x64>
 800a420:	0ffb      	lsrs	r3, r7, #31
 800a422:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800a426:	0079      	lsls	r1, r7, #1
 800a428:	e7f4      	b.n	800a414 <__ieee754_fmod+0x1a0>
 800a42a:	0fc8      	lsrs	r0, r1, #31
 800a42c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a430:	0049      	lsls	r1, r1, #1
 800a432:	3a01      	subs	r2, #1
 800a434:	e78d      	b.n	800a352 <__ieee754_fmod+0xde>
 800a436:	1a80      	subs	r0, r0, r2
 800a438:	2814      	cmp	r0, #20
 800a43a:	dc0a      	bgt.n	800a452 <__ieee754_fmod+0x1de>
 800a43c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a440:	fa03 f202 	lsl.w	r2, r3, r2
 800a444:	40c1      	lsrs	r1, r0
 800a446:	430a      	orrs	r2, r1
 800a448:	4103      	asrs	r3, r0
 800a44a:	4610      	mov	r0, r2
 800a44c:	ea43 0104 	orr.w	r1, r3, r4
 800a450:	e735      	b.n	800a2be <__ieee754_fmod+0x4a>
 800a452:	281f      	cmp	r0, #31
 800a454:	dc07      	bgt.n	800a466 <__ieee754_fmod+0x1f2>
 800a456:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a45a:	40c1      	lsrs	r1, r0
 800a45c:	fa03 f202 	lsl.w	r2, r3, r2
 800a460:	430a      	orrs	r2, r1
 800a462:	4623      	mov	r3, r4
 800a464:	e7f1      	b.n	800a44a <__ieee754_fmod+0x1d6>
 800a466:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800a46a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a46e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800a472:	32e2      	adds	r2, #226	; 0xe2
 800a474:	fa43 f202 	asr.w	r2, r3, r2
 800a478:	e7f3      	b.n	800a462 <__ieee754_fmod+0x1ee>
 800a47a:	bf00      	nop
 800a47c:	7fefffff 	.word	0x7fefffff
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	0800a6a8 	.word	0x0800a6a8
 800a488:	fffffbed 	.word	0xfffffbed
 800a48c:	fffffc02 	.word	0xfffffc02
 800a490:	fffffbe2 	.word	0xfffffbe2

0800a494 <_init>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_fini>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr
